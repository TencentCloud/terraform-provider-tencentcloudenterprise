// All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v20180326

import (
	"encoding/json"

	tchttp "terraform-provider-tencentcloudenterprise/sdk/common/http"
)

// to suppress unused import error, although ugly
var _ = tchttp.POST
var _ = json.Marshal

type AdjustLaneRulePriorityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AdjustLaneRulePriorityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AdjustLaneRulePriorityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RedoTaskRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *RedoTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RedoTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageVmGroup struct {

	// 虚拟机部署组总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 虚拟机部署组列表信息

	Content []*VmGroupSimple `json:"Content,omitempty" name:"Content"`
}

type GetServiceStatisticsRequest struct {
	*tchttp.BaseRequest

	// 服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 统计开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 统计结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
}

func (r *GetServiceStatisticsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetServiceStatisticsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *StartGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type IndicatorCoord struct {

	// 指标横坐标值

	CoordX *string `json:"CoordX,omitempty" name:"CoordX"`
	// 指标纵坐标值

	CoordY *string `json:"CoordY,omitempty" name:"CoordY"`
	// 指标标签，用于标识附加信息

	CoordTag *string `json:"CoordTag,omitempty" name:"CoordTag"`
}

type UnitNamespace struct {

	// 单元化命名空间ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间Name

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 创建时间

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 更新时间

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 关联超云单元ID

	DestUnitId *string `json:"DestUnitId,omitempty" name:"DestUnitId"`
	// 关联超云单元Name

	DestUnitName *string `json:"DestUnitName,omitempty" name:"DestUnitName"`
	// 关联超云TsfId

	DestTsfId *string `json:"DestTsfId,omitempty" name:"DestTsfId"`
	// 关联超云TsfName

	DestTsfName *string `json:"DestTsfName,omitempty" name:"DestTsfName"`
}

type DescribeResourceConfigLicenseFunction struct {

	// name

	Name *string `json:"Name,omitempty" name:"Name"`
	// enable

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
}

type DescribeTaskExecuteLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 执行日志

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskExecuteLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeliveryConfigBindGroup struct {

	// 配置id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置名

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 采集路径

	CollectPath []*string `json:"CollectPath,omitempty" name:"CollectPath"`
	// 关联部署组信息

	Groups []*GroupInfo `json:"Groups,omitempty" name:"Groups"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// KafkaVIp

	KafkaVIp *string `json:"KafkaVIp,omitempty" name:"KafkaVIp"`
	// KafkaAddress

	KafkaAddress *string `json:"KafkaAddress,omitempty" name:"KafkaAddress"`
	// KafkaVPort

	KafkaVPort *string `json:"KafkaVPort,omitempty" name:"KafkaVPort"`
	// Topic

	Topic *string `json:"Topic,omitempty" name:"Topic"`
	// LineRule

	LineRule *string `json:"LineRule,omitempty" name:"LineRule"`
	// CustomRule

	CustomRule *string `json:"CustomRule,omitempty" name:"CustomRule"`
	// EnableGlobalLineRule

	EnableGlobalLineRule *bool `json:"EnableGlobalLineRule,omitempty" name:"EnableGlobalLineRule"`
	// EnableAuth

	EnableAuth *bool `json:"EnableAuth,omitempty" name:"EnableAuth"`
	// Username

	Username *string `json:"Username,omitempty" name:"Username"`
	// Password

	Password *string `json:"Password,omitempty" name:"Password"`
	// KafkaInfos

	KafkaInfos []*DeliveryKafkaInfo `json:"KafkaInfos,omitempty" name:"KafkaInfos"`
}

type DescribeTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateConfigTemplateRequest struct {
	*tchttp.BaseRequest

	// 配置模板id

	ConfigTemplateId *string `json:"ConfigTemplateId,omitempty" name:"ConfigTemplateId"`
	// 配置模板名称

	ConfigTemplateName *string `json:"ConfigTemplateName,omitempty" name:"ConfigTemplateName"`
	// 配置模板描述

	ConfigTemplateDesc *string `json:"ConfigTemplateDesc,omitempty" name:"ConfigTemplateDesc"`
	// 配置模板对应的微服务框架

	ConfigTemplateType *string `json:"ConfigTemplateType,omitempty" name:"ConfigTemplateType"`
	// 配置模板数据

	ConfigTemplateValue *string `json:"ConfigTemplateValue,omitempty" name:"ConfigTemplateValue"`
}

func (r *UpdateConfigTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateConfigTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BatchGroup struct {

	// 批次内的部署组列表

	Groups []*ReleaseGroup `json:"Groups,omitempty" name:"Groups"`
}

type TaskExecuteRecordPage struct {

	// 总数量

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 任务执行列表

	Content []*TaskExecuteRecord `json:"Content,omitempty" name:"Content"`
}

type DescribeGatewayInstancesByMultiCloudRequest struct {
	*tchttp.BaseRequest

	// 搜索词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 限制数目

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 无

	IdList []*string `json:"IdList,omitempty" name:"IdList"`
}

func (r *DescribeGatewayInstancesByMultiCloudRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayInstancesByMultiCloudRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupInfoPage struct {

	// 总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 部署组列表

	Content []*GroupInfo `json:"Content,omitempty" name:"Content"`
}

type StdoutLogV2 struct {

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 日志内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 日志时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 实例IP

	InstanceIp *string `json:"InstanceIp,omitempty" name:"InstanceIp"`
}

type EnableCircuitBreakerRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true、false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableCircuitBreakerRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableCircuitBreakerRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ValidateDeleteConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：可以删除；false：不可删除

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ValidateDeleteConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ValidateDeleteConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerEventsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// events 分页列表

		Result *TsfPageContainerEvent `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerEventsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerEventsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSdkVersionRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 实例ID，虚机为 ins-xxx，容器为 pod name

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeSdkVersionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSdkVersionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskFlowRequest struct {
	*tchttp.BaseRequest

	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流历史 ID

	FlowLogId *string `json:"FlowLogId,omitempty" name:"FlowLogId"`
}

func (r *DescribeTaskFlowRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskFlowRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskIdV2 struct {

	// 任务Id

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

type DescribeTaskExecuteShardArgumentRequest struct {
	*tchttp.BaseRequest

	// 执行 ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
}

func (r *DescribeTaskExecuteShardArgumentRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteShardArgumentRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateContainerGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateContainerGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateContainerGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShrinkInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ShrinkInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShrinkInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayJwtPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件信息列表

		Result *GatewayJwtPlugin `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayJwtPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayJwtPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopTaskExecuteRequest struct {
	*tchttp.BaseRequest

	// 任务批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 任务执行ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *StopTaskExecuteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopTaskExecuteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeKubeDeploymentsRequest struct {
	*tchttp.BaseRequest

	// ClusterId值

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// Namespace值

	Namespace *string `json:"Namespace,omitempty" name:"Namespace"`
	// Imported值

	Imported *bool `json:"Imported,omitempty" name:"Imported"`
	// Limit值

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// Offset值

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribeKubeDeploymentsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeKubeDeploymentsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeProductHelpRequest struct {
	*tchttp.BaseRequest

	// id

	HelpId *string `json:"HelpId,omitempty" name:"HelpId"`
	// 是否有效

	Valid *int64 `json:"Valid,omitempty" name:"Valid"`
	// 每页数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 使用缓存（已废弃）

	CacheAble *bool `json:"CacheAble,omitempty" name:"CacheAble"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
	// 是否发布状态(租户端:true,运营端false. 默认false)

	Released *bool `json:"Released,omitempty" name:"Released"`
}

func (r *DescribeProductHelpRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeProductHelpRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type KubeDeployment struct {

	// Name值

	Name *string `json:"Name,omitempty" name:"Name"`
	// Status值

	Status *string `json:"Status,omitempty" name:"Status"`
	// Imported值

	Imported *bool `json:"Imported,omitempty" name:"Imported"`
	// ApplicationName值

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
}

type UpdateApplicationAgentResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateApplicationAgentResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApplicationAgentResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ValidateNamespaceClusterVPCRequest struct {
	*tchttp.BaseRequest

	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *ValidateNamespaceClusterVPCRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ValidateNamespaceClusterVPCRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateServerlessGroupRequest struct {
	*tchttp.BaseRequest

	// 分组所属应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 分组名称字段，长度1~60，字母或下划线开头，可包含字母数字下划线

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 分组所属名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 分组所属集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *CreateServerlessGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateServerlessGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayApisResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 翻页结构

		Result *TsfPageApiDetailInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayApisResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayApisResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageUserIsExistsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：存在；false：不存在

		IsExist *bool `json:"IsExist,omitempty" name:"IsExist"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ImageUserIsExistsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageUserIsExistsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAuthorizationInfoRequest struct {
	*tchttp.BaseRequest

	// 被调用服务 ID

	TargetServiceId *string `json:"TargetServiceId,omitempty" name:"TargetServiceId"`
	// 命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *DescribeAuthorizationInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFilebeatConfigEnableRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeFilebeatConfigEnableRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFilebeatConfigEnableRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchRealtimeMeshLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 实时日志集合

		Result *RealtimeLogSet `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchRealtimeMeshLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchRealtimeMeshLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayOAuthPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件类型 "OAuth"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 验证token路径

	TokenAuthUrl *string `json:"TokenAuthUrl,omitempty" name:"TokenAuthUrl"`
	// 验证token请求方法:get/post

	TokenAuthMethod *string `json:"TokenAuthMethod,omitempty" name:"TokenAuthMethod"`
	// 认证请求超时时间,单位:秒 范围:0~30

	ExpireTime *int64 `json:"ExpireTime,omitempty" name:"ExpireTime"`
	// 重定向地址

	RedirectUrl *string `json:"RedirectUrl,omitempty" name:"RedirectUrl"`
	// token携带位置，网关取token位置与发送认证请求时token位置一致,值:cookie/query/header

	TokenBaggagePosition *string `json:"TokenBaggagePosition,omitempty" name:"TokenBaggagePosition"`
	// token的key值

	TokenKeyName *string `json:"TokenKeyName,omitempty" name:"TokenKeyName"`
	// payload的映射参数名称

	PayloadMappingName *string `json:"PayloadMappingName,omitempty" name:"PayloadMappingName"`
	// payload映射到后端服务的携带位置,值:cookie/query/header

	PayloadMappingPosition *string `json:"PayloadMappingPosition,omitempty" name:"PayloadMappingPosition"`
	// 验证token微服务名（包含命名空间）

	TokenAuthServiceName *string `json:"TokenAuthServiceName,omitempty" name:"TokenAuthServiceName"`
}

func (r *UpdateGatewayOAuthPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayOAuthPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CloudMonitorPoliciesV2 struct {

	// keywordsId

	KeywordsId *string `json:"KeywordsId,omitempty" name:"KeywordsId"`
	// keyWords

	KeyWords *string `json:"KeyWords,omitempty" name:"KeyWords"`
	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// groupName

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// namespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// namespaceName

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// applicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// applicationName

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// clusterId

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// clusterName

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
}

type DescribeContainerTasksResultV2 struct {

	// 列表总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表内容

	Content []*ContainerTasks `json:"Content,omitempty" name:"Content"`
}

type ModifyPathRewriteRequest struct {
	*tchttp.BaseRequest

	// 路径重写规则ID

	PathRewriteId *string `json:"PathRewriteId,omitempty" name:"PathRewriteId"`
	// 正则表达式

	Regex *string `json:"Regex,omitempty" name:"Regex"`
	// 替换的内容

	Replacement *string `json:"Replacement,omitempty" name:"Replacement"`
	// 是否屏蔽映射后路径，Y: 是 N: 否

	Blocked *string `json:"Blocked,omitempty" name:"Blocked"`
	// 规则顺序，越小优先级越高

	Order *int64 `json:"Order,omitempty" name:"Order"`
}

func (r *ModifyPathRewriteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyPathRewriteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayJwtPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件类型 "Jwt"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 公钥对kid

	Kid *string `json:"Kid,omitempty" name:"Kid"`
	// 公钥对Json串

	PublicKeyJson *string `json:"PublicKeyJson,omitempty" name:"PublicKeyJson"`
	// token携带位置query/header

	TokenBaggagePosition *string `json:"TokenBaggagePosition,omitempty" name:"TokenBaggagePosition"`
	// 重定向地址

	RedirectUrl *string `json:"RedirectUrl,omitempty" name:"RedirectUrl"`
	// token的key值

	TokenKeyName *string `json:"TokenKeyName,omitempty" name:"TokenKeyName"`
	// claim参数映射关系json

	ClaimMappingJson *string `json:"ClaimMappingJson,omitempty" name:"ClaimMappingJson"`
}

func (r *UpdateGatewayJwtPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayJwtPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateContainerShellSessionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// session 的内容

		Result *CreateContainerShellSessionResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateContainerShellSessionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateContainerShellSessionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleasePublicConfigRequest struct {
	*tchttp.BaseRequest

	// 配置ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
}

func (r *ReleasePublicConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleasePublicConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RouteRuleV2 struct {

	// 路由规则项ID

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
	// 路由规则项包含TAG列表

	TagList []*RouteTagV2 `json:"TagList,omitempty" name:"TagList"`
	// 路由规则项包含目标列表

	DestList []*RouteDestV2 `json:"DestList,omitempty" name:"DestList"`
	// 路由规则项所属路由规则ID

	RouteId *string `json:"RouteId,omitempty" name:"RouteId"`
}

type DscribeTasksResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 变更记录分页列表

		Result *TsfPageVmTask `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DscribeTasksResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DscribeTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RevocationPublicConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：撤销成功；false：撤销失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RevocationPublicConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RevocationPublicConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateAlarmReceiverResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateAlarmReceiverResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAlarmReceiverResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGWOverviewInvocationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 监控统计数据点

		Result []*MetricDataPoint `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGWOverviewInvocationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGWOverviewInvocationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasedConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 已发布的配置内容

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasedConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasedConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssRealtimeBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 模块ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 实时日志基准时间戳

	RealtimeTs *uint64 `json:"RealtimeTs,omitempty" name:"RealtimeTs"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 实例ip

	InstanceIp *string `json:"InstanceIp,omitempty" name:"InstanceIp"`
	// 模块名

	ModuleName *string `json:"ModuleName,omitempty" name:"ModuleName"`
}

func (r *SearchOssRealtimeBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssRealtimeBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskBatchRecord struct {

	// 任务批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务状态

	State *string `json:"State,omitempty" name:"State"`
	// 开始时间

	StartTime *uint64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *uint64 `json:"EndTime,omitempty" name:"EndTime"`
	// 总共数据

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 成功的任务数量

	SuccessCount *uint64 `json:"SuccessCount,omitempty" name:"SuccessCount"`
	// 失败的任务数量

	FailedCount *uint64 `json:"FailedCount,omitempty" name:"FailedCount"`
	// 超时的任务数量

	TimeoutCount *uint64 `json:"TimeoutCount,omitempty" name:"TimeoutCount"`
	// 停止的任务数量

	TerminateCount *uint64 `json:"TerminateCount,omitempty" name:"TerminateCount"`
	// 任务分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 任务名称

	TaskName *string `json:"TaskName,omitempty" name:"TaskName"`
	// 任务历史 ID

	TaskLogId *string `json:"TaskLogId,omitempty" name:"TaskLogId"`
	// 批次历史 ID

	BatchLogId *string `json:"BatchLogId,omitempty" name:"BatchLogId"`
	// 任务计划触发的时间点

	ScheduleFireTime *int64 `json:"ScheduleFireTime,omitempty" name:"ScheduleFireTime"`
	// 工作流批次 ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 批次类型

	BatchType *string `json:"BatchType,omitempty" name:"BatchType"`
	// 任务触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 工作流批次历史 ID

	FlowBatchLogId *string `json:"FlowBatchLogId,omitempty" name:"FlowBatchLogId"`
	// 执行成功率

	SuccessRatio *int64 `json:"SuccessRatio,omitempty" name:"SuccessRatio"`
	// 执行批次历史数量

	HistoryCount *int64 `json:"HistoryCount,omitempty" name:"HistoryCount"`
	// 耗时

	SpanTime *int64 `json:"SpanTime,omitempty" name:"SpanTime"`
	// 所属工作流ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 所属工作流名称

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
	// 所属工作流历史ID

	FlowLogId *string `json:"FlowLogId,omitempty" name:"FlowLogId"`
}

type DescribeIndicesPagedListRequest struct {
	*tchttp.BaseRequest

	// 1

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// 1

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 1

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 1

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 1

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 1

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
}

func (r *DescribeIndicesPagedListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeIndicesPagedListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RunMsApiResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 调试 API 的 http code

		ReturnCode *string `json:"ReturnCode,omitempty" name:"ReturnCode"`
		// 调试 API 的延迟

		Delay *string `json:"Delay,omitempty" name:"Delay"`
		// 调试 API 的 http header

		ReturnHeader *string `json:"ReturnHeader,omitempty" name:"ReturnHeader"`
		// 调试 API 的 http body

		ReturnBody *string `json:"ReturnBody,omitempty" name:"ReturnBody"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RunMsApiResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RunMsApiResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TemplateProjectV2 struct {

	// 工程id

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
	// 工程名

	ProjectName *string `json:"ProjectName,omitempty" name:"ProjectName"`
	// 包路径

	BasePackage *string `json:"BasePackage,omitempty" name:"BasePackage"`
	// 修改时间

	LastTime *int64 `json:"LastTime,omitempty" name:"LastTime"`
	// Data

	Data *string `json:"Data,omitempty" name:"Data"`
	// AppId

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// SubAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type ListAlarmReceiversRequest struct {
	*tchttp.BaseRequest

	// PolicyId

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
}

func (r *ListAlarmReceiversRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListAlarmReceiversRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageRelease struct {

	// 发布单总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 发布单信息列表

	Content []*Release `json:"Content,omitempty" name:"Content"`
}

type ModuleParamResult struct {

	// ParameterName值

	ParameterName *string `json:"ParameterName,omitempty" name:"ParameterName"`
	// ParameterValue值

	ParameterValue *string `json:"ParameterValue,omitempty" name:"ParameterValue"`
	// ParameterType值

	ParameterType *string `json:"ParameterType,omitempty" name:"ParameterType"`
	// ParameterEnums值

	ParameterEnums *string `json:"ParameterEnums,omitempty" name:"ParameterEnums"`
	// Desc值

	Desc *string `json:"Desc,omitempty" name:"Desc"`
	// Demo值

	Demo *string `json:"Demo,omitempty" name:"Demo"`
	// ParameterId值

	ParameterId *string `json:"ParameterId,omitempty" name:"ParameterId"`
	// Visible值

	Visible *string `json:"Visible,omitempty" name:"Visible"`
	// ParameterConfigType值

	ParameterConfigType *string `json:"ParameterConfigType,omitempty" name:"ParameterConfigType"`
	// ParameterSubType值

	ParameterSubType *string `json:"ParameterSubType,omitempty" name:"ParameterSubType"`
	// Required值

	Required *string `json:"Required,omitempty" name:"Required"`
}

type ServerlessGroupPage struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表信息

	Content []*ServerlessGroup `json:"Content,omitempty" name:"Content"`
}

type CheckClusterCIDRRequest struct {
	*tchttp.BaseRequest

	// 集群CIDR

	ClusterCIDR *string `json:"ClusterCIDR,omitempty" name:"ClusterCIDR"`
	// 虚拟网络ID

	VpcId *string `json:"VpcId,omitempty" name:"VpcId"`
}

func (r *CheckClusterCIDRRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckClusterCIDRRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUsableGatewayGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关部署组信息列表

		Result *TsfPageGatewayDeployGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUsableGatewayGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUsableGatewayGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页后的全局配置项列表

		Result *TsfPageConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePublicConfigsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetOssTraceInterfacesRequest struct {
	*tchttp.BaseRequest

	// 接口所属服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 接口角色："caller"调用方，"callee"被调用方

	Role *string `json:"Role,omitempty" name:"Role"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 返回调用链接口偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 返回调用链接口数目

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *GetOssTraceInterfacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetOssTraceInterfacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeJvmMonitorRequest struct {
	*tchttp.BaseRequest

	// 查询的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 实例所属应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 时间粒度,单位:秒

	TimeGranularity *int64 `json:"TimeGranularity,omitempty" name:"TimeGranularity"`
	// 查询数据起始时间格式(yyyy-MM-dd HH:mm:ss)

	From *string `json:"From,omitempty" name:"From"`
	// 查询数据结束时间格式(yyyy-MM-dd HH:mm:ss)

	To *string `json:"To,omitempty" name:"To"`
	// 查询的监控图列表,以返回值属性名作为入参

	RequiredPictures []*string `json:"RequiredPictures,omitempty" name:"RequiredPictures"`
	// 扩展字段

	Tag *string `json:"Tag,omitempty" name:"Tag"`
}

func (r *DescribeJvmMonitorRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeJvmMonitorRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterUsageRequest struct {
	*tchttp.BaseRequest

	// 单次返回的最多条目数量

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 是否无视权限查询全租户的，默认 true

	All *bool `json:"All,omitempty" name:"All"`
	// 排序字段，CpuRate 或 MemRate

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式： ASC:0, DESC:1【默认】

	OrderType *uint64 `json:"OrderType,omitempty" name:"OrderType"`
	// 集群类型选择：C, V【默认】C 容器，V 虚机

	Type *string `json:"Type,omitempty" name:"Type"`
}

func (r *DescribeClusterUsageRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterUsageRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowBatchRecordResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流批次信息

		Result *TaskFlowBatch `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFlowBatchRecordResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowBatchRecordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePermissionCategoriesRequest struct {
	*tchttp.BaseRequest

	// 角色ID，不传入时查询全量

	RoleId *string `json:"RoleId,omitempty" name:"RoleId"`
	// 产品编码，不传入时查询全量

	ServiceCode *string `json:"ServiceCode,omitempty" name:"ServiceCode"`
	// 每页数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 无

	IgnoreTask *bool `json:"IgnoreTask,omitempty" name:"IgnoreTask"`
}

func (r *DescribePermissionCategoriesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePermissionCategoriesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DtsRetryResp struct {

	// 异常列表

	ErrorList []*DtsRetryError `json:"ErrorList,omitempty" name:"ErrorList"`
}

type LaneRules struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 泳道规则列表

	Content []*LaneRule `json:"Content,omitempty" name:"Content"`
}

type ListManagerJobLogRequest struct {
	*tchttp.BaseRequest

	// 无

	JobId *int64 `json:"JobId,omitempty" name:"JobId"`
	// 无

	FilterTime *string `json:"FilterTime,omitempty" name:"FilterTime"`
	// 无

	LogStatus *int64 `json:"LogStatus,omitempty" name:"LogStatus"`
	// 无

	JobDesc *string `json:"JobDesc,omitempty" name:"JobDesc"`
	// 无

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 无

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ListManagerJobLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListManagerJobLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AlarmReceiverResult struct {

	// PolicyId

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// ReceiverId

	ReceiverId *string `json:"ReceiverId,omitempty" name:"ReceiverId"`
	// Name

	Name *string `json:"Name,omitempty" name:"Name"`
	// CellPhoneNumber

	CellPhoneNumber *string `json:"CellPhoneNumber,omitempty" name:"CellPhoneNumber"`
	// Email

	Email *string `json:"Email,omitempty" name:"Email"`
}

type DescribeGroupLaneRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeGroupLaneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupLaneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateApiRateLimitRulesRequest struct {
	*tchttp.BaseRequest

	// API ID 列表

	ApiIds []*string `json:"ApiIds,omitempty" name:"ApiIds"`
	// 开启/禁用，enabled/disabled

	UsableStatus *string `json:"UsableStatus,omitempty" name:"UsableStatus"`
	// QPS值。开启限流规则时，必填

	MaxQps *int64 `json:"MaxQps,omitempty" name:"MaxQps"`
}

func (r *UpdateApiRateLimitRulesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApiRateLimitRulesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ResetMeshSidecarMonitorResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 请求是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ResetMeshSidecarMonitorResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ResetMeshSidecarMonitorResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteCircuitBreakerRuleRequest struct {
	*tchttp.BaseRequest

	// 熔断规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DeleteCircuitBreakerRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteCircuitBreakerRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteViewResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回值

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteViewResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteViewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMonitorStatisticsPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *MonitorStatisticsPolicy `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMonitorStatisticsPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMonitorStatisticsPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateApiAccessRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *CreateApiAccessRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateApiAccessRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupsByScalableRuleId struct {

	// ApplicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// ApplicationName

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// GroupName

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// Status

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// UpdateTime

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 弹性伸缩规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 弹性伸缩规则名

	RuleName *string `json:"RuleName,omitempty" name:"RuleName"`
}

type FindContainerGroupResult struct {

	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 实例总数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 已启动实例总数

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// NodePort端口，只有公网和NodePort访问方式才有值

	NodePort *string `json:"NodePort,omitempty" name:"NodePort"`
	// 最大分配cpu 核数，如0.6

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配内存M数

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 端口数组对象

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 环境变量数组

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 子网id

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
}

type GraphNode struct {

	// 节点服务名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 节点服务类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 节点服务总请求量

	ReqTotalQty *uint64 `json:"ReqTotalQty,omitempty" name:"ReqTotalQty"`
	// 节点服务成功请求量

	ReqSuccessQty *uint64 `json:"ReqSuccessQty,omitempty" name:"ReqSuccessQty"`
	// 节点服务失败请求量

	ReqFailedQty *uint64 `json:"ReqFailedQty,omitempty" name:"ReqFailedQty"`
	// 节点服务每分钟平均请求量

	ReqPerMin *float64 `json:"ReqPerMin,omitempty" name:"ReqPerMin"`
	// 节点服务平均耗时（毫秒）

	AvgDurationMs *float64 `json:"AvgDurationMs,omitempty" name:"AvgDurationMs"`
	// 节点服务为目的的边列表（入度）

	EdgeList []*GraphEdge `json:"EdgeList,omitempty" name:"EdgeList"`
}

type AddInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 添加机器是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AddInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AddInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGatewayJwtPluginRequest struct {
	*tchttp.BaseRequest

	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
	// 插件类型 "Jwt"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 公钥对kid

	Kid *string `json:"Kid,omitempty" name:"Kid"`
	// 公钥对Json串

	PublicKeyJson *string `json:"PublicKeyJson,omitempty" name:"PublicKeyJson"`
	// token携带位置query/header

	RedirectUrl *string `json:"RedirectUrl,omitempty" name:"RedirectUrl"`
	// 重定向地址

	TokenBaggagePosition *string `json:"TokenBaggagePosition,omitempty" name:"TokenBaggagePosition"`
	// token的key值

	TokenKeyName *string `json:"TokenKeyName,omitempty" name:"TokenKeyName"`
	// claim参数映射关系json串

	ClaimMappingJson *string `json:"ClaimMappingJson,omitempty" name:"ClaimMappingJson"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateGatewayJwtPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayJwtPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAddibleInstancesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 可用区过滤字段

	InstanceZoneId *string `json:"InstanceZoneId,omitempty" name:"InstanceZoneId"`
	// CVM实例ID列表，用于检查实例是否已导入TSF集群，填了此参数会忽略 SearchWord InstanceZoneId

	InstanceIds []*string `json:"InstanceIds,omitempty" name:"InstanceIds"`
}

func (r *DescribeAddibleInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAddibleInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayPluginsRequest struct {
	*tchttp.BaseRequest

	// 翻页偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 每页展示的条数

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 无

	PluginIdList []*string `json:"PluginIdList,omitempty" name:"PluginIdList"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
}

func (r *DescribeGatewayPluginsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayPluginsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ExecuteTaskFlowResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流批次ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ExecuteTaskFlowResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExecuteTaskFlowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type KubeDeploymentPage struct {

	// IsSetup值

	IsSetup *bool `json:"IsSetup,omitempty" name:"IsSetup"`
	// TotalCount值

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content值

	Content []*KubeDeployment `json:"Content,omitempty" name:"Content"`
}

type VolumeItem struct {

	// 无

	Name *string `json:"Name,omitempty" name:"Name"`
}

type DeleteMicroserviceApiRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 访问路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 访问方法

	Method *string `json:"Method,omitempty" name:"Method"`
}

func (r *DeleteMicroserviceApiRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMicroserviceApiRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeServiceStatisticsRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务ID列表

	ServiceIds []*string `json:"ServiceIds,omitempty" name:"ServiceIds"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
}

func (r *DescribeServiceStatisticsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServiceStatisticsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CurvePoint struct {

	// 当前坐标 X轴的值 当前是日期格式:"yyyy-MM-dd HH:mm:ss"

	Label *string `json:"Label,omitempty" name:"Label"`
	// 当前坐标 Y轴的值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 该坐标点时间戳

	Timestamp *string `json:"Timestamp,omitempty" name:"Timestamp"`
}

type DtsBranch struct {

	// 分支事务ID

	BranchId *int64 `json:"BranchId,omitempty" name:"BranchId"`
	// 父级分支事务ID，顶级时返回null

	ParentId *int64 `json:"ParentId,omitempty" name:"ParentId"`
	// 分支事务开始时间戳，UTC，精确到毫秒

	BranchBegin *int64 `json:"BranchBegin,omitempty" name:"BranchBegin"`
	// 分支事务结束时间戳，UTC，精确到毫秒

	BranchEnd *int64 `json:"BranchEnd,omitempty" name:"BranchEnd"`
	// 分支事务类型

	BranchType *int64 `json:"BranchType,omitempty" name:"BranchType"`
	// 分支事务名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 分支事务状态

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 事务分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分支事务来源服务标识

	Server *string `json:"Server,omitempty" name:"Server"`
	// 分支运行参数，Json格式字符串

	Params *string `json:"Params,omitempty" name:"Params"`
	// 主事务ID

	TxId *int64 `json:"TxId,omitempty" name:"TxId"`
}

type DeleteConfigTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：删除成功；false：删除失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteConfigTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteConfigTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskLastStatusRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DescribeTaskLastStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskLastStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerEvent struct {

	// 第一次出现的时间，以 ms 为单位的时间戳

	FirstTimestamp *int64 `json:"FirstTimestamp,omitempty" name:"FirstTimestamp"`
	// 最后一次出现的时间，以 ms 为单位的时间戳

	LastTimestamp *int64 `json:"LastTimestamp,omitempty" name:"LastTimestamp"`
	// 级别

	Type *string `json:"Type,omitempty" name:"Type"`
	// 资源类型

	Kind *string `json:"Kind,omitempty" name:"Kind"`
	// 资源名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 内容

	Reason *string `json:"Reason,omitempty" name:"Reason"`
	// 详细描述

	Message *string `json:"Message,omitempty" name:"Message"`
	// 出现次数

	Count *int64 `json:"Count,omitempty" name:"Count"`
}

type DeleteGatewayApiResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteGatewayApiResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGatewayApiResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployInstanceRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 机器实例ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
}

func (r *DeployInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeIndicesPagedListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回值

		Result *IndicesPageContent `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeIndicesPagedListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeIndicesPagedListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CheckClusterCIDRResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：可用；false：不可用

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CheckClusterCIDRResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckClusterCIDRResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeOverviewInvocationRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 监控统计类型，可选值：SumReqAmount、AvgFailureRate、AvgTimeCost，分别对应请求量、请求错误率、平均响应耗时

	Type *string `json:"Type,omitempty" name:"Type"`
	// 监控统计数据粒度，可选值：60、3600、86400，分别对应1分钟、1小时、1天

	Period *int64 `json:"Period,omitempty" name:"Period"`
	// 查询开始时间，默认为当天的 00:00:00

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询结束时间，默认为当前时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
}

func (r *DescribeOverviewInvocationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeOverviewInvocationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTransactionRequest struct {
	*tchttp.BaseRequest

	// 事务id

	TransactionId *string `json:"TransactionId,omitempty" name:"TransactionId"`
}

func (r *DescribeTransactionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTransactionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerGroupOther struct {

	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// 服务状态，请参考后面的的状态定义

	Status *string `json:"Status,omitempty" name:"Status"`
	// 服务状态，请参考后面的的状态定义

	Message *string `json:"Message,omitempty" name:"Message"`
	// 环境变量

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// Service NodePort

	NodePort *uint64 `json:"NodePort,omitempty" name:"NodePort"`
	// 子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 健康检查相关字段

	HealthCheckSettings []*HealthCheckSetting `json:"HealthCheckSettings,omitempty" name:"HealthCheckSettings"`
	// 服务配置信息是否匹配

	IsNotEqualServiceConfig *bool `json:"IsNotEqualServiceConfig,omitempty" name:"IsNotEqualServiceConfig"`
}

type Result struct {

	// KeyWordsName 和 GroupName

	ObjName *string `json:"ObjName,omitempty" name:"ObjName"`
}

type DeployContainerGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署容器应用是否成功。
		// true：成功。
		// false：失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeployContainerGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployContainerGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用名称

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用类型

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 分组创建时间

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 分组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type TagRouteItemV2 struct {

	// 标签路由规则项ID

	TagRouteId *string `json:"TagRouteId,omitempty" name:"TagRouteId"`
	// 标签路由匹配目标字段

	TargetField *string `json:"TargetField,omitempty" name:"TargetField"`
	// 标签路由匹配目标取值

	TargetValue *string `json:"TargetValue,omitempty" name:"TargetValue"`
	// 标签路由所属路由ID

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
	// 标签路由源标签列表

	SourceList []*TagRouteItemSourceV2 `json:"SourceList,omitempty" name:"SourceList"`
}

type DescribeImageUserIsExistsRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeImageUserIsExistsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImageUserIsExistsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLaneGroupExistResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 存在的泳道部署组列表

		Result []*LaneGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLaneGroupExistResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneGroupExistResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PagedProgram struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 数据集列表

	Content []*Program `json:"Content,omitempty" name:"Content"`
}

type TsfPageZone struct {

	// TSF可用区总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// TSF可用区列表

	Content []*TsfZone `json:"Content,omitempty" name:"Content"`
}

type CreateClusterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateClusterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateClusterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGroupSecretResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 秘钥ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateGroupSecretResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGroupSecretResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerTasksResultV2 struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表信息

	Content []*ContainerTasks `json:"Content,omitempty" name:"Content"`
}

type DescribeAlarmOverviewListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 告警历史信息列表

		Result []*AlarmOverviewContent `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAlarmOverviewListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAlarmOverviewListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableTaskRequest struct {
	*tchttp.BaseRequest

	// 启用任务

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *EnableTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListAlarmPoliciesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ListAlarmPoliciesResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListAlarmPoliciesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListAlarmPoliciesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShrinkInstanceRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 下线机器实例ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
}

func (r *ShrinkInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShrinkInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateApplicationAgentRequest struct {
	*tchttp.BaseRequest

	// agentIds

	AgentIds []*string `json:"AgentIds,omitempty" name:"AgentIds"`
	// PackageSnip

	PackageSnip *string `json:"PackageSnip,omitempty" name:"PackageSnip"`
	// PackageName

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// PackageMd5v

	PackageMd5v *string `json:"PackageMd5v,omitempty" name:"PackageMd5v"`
	// PackageType

	PackageType *string `json:"PackageType,omitempty" name:"PackageType"`
	// PackageSize

	PackageSize *int64 `json:"PackageSize,omitempty" name:"PackageSize"`
	// PackageAddrs

	PackageAddrs *string `json:"PackageAddrs,omitempty" name:"PackageAddrs"`
	// PackageId

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
}

func (r *UpdateApplicationAgentRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApplicationAgentRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowBatchHistory struct {

	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流历史 ID

	FlowLogId *string `json:"FlowLogId,omitempty" name:"FlowLogId"`
	// 工作流批次历史 ID

	FlowBatchLogId *string `json:"FlowBatchLogId,omitempty" name:"FlowBatchLogId"`
	// 工作流批次 ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 开始时间

	StartTime *uint64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *uint64 `json:"EndTime,omitempty" name:"EndTime"`
	// 耗时

	SpanTime *int64 `json:"SpanTime,omitempty" name:"SpanTime"`
	// 历史数

	HistoryCount *int64 `json:"HistoryCount,omitempty" name:"HistoryCount"`
	// 状态

	State *string `json:"State,omitempty" name:"State"`
	// 触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 下次开始时间

	ScheduleFireTime *int64 `json:"ScheduleFireTime,omitempty" name:"ScheduleFireTime"`
	// 工作流名称

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
}

type ImageDeleteTagResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ImageDeleteTagResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageDeleteTagResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageMsRunningApplicationV2 struct {

	// 运行微服务的应用个数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 运行微服务的应用列表

	Content []*MsRunningApplicationV2 `json:"Content,omitempty" name:"Content"`
}

type AddInstanceResult struct {

	// 添加集群失败的节点列表

	FailedInstanceIds []*string `json:"FailedInstanceIds,omitempty" name:"FailedInstanceIds"`
	// 添加集群成功的节点列表

	SuccInstanceIds []*string `json:"SuccInstanceIds,omitempty" name:"SuccInstanceIds"`
	// 添加集群超时的节点列表

	TimeoutInstanceIds []*string `json:"TimeoutInstanceIds,omitempty" name:"TimeoutInstanceIds"`
	// 失败的节点的失败原因

	FailedReasons []*string `json:"FailedReasons,omitempty" name:"FailedReasons"`
}

type MultiCloudUnitConfigs struct {

	// ConfigList

	ConfigList []*MultiCloudUnitConfig `json:"ConfigList,omitempty" name:"ConfigList"`
}

type DisableCircuitBreakerRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableCircuitBreakerRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableCircuitBreakerRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MsApiArray struct {

	// API 请求路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 方法描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// API状态 0:离线 1:在线

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 无

	MsgwApiType *string `json:"MsgwApiType,omitempty" name:"MsgwApiType"`
	// 无

	RpcType *string `json:"RpcType,omitempty" name:"RpcType"`
}

type TsfPageApiDetailInfo struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// API 信息列表

	Content []*ApiDetailInfo `json:"Content,omitempty" name:"Content"`
}

type DescribeThreadDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 线程详情列表以及接口执行状态

		Result *ThreadDetails `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeThreadDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeThreadDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type IssueLicenseRequest struct {
	*tchttp.BaseRequest

	// 授予对象

	Grantee *LicenseGrantee `json:"Grantee,omitempty" name:"Grantee"`
	// 申请时间

	CreateTime *uint64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 操作

	OperateCommand *string `json:"OperateCommand,omitempty" name:"OperateCommand"`
	// 未作废0；已作废1

	Status *int64 `json:"Status,omitempty" name:"Status"`
}

func (r *IssueLicenseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *IssueLicenseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeployGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署组详情

		Result *DeployGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeDeployGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeployGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMonitorStatisticsPolicyRequest struct {
	*tchttp.BaseRequest

	// 监控统计策略id;

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
}

func (r *DescribeMonitorStatisticsPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMonitorStatisticsPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineTaskRunRecordRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 执行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DescribeReleasePipelineTaskRunRecordRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineTaskRunRecordRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskFlowGraphRequest struct {
	*tchttp.BaseRequest

	// 工作流 Id

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流流水 ID

	FlowLogId *string `json:"FlowLogId,omitempty" name:"FlowLogId"`
}

func (r *DescribeTaskFlowGraphRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskFlowGraphRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeJavaInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// java实例详情列表

		Result []*JavaInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeJavaInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeJavaInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayWeChatMiniProgramAppSecretResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGatewayWeChatMiniProgramAppSecretResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayWeChatMiniProgramAppSecretResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayGroupApiVo struct {

	// API ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// API 请求路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// API 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// API 请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
}

type InstallLicenseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *InstallLicenseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *InstallLicenseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTraceServicesRequest struct {
	*tchttp.BaseRequest

	// 服务角色："caller"调用方，"callee"被调用方

	Role *string `json:"Role,omitempty" name:"Role"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 返回服务偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 返回服务数目

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *GetTraceServicesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTraceServicesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateLicenseApplicationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateLicenseApplicationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateLicenseApplicationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCurrentAppIdRequest struct {
	*tchttp.BaseRequest

	// 翻页偏移量。

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询单页数量。

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeCurrentAppIdRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCurrentAppIdRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Env struct {

	// 环境变量名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 环境变量值

	Value *string `json:"Value,omitempty" name:"Value"`
	// k8s ValueFrom

	ValueFrom *ValueFrom `json:"ValueFrom,omitempty" name:"ValueFrom"`
}

type EnvsV2 struct {

	// 环境变量名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 服务端口

	Value *string `json:"Value,omitempty" name:"Value"`
	// k8s ValueFrom

	ValueFrom *ValueFrom `json:"ValueFrom,omitempty" name:"ValueFrom"`
}

type DescribeReleasePipelineRunTaskStatusRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 执行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DescribeReleasePipelineRunTaskStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineRunTaskStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApplicationServerResult struct {

	// ServerId

	ServerId *string `json:"ServerId,omitempty" name:"ServerId"`
	// ClusterId

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// Ip

	Ip *string `json:"Ip,omitempty" name:"Ip"`
	// Type

	Type *int64 `json:"Type,omitempty" name:"Type"`
	// TaskStatus

	TaskStatus *int64 `json:"TaskStatus,omitempty" name:"TaskStatus"`
	// AgentStatus

	AgentStatus *int64 `json:"AgentStatus,omitempty" name:"AgentStatus"`
	// MasterId

	MasterId *int64 `json:"MasterId,omitempty" name:"MasterId"`
	// GroupDesc

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// BasicEnvDesc

	BasicEnvDesc *string `json:"BasicEnvDesc,omitempty" name:"BasicEnvDesc"`
	// ApplicationType

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// AgentVersion

	AgentVersion *string `json:"AgentVersion,omitempty" name:"AgentVersion"`
}

type DescribeLicenseInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// license相关信息接口

		Result *OverviewLicenseResourceUsage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLicenseInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLicenseInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetContainGroupOtherResultV2 struct {

	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// 服务状态，请参考后面的的状态定义

	Status *string `json:"Status,omitempty" name:"Status"`
	// 异常信息,服务状态为Abnormal时才有

	Message *string `json:"Message,omitempty" name:"Message"`
}

type PagedDtsBranch struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 分支事务分组列表

	Content []*DtsBranch `json:"Content,omitempty" name:"Content"`
}

type DescribeLanesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 泳道列表

		Result *LaneInfos `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLanesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLanesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VmGroupOther struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 程序包ID

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 程序包名称

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 程序包版本

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 部署组实例数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 部署组运行中实例数

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 部署组中停止实例数

	OffInstanceCount *int64 `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
	// 部署组状态

	GroupStatus *string `json:"GroupStatus,omitempty" name:"GroupStatus"`
	// 服务配置信息是否匹配

	IsNotEqualServiceConfig *bool `json:"IsNotEqualServiceConfig,omitempty" name:"IsNotEqualServiceConfig"`
	// PackageType

	PackageType *string `json:"PackageType,omitempty" name:"PackageType"`
	// EnableHealthCheck

	EnableHealthCheck *bool `json:"EnableHealthCheck,omitempty" name:"EnableHealthCheck"`
	// HealthCheckSettings

	HealthCheckSettings *HealthCheckSettings `json:"HealthCheckSettings,omitempty" name:"HealthCheckSettings"`
}

type DescribeResourceUsageRateRequest struct {
	*tchttp.BaseRequest

	// 资源类型，es，rediss，consul，ctsdb

	ResourceType *string `json:"ResourceType,omitempty" name:"ResourceType"`
}

func (r *DescribeResourceUsageRateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceUsageRateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UploadPkgResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 上传包ID

		Result *UploadInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UploadPkgResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UploadPkgResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateLaneGroupRequest struct {
	*tchttp.BaseRequest

	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 泳道部署组列表

	LaneGroupList []*LaneGroup `json:"LaneGroupList,omitempty" name:"LaneGroupList"`
}

func (r *CreateLaneGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateLaneGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerVolumeOptionsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 无

		Result *ContainerVolumeOption `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerVolumeOptionsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerVolumeOptionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageGroupInstanceUnified struct {

	// 总数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表数据

	Content []*GroupInstanceUnified `json:"Content,omitempty" name:"Content"`
}

type SetNamespaceCodeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SetNamespaceCodeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetNamespaceCodeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateAuthorizationRequest struct {
	*tchttp.BaseRequest

	// 规则名称

	RuleName *string `json:"RuleName,omitempty" name:"RuleName"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 是否启用：1启用；0未启用

	IsEnabled *string `json:"IsEnabled,omitempty" name:"IsEnabled"`
	// 标签列表

	Tags *AuthConditionV2 `json:"Tags,omitempty" name:"Tags"`
	// 过滤鉴权规则类型，B 为黑名单，W 为白名单

	Type *string `json:"Type,omitempty" name:"Type"`
}

func (r *CreateAuthorizationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAuthorizationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OverviewResource struct {

	// 集群数目

	ClusterCount *int64 `json:"ClusterCount,omitempty" name:"ClusterCount"`
	// 命名空间数目

	NamespaceCount *int64 `json:"NamespaceCount,omitempty" name:"NamespaceCount"`
	// 实例总数目

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 运行中实例数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 停止实例数目

	OffInstanceCount *int64 `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
	// 异常实例数目

	UnNormalInstanceCount *int64 `json:"UnNormalInstanceCount,omitempty" name:"UnNormalInstanceCount"`
	// 应用数目

	ApplicationCount *int64 `json:"ApplicationCount,omitempty" name:"ApplicationCount"`
	// 部署组数目

	GroupCount *int64 `json:"GroupCount,omitempty" name:"GroupCount"`
	// 异常集群数

	UnNormalClusterCount *int64 `json:"UnNormalClusterCount,omitempty" name:"UnNormalClusterCount"`
	// 运行云主机数

	RunHostCount *int64 `json:"RunHostCount,omitempty" name:"RunHostCount"`
	// 云主机总数

	HostCount *int64 `json:"HostCount,omitempty" name:"HostCount"`
	// 已注册实例数

	ConsulInstanceCount *int64 `json:"ConsulInstanceCount,omitempty" name:"ConsulInstanceCount"`
	// 程序包存储空间用量，单位字节

	PackageSpaceUsed *uint64 `json:"PackageSpaceUsed,omitempty" name:"PackageSpaceUsed"`
}

type DisassociateKafkaConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组id

	GroupIds []*string `json:"GroupIds,omitempty" name:"GroupIds"`
}

func (r *DisassociateKafkaConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisassociateKafkaConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeBuildTasksResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 构建任务信息列表

		Result *TsfPageBuildTask `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeBuildTasksResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBuildTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置项

		Result *Config `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateFilebeatConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateFilebeatConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateFilebeatConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayDailyUseStatisticsRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 网关分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组下的ApiID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// 查询的日期,格式：yyyy-MM-dd

	QueryDate *string `json:"QueryDate,omitempty" name:"QueryDate"`
}

func (r *DescribeGatewayDailyUseStatisticsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayDailyUseStatisticsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeServiceNamesRequest struct {
	*tchttp.BaseRequest

	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 每页的数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 搜索偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribeServiceNamesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServiceNamesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRouteRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true / false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteRouteRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRouteRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeScalableRuleAttributeRequest struct {
	*tchttp.BaseRequest

	// 规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DescribeScalableRuleAttributeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeScalableRuleAttributeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MultiCloudUnitConfig struct {

	// ConfigId

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// RegionId

	RegionId *string `json:"RegionId,omitempty" name:"RegionId"`
	// TsfId

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// 产品类型 TSF

	ServiceType *string `json:"ServiceType,omitempty" name:"ServiceType"`
	// 单元数

	UnitCount *int64 `json:"UnitCount,omitempty" name:"UnitCount"`
	// 网关类型 TSF_MS_GW

	GwTyServiceNamepe *string `json:"GwTyServiceNamepe,omitempty" name:"GwTyServiceNamepe"`
	// ServiceId

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// ServiceName

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// GatewayInstanceId

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// AccessMode

	AccessMode *string `json:"AccessMode,omitempty" name:"AccessMode"`
	// Addrs

	Addrs *string `json:"Addrs,omitempty" name:"Addrs"`
	// UnitList

	UnitList []*MultiCloudUnitEntity `json:"UnitList,omitempty" name:"UnitList"`
	// Status

	Status *string `json:"Status,omitempty" name:"Status"`
	// DeletedUnitIds

	DeletedUnitIds []*string `json:"DeletedUnitIds,omitempty" name:"DeletedUnitIds"`
	// ConfigName

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
}

type BillingOperationModifyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果（true成功，false失败）

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *BillingOperationModifyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationModifyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRelatedGroupRequest struct {
	*tchttp.BaseRequest

	// 规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DeleteRelatedGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRelatedGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigRequest struct {
	*tchttp.BaseRequest

	// 需要查询的配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DescribePublicConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstanceEnrichedInfoPage struct {

	// 总数量

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表

	Content []*InstanceEnrichedInfo `json:"Content,omitempty" name:"Content"`
}

type DescribeBusinessLogConfigsRequest struct {
	*tchttp.BaseRequest

	// 偏移量，取值范围大于等于0，默认值为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 单页请求配置数量，取值范围[1, 50]，默认值为10

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 模糊匹配关键词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
	// 无

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
}

func (r *DescribeBusinessLogConfigsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBusinessLogConfigsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetOssTraceInterfacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务接口集合

		Result *TsfPageTraceInterface `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetOssTraceInterfacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetOssTraceInterfacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeOverviewResourceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 概览页资源信息

		Result *OverviewResource `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeOverviewResourceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeOverviewResourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type HideInstanceRequest struct {
	*tchttp.BaseRequest

	// 注册实例ID

	RegistrationId *string `json:"RegistrationId,omitempty" name:"RegistrationId"`
	// 实例名

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 微服务名

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务ID （ms-xxx）

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *HideInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *HideInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShrinkInstancesRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 下线机器实例ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
}

func (r *ShrinkInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShrinkInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MultiCloudUnitEntity struct {

	// UnitId

	UnitId *string `json:"UnitId,omitempty" name:"UnitId"`
	// UnitName

	UnitName *string `json:"UnitName,omitempty" name:"UnitName"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// NamespaceName

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// TsfId

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// Status

	Status *string `json:"Status,omitempty" name:"Status"`
}

type DescribeEventCategoryNameResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 事件名结果

		Result []*EventCategoryResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeEventCategoryNameResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventCategoryNameResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayPluginsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件信息列表

		Result *TsfPageGatewayPlugin `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayPluginsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayPluginsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeKubeInjectConfigRequest struct {
	*tchttp.BaseRequest

	// ClusterId值

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// Namespace值

	Namespace *string `json:"Namespace,omitempty" name:"Namespace"`
	// Name值

	Name *string `json:"Name,omitempty" name:"Name"`
}

func (r *DescribeKubeInjectConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeKubeInjectConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type KubeInjectConfig struct {

	// EnableByDefault值

	EnableByDefault *bool `json:"EnableByDefault,omitempty" name:"EnableByDefault"`
	// DefaultMicroserviceType值

	DefaultMicroserviceType *string `json:"DefaultMicroserviceType,omitempty" name:"DefaultMicroserviceType"`
	// AgentCpuRequest值

	AgentCpuRequest *string `json:"AgentCpuRequest,omitempty" name:"AgentCpuRequest"`
	// AgentCpuLimit值

	AgentCpuLimit *string `json:"AgentCpuLimit,omitempty" name:"AgentCpuLimit"`
	// AgentMemRequest值

	AgentMemRequest *string `json:"AgentMemRequest,omitempty" name:"AgentMemRequest"`
	// AgentMemLimit值

	AgentMemLimit *string `json:"AgentMemLimit,omitempty" name:"AgentMemLimit"`
}

type DescribeGroupUseDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 日使用统计对象

		Result *GroupDailyUseStatistics `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupUseDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupUseDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TraceSpanInfo struct {

	// 调用链traceid

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 调用链spanid

	SpanId *string `json:"SpanId,omitempty" name:"SpanId"`
	// 调用链parentid

	ParentId *string `json:"ParentId,omitempty" name:"ParentId"`
	// 调用链类型

	Kind *string `json:"Kind,omitempty" name:"Kind"`
	// 调用链name

	Name *string `json:"Name,omitempty" name:"Name"`
	// 时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 耗时

	Duration *float64 `json:"Duration,omitempty" name:"Duration"`
	// 状态

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// 组件

	LocalComponent *string `json:"LocalComponent,omitempty" name:"LocalComponent"`
	// local端点信息

	LocalEndpoint *ZipkinEndpointV2 `json:"LocalEndpoint,omitempty" name:"LocalEndpoint"`
	// remote端点信息

	RemoteEndpoint *ZipkinEndpointV2 `json:"RemoteEndpoint,omitempty" name:"RemoteEndpoint"`
	// tags列表

	TagList []*SpanLabel `json:"TagList,omitempty" name:"TagList"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 状态码

	ResultCode *string `json:"ResultCode,omitempty" name:"ResultCode"`
	// 服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 服务id

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 是否涉及多套 TSF

	IsMultiTsf *bool `json:"IsMultiTsf,omitempty" name:"IsMultiTsf"`
	// 单元化类型

	UnitType *string `json:"UnitType,omitempty" name:"UnitType"`
}

type GroupPodV2 struct {

	// 实例名称(对应到kubernetes的pod名称)

	PodName *string `json:"PodName,omitempty" name:"PodName"`
	// 实例ID(对应到kubernetes的pod id)

	PodId *string `json:"PodId,omitempty" name:"PodId"`
	// 实例状态，请参考后面的实例以及容器的状态定义

	Status *string `json:"Status,omitempty" name:"Status"`
	// 实例处于当前状态的原因，例如容器下载镜像失败

	Reason *string `json:"Reason,omitempty" name:"Reason"`
	// 主机IP

	NodeIp *string `json:"NodeIp,omitempty" name:"NodeIp"`
	// 实例IP

	Ip *string `json:"Ip,omitempty" name:"Ip"`
	// 实例中容器的重启次数

	RestartCount *int64 `json:"RestartCount,omitempty" name:"RestartCount"`
	// 实例中已就绪容器的个数

	ReadyCount *int64 `json:"ReadyCount,omitempty" name:"ReadyCount"`
	// 运行时长

	Runtime *string `json:"Runtime,omitempty" name:"Runtime"`
	// 实例启动时间

	CreatedAt *string `json:"CreatedAt,omitempty" name:"CreatedAt"`
	// 服务实例状态

	ServiceInstanceStatus *string `json:"ServiceInstanceStatus,omitempty" name:"ServiceInstanceStatus"`
	// 机器实例可使用状态

	InstanceAvailableStatus *string `json:"InstanceAvailableStatus,omitempty" name:"InstanceAvailableStatus"`
	// 机器实例状态

	InstanceStatus *string `json:"InstanceStatus,omitempty" name:"InstanceStatus"`
}

type DescribeGroupAttributeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 虚拟机部署组信息

		Result *VmGroupOther `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupAttributeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupAttributeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupInstancesUnifiedResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 列表结果

		Result *TsfPageGroupInstanceUnified `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupInstancesUnifiedResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupInstancesUnifiedResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGroupSecretResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果

		Result *SecretKeyInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGroupSecretResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGroupSecretResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerInfo struct {

	// 容器名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 容器ID

	ContainerId *string `json:"ContainerId,omitempty" name:"ContainerId"`
	// 容器状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 容器的Reason

	Reason *string `json:"Reason,omitempty" name:"Reason"`
	// 镜像地址

	Image *string `json:"Image,omitempty" name:"Image"`
}

type SimpleGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 部署组资源类型

	GroupResourceType *string `json:"GroupResourceType,omitempty" name:"GroupResourceType"`
	// 应用微服务类型

	AppMicroServiceType *string `json:"AppMicroServiceType,omitempty" name:"AppMicroServiceType"`
	// JdkName

	JdkName *string `json:"JdkName,omitempty" name:"JdkName"`
	// JdkVersion

	JdkVersion *string `json:"JdkVersion,omitempty" name:"JdkVersion"`
	// ServiceAgentVersion

	ServiceAgentVersion *string `json:"ServiceAgentVersion,omitempty" name:"ServiceAgentVersion"`
	// StartScript

	StartScript *string `json:"StartScript,omitempty" name:"StartScript"`
	// GatewayConfig

	GatewayConfig *string `json:"GatewayConfig,omitempty" name:"GatewayConfig"`
	// Status

	Status *string `json:"Status,omitempty" name:"Status"`
	// WarmupSetting

	WarmupSetting *string `json:"WarmupSetting,omitempty" name:"WarmupSetting"`
	// UpdateType

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// KubeInjectEnable

	KubeInjectEnable *bool `json:"KubeInjectEnable,omitempty" name:"KubeInjectEnable"`
	// ServiceSpecEncode

	ServiceSpecEncode *string `json:"ServiceSpecEncode,omitempty" name:"ServiceSpecEncode"`
	// StopScript

	StopScript *string `json:"StopScript,omitempty" name:"StopScript"`
	// Alias

	Alias *string `json:"Alias,omitempty" name:"Alias"`
	// OtAgentVersion

	OtAgentVersion *string `json:"OtAgentVersion,omitempty" name:"OtAgentVersion"`
}

type TsfPageUnitRule struct {

	// 记录总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*UnitRule `json:"Content,omitempty" name:"Content"`
}

type DescribeContainerGroupPlainYamlResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 接口结果

		Result *ContainerGroupPlainYaml `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerGroupPlainYamlResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupPlainYamlResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateMachinesRequest struct {
	*tchttp.BaseRequest

	// MachineList

	MachineList []*MachineList `json:"MachineList,omitempty" name:"MachineList"`
}

func (r *CreateMachinesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMachinesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerEnvResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 容器部署组环境变量

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerEnvResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerEnvResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageRepositoryResultV2 struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 镜像服务器地址

	Server *string `json:"Server,omitempty" name:"Server"`
	// 列表信息

	Content []*ImageRepository `json:"Content,omitempty" name:"Content"`
}

type UnbindApiGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UnbindApiGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UnbindApiGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTemplatesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *TemplateResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTemplatesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTemplatesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteGatewayApiRequest struct {
	*tchttp.BaseRequest

	// 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// Api ID 数组

	ApiList []*string `json:"ApiList,omitempty" name:"ApiList"`
}

func (r *DeleteGatewayApiRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGatewayApiRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RemoveInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群移除机器是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RemoveInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RemoveInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShrinkGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ShrinkGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShrinkGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteUnitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteUnitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteUnitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageDimension struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 维度

	Content []*string `json:"Content,omitempty" name:"Content"`
}

type ExpandInstanceScriptsRequest struct {
	*tchttp.BaseRequest

	// 集群 id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *ExpandInstanceScriptsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExpandInstanceScriptsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListAlarmReceiversResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ListAlarmReceiverResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListAlarmReceiversResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListAlarmReceiversResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreatePathRewritesRequest struct {
	*tchttp.BaseRequest

	// 路径重写列表

	PathRewrites *PathRewriteCreateObject `json:"PathRewrites,omitempty" name:"PathRewrites"`
}

func (r *CreatePathRewritesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreatePathRewritesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeConfigSummaryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置项分页对象

		Result *TsfPageConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeConfigSummaryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigSummaryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Provider struct {

	// ProviderControllerName

	ProviderControllerName *string `json:"ProviderControllerName,omitempty" name:"ProviderControllerName"`
}

type ScalableSubRuleV2 struct {

	// 监控指标，如监控CPU和MEM，则为百分比0-100；监控RT，则为响应时间(ms), 0-99999999

	Indicators *uint64 `json:"Indicators,omitempty" name:"Indicators"`
	// 规则指标类型: 1:CPU, 2:MEM, 3:RT

	IndicatorType *uint64 `json:"IndicatorType,omitempty" name:"IndicatorType"`
}

type TemplatePageResultV2 struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*ProjectList `json:"Content,omitempty" name:"Content"`
}

type TxListV2 struct {

	// 返回的事务数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 主事务信息

	Content *TxMainTransaction `json:"Content,omitempty" name:"Content"`
	// 事务异常信息

	Error *TxError `json:"Error,omitempty" name:"Error"`
}

type DescribeGroupInstancesUnifiedRequest struct {
	*tchttp.BaseRequest

	// 实例所属 groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeGroupInstancesUnifiedRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupInstancesUnifiedRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTransactionsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询结果

		Result *DescribeTransactionsResp `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTransactionsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTransactionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MetricAttribute struct {

	// 峰值

	PeakValue *string `json:"PeakValue,omitempty" name:"PeakValue"`
	// 当前值

	CurrentValue *string `json:"CurrentValue,omitempty" name:"CurrentValue"`
}

type CreateScalableRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 请求结果,true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateScalableRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateScalableRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TriggerReleasePipelineRunActionRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 运行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
	// "stop" "rollback"

	RunAction *string `json:"RunAction,omitempty" name:"RunAction"`
}

func (r *TriggerReleasePipelineRunActionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *TriggerReleasePipelineRunActionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StdoutLog struct {

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 日志内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 日志时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
}

type TaskBatchRecordPage struct {

	// 总数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 任务批次翻页查询结果

	Content []*TaskBatchRecord `json:"Content,omitempty" name:"Content"`
}

type DeleteServerlessGroupRequest struct {
	*tchttp.BaseRequest

	// groupId，分组唯一标识

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DeleteServerlessGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteServerlessGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApplicationForPage struct {

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用描述

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 编程语言

	ProgLang *string `json:"ProgLang,omitempty" name:"ProgLang"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 应用资源类型

	ApplicationResourceType *string `json:"ApplicationResourceType,omitempty" name:"ApplicationResourceType"`
	// 应用runtime类型

	ApplicationRuntimeType *string `json:"ApplicationRuntimeType,omitempty" name:"ApplicationRuntimeType"`
	// Apigateway的serviceId

	ApigatewayServiceId *string `json:"ApigatewayServiceId,omitempty" name:"ApigatewayServiceId"`
	// 应用备注名

	ApplicationRemarkName *string `json:"ApplicationRemarkName,omitempty" name:"ApplicationRemarkName"`
	// 服务配置信息列表

	ServiceConfigList []*ServiceConfig `json:"ServiceConfigList,omitempty" name:"ServiceConfigList"`
	// IgnoreCreateImageRepository

	IgnoreCreateImageRepository *bool `json:"IgnoreCreateImageRepository,omitempty" name:"IgnoreCreateImageRepository"`
}

type DeleteServerlessGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteServerlessGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteServerlessGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespacesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段，查询命名空间ID或命名空间名称，不传入时查询全量

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 集群ID，不传入时查询全量

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 命名空间名称，不传入时查询全量

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 表示要查询的 资源类型列表

	NamespaceResourceTypeList []*string `json:"NamespaceResourceTypeList,omitempty" name:"NamespaceResourceTypeList"`
	// 要查询的命名空间的类型列表

	NamespaceTypeList []*string `json:"NamespaceTypeList,omitempty" name:"NamespaceTypeList"`
	// IdList

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
}

func (r *DescribeNamespacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRecordCodesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 日志术语返回结果

		Result *TsfRecordCodeResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRecordCodesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRecordCodesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LicenseTag struct {

	// 许可ID

	LicenseId *string `json:"LicenseId,omitempty" name:"LicenseId"`
	// 标签列表

	Tags []*Tag `json:"Tags,omitempty" name:"Tags"`
}

type CreatePublicConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：创建成功；false：创建失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreatePublicConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreatePublicConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetMetricsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetMetricsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetMetricsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListScalableTasksResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ScalableTaskResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListScalableTasksResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListScalableTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BillingLicense struct {

	// 许可ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 租户ID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 账号ID

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 规格类型

	SpecType *int64 `json:"SpecType,omitempty" name:"SpecType"`
	// 规格

	Spec *string `json:"Spec,omitempty" name:"Spec"`
	// 节点数

	NodeSize *int64 `json:"NodeSize,omitempty" name:"NodeSize"`
	// 资源

	Resource *string `json:"Resource,omitempty" name:"Resource"`
	// 功能

	Function *string `json:"Function,omitempty" name:"Function"`
	// 状态

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 来源类型

	SourceType *int64 `json:"SourceType,omitempty" name:"SourceType"`
	// 自动续费标记

	AutoRenewFlag *int64 `json:"AutoRenewFlag,omitempty" name:"AutoRenewFlag"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 修改时间

	ModifyTime *string `json:"ModifyTime,omitempty" name:"ModifyTime"`
	// 隔离时间

	IsolateTime *string `json:"IsolateTime,omitempty" name:"IsolateTime"`
	// 白名单类型，0 正常，1 不收费白名单内

	WhitelistType *int64 `json:"WhitelistType,omitempty" name:"WhitelistType"`
	// 昵称

	Nickname *string `json:"Nickname,omitempty" name:"Nickname"`
	// 过期时间

	ExpireTime *string `json:"ExpireTime,omitempty" name:"ExpireTime"`
	// 订单数

	BillingRecordCount *int64 `json:"BillingRecordCount,omitempty" name:"BillingRecordCount"`
	// 日志用量

	LogCapacity *int64 `json:"LogCapacity,omitempty" name:"LogCapacity"`
}

type DescribeSimpleReleasesRequest struct {
	*tchttp.BaseRequest

	// 发布单ID列表

	ReleaseIdList []*string `json:"ReleaseIdList,omitempty" name:"ReleaseIdList"`
	// 对id和name进行关键词过滤

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 查询偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribeSimpleReleasesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleReleasesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BlueGreenTemplate struct {

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 程序包ID

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 蓝组，当前只支持一个部署组

	BlueGroups []*ReleaseGroup `json:"BlueGroups,omitempty" name:"BlueGroups"`
	// 绿组，当前只支持一个部署组

	GreenGroups []*ReleaseGroup `json:"GreenGroups,omitempty" name:"GreenGroups"`
	// 镜像仓库名

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 镜像版本

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 是否允许应用配置

	EnableApplicationConfig *bool `json:"EnableApplicationConfig,omitempty" name:"EnableApplicationConfig"`
	// 是否先进行应用配置发布，再部署程序

	PriorApplicationConfig *bool `json:"PriorApplicationConfig,omitempty" name:"PriorApplicationConfig"`
	// 应用配置列表

	ApplicationConfigs []*ApplicationConfig `json:"ApplicationConfigs,omitempty" name:"ApplicationConfigs"`
	// 是否允许文件配置

	EnableFileConfig *bool `json:"EnableFileConfig,omitempty" name:"EnableFileConfig"`
	// 文件配置列表

	FileConfigs []*FileConfig `json:"FileConfigs,omitempty" name:"FileConfigs"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 程序包名

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 程序包版本

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 镜像仓库类型

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
}

type TsfPageZipkinTraceInfoV2 struct {

	// 总条目数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 调用链列表

	Content []*ZipkinTraceInfoV2 `json:"Content,omitempty" name:"Content"`
}

type RevocationPublicConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项发布ID

	ConfigReleaseId *string `json:"ConfigReleaseId,omitempty" name:"ConfigReleaseId"`
}

func (r *RevocationPublicConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RevocationPublicConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MultiCloudUnitMetricStatisticsResult struct {

	// 地域 ID

	RegionId *string `json:"RegionId,omitempty" name:"RegionId"`
	// 超云 cloudId

	CloudId *string `json:"CloudId,omitempty" name:"CloudId"`
	// TsfId

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// 单元 ID

	UnitId *string `json:"UnitId,omitempty" name:"UnitId"`
	// 单元名

	UnitName *string `json:"UnitName,omitempty" name:"UnitName"`
	// 单元化网关服务 ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 单元化网关服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 单元的命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 在线服务数

	ServiceOnlineCount *uint64 `json:"ServiceOnlineCount,omitempty" name:"ServiceOnlineCount"`
	// 在线节点数

	InstanceOnlineCount *uint64 `json:"InstanceOnlineCount,omitempty" name:"InstanceOnlineCount"`
	// 平均 qps

	AvgQps *float64 `json:"AvgQps,omitempty" name:"AvgQps"`
	// 入口平均请求耗时值。单位毫秒

	EntranceAvgTimeConsuming *float64 `json:"EntranceAvgTimeConsuming,omitempty" name:"EntranceAvgTimeConsuming"`
	// 入口请求总量

	EntranceRequestCount *uint64 `json:"EntranceRequestCount,omitempty" name:"EntranceRequestCount"`
	// 入口平均请求错误率。单位百分比，取值【0,100】

	EntranceAvgErrorRate *float64 `json:"EntranceAvgErrorRate,omitempty" name:"EntranceAvgErrorRate"`
	// 入口命名空间 ID（单元化网关）

	EntranceNamespaceId *string `json:"EntranceNamespaceId,omitempty" name:"EntranceNamespaceId"`
}

type UploadLicenseApplicationRequest struct {
	*tchttp.BaseRequest

	// 授予对象

	Grantee *LicenseGrantee `json:"Grantee,omitempty" name:"Grantee"`
	// 申请正文

	ApplyContent *string `json:"ApplyContent,omitempty" name:"ApplyContent"`
}

func (r *UploadLicenseApplicationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UploadLicenseApplicationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MultiValue struct {

	// 数据点

	Values []*float64 `json:"Values,omitempty" name:"Values"`
}

type SimpleResult struct {

	// 是否成功

	Success *bool `json:"Success,omitempty" name:"Success"`
	// 失败原因

	Message *string `json:"Message,omitempty" name:"Message"`
}

type CheckExecuteStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务处理状态信息

		Result *ModuleExecuteStatus `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CheckExecuteStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckExecuteStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAlarmPolicyRequest struct {
	*tchttp.BaseRequest

	// PolicyId

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
}

func (r *DescribeAlarmPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAlarmPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAllBillingLicensesRequest struct {
	*tchttp.BaseRequest

	// 搜索词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeAllBillingLicensesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAllBillingLicensesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageRouteReleaseHistory struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 路由规则部署记录列表信息

	Content []*RouteReleaseHistory `json:"Content,omitempty" name:"Content"`
}

type DescribeTaskFlowGraphResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流拓扑图的边列表

		Result []*TaskFlowEdge `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskFlowGraphResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskFlowGraphResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UploadPkgRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 程序包名字

	PkgName *string `json:"PkgName,omitempty" name:"PkgName"`
	// 程序包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 程序包类型，有tar.gz/zip/war等

	PkgType *string `json:"PkgType,omitempty" name:"PkgType"`
	// 程序包内容的MD5检验和

	Md5 *string `json:"Md5,omitempty" name:"Md5"`
	// 一次程序包上传的唯一标识，在第一个分片上传请求回包中生成返回给调用者

	UploadId *string `json:"UploadId,omitempty" name:"UploadId"`
	// 分片总数

	FileSegs *int64 `json:"FileSegs,omitempty" name:"FileSegs"`
	// 分片序号，从1开始

	FileSeg *int64 `json:"FileSeg,omitempty" name:"FileSeg"`
	// 程序包描述

	PkgDesc *string `json:"PkgDesc,omitempty" name:"PkgDesc"`
	// 程序包分片内容的Base64编码后的文本串

	File *string `json:"File,omitempty" name:"File"`
}

func (r *UploadPkgRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UploadPkgRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MethodDistData struct {

	// 函数ID字串

	MethodId *string `json:"MethodId,omitempty" name:"MethodId"`
	// 函数名称

	MethodName *string `json:"MethodName,omitempty" name:"MethodName"`
	// 线程个数

	Count *int64 `json:"Count,omitempty" name:"Count"`
}

type CreateCircuitBreakerRuleRequest struct {
	*tchttp.BaseRequest

	// 熔断规则主键

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 熔断规则微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务所属命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 目标服务名

	TargetServiceName *string `json:"TargetServiceName,omitempty" name:"TargetServiceName"`
	// 目标服务所属命名空间

	TargetNamespaceId *string `json:"TargetNamespaceId,omitempty" name:"TargetNamespaceId"`
	// 熔断策略

	StrategyList []*CircuitBreakerStrategy `json:"StrategyList,omitempty" name:"StrategyList"`
	// 熔断级别

	IsolationLevel *string `json:"IsolationLevel,omitempty" name:"IsolationLevel"`
	// 是否开启此规则

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
	// 微服务所属命名空间

	TargetNamespaceName *string `json:"TargetNamespaceName,omitempty" name:"TargetNamespaceName"`
}

func (r *CreateCircuitBreakerRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateCircuitBreakerRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInvocationStatisticsRequest struct {
	*tchttp.BaseRequest

	// 维度

	Dimension *string `json:"Dimension,omitempty" name:"Dimension"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 服务角色

	Role *string `json:"Role,omitempty" name:"Role"`
	// 时间粒度

	Period *string `json:"Period,omitempty" name:"Period"`
	// 微服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 目标服务名

	TargetServiceName *string `json:"TargetServiceName,omitempty" name:"TargetServiceName"`
	// 目标接口名

	TargetInterfaceName *string `json:"TargetInterfaceName,omitempty" name:"TargetInterfaceName"`
}

func (r *DescribeInvocationStatisticsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationStatisticsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AppIdEntity struct {

	// 租户ID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
}

type TsfPageMicroservice struct {

	// 微服务总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 微服务列表信息

	Content []*Microservice `json:"Content,omitempty" name:"Content"`
}

type DescribeGatewayInstanceProgramsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 数据集

		Result *Program `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayInstanceProgramsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayInstanceProgramsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssSurroundBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 模块ID

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// 基准日志ID

	LogId *string `json:"LogId,omitempty" name:"LogId"`
	// 上下文日志基准时间戳

	SurroundTs *uint64 `json:"SurroundTs,omitempty" name:"SurroundTs"`
	// 上下文日志数量，取值范围[10, 100]，默认值为50

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 上下文查询方向，B：双向，U：前向，D：向后

	Direction *string `json:"Direction,omitempty" name:"Direction"`
}

func (r *SearchOssSurroundBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssSurroundBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowPage struct {

	// 工作流总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 工作流分页对象

	Content []*TaskFlow `json:"Content,omitempty" name:"Content"`
}

type TaskRuleCheckResult struct {

	// 是否校验成功

	Success *bool `json:"Success,omitempty" name:"Success"`
	// 校验结果信息

	Msg *string `json:"Msg,omitempty" name:"Msg"`
	// 预计下三次触发时间点

	NextFireTimes []*uint64 `json:"NextFireTimes,omitempty" name:"NextFireTimes"`
}

type DownloadTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回base64

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DownloadTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DownloadTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListAppPkgRequest struct {
	*tchttp.BaseRequest

	// 无

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 无

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 无

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ListAppPkgRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListAppPkgRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RegisterImageUserResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RegisterImageUserResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RegisterImageUserResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Permission struct {

	// 权限点ID

	PermId *string `json:"PermId,omitempty" name:"PermId"`
	// 权限点编码

	PermCode *string `json:"PermCode,omitempty" name:"PermCode"`
	// 权限点描述

	PermDesc *string `json:"PermDesc,omitempty" name:"PermDesc"`
	// 产品编码

	ServiceCode *string `json:"ServiceCode,omitempty" name:"ServiceCode"`
	// 创建时间

	CreationTime *int64 `json:"CreationTime,omitempty" name:"CreationTime"`
	// 最后更新时间

	LastUpdateTime *int64 `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 删除标识，true：可以删除；false：不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
}

type DeleteTsfZoneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteTsfZoneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteTsfZoneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RouteTagV2 struct {

	// 路由规则项TAG匹配项ID

	TagId *string `json:"TagId,omitempty" name:"TagId"`
	// 标签类型，S：系统标签， U：自定义标签

	TagType *string `json:"TagType,omitempty" name:"TagType"`
	// 标签字段名称

	TagField *string `json:"TagField,omitempty" name:"TagField"`
	// 标签匹配规则.
	// EQUAL：等于、NOT_EQUAL：不等于、IN：包含、NOT_IN：不包含、REGEX：正则

	TagOperator *string `json:"TagOperator,omitempty" name:"TagOperator"`
	// 标签取值

	TagValue *string `json:"TagValue,omitempty" name:"TagValue"`
	// TAG匹配项所述路由规则项ID

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
}

type DescribeAssociateRelationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 获取到的单个配置项关联信息

		Result *DeliveryConfigBindGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAssociateRelationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAssociateRelationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterVersionsRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeClusterVersionsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterVersionsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateScalableRuleWithDetailRespRequest struct {
	*tchttp.BaseRequest

	// 无

	Name *string `json:"Name,omitempty" name:"Name"`
	// 无

	EnableShrink *uint64 `json:"EnableShrink,omitempty" name:"EnableShrink"`
	// 无

	EnableExpand *uint64 `json:"EnableExpand,omitempty" name:"EnableExpand"`
	// 无

	ExpandPeriod *uint64 `json:"ExpandPeriod,omitempty" name:"ExpandPeriod"`
	// 无

	ShrinkPeriod *uint64 `json:"ShrinkPeriod,omitempty" name:"ShrinkPeriod"`
	// 无

	ExpandVmCount *uint64 `json:"ExpandVmCount,omitempty" name:"ExpandVmCount"`
	// 无

	ShrinkVmCount *uint64 `json:"ShrinkVmCount,omitempty" name:"ShrinkVmCount"`
	// 无

	CoolTime *uint64 `json:"CoolTime,omitempty" name:"CoolTime"`
	// 无

	ExpandVmCountLimit *uint64 `json:"ExpandVmCountLimit,omitempty" name:"ExpandVmCountLimit"`
	// 无

	ShrinkVmCountLimit *uint64 `json:"ShrinkVmCountLimit,omitempty" name:"ShrinkVmCountLimit"`
	// 无

	ExpandSubruleList *ScalableSubRule `json:"ExpandSubruleList,omitempty" name:"ExpandSubruleList"`
	// 无

	ShrinkSubruleList *ScalableSubRule `json:"ShrinkSubruleList,omitempty" name:"ShrinkSubruleList"`
	// 无

	Description *string `json:"Description,omitempty" name:"Description"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
	// 开启定时伸缩规则, 默认0, 0:关闭定时伸缩 1:开启定时伸缩

	EnableCronAS *uint64 `json:"EnableCronAS,omitempty" name:"EnableCronAS"`
	// 是否关闭指标伸缩, 默认0, 0:打开指标伸缩 1:关闭指标伸缩

	DisableMetricAS *uint64 `json:"DisableMetricAS,omitempty" name:"DisableMetricAS"`
	// 定时伸缩规则列表

	CronRuleList []*CronRule `json:"CronRuleList,omitempty" name:"CronRuleList"`
}

func (r *CreateScalableRuleWithDetailRespRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateScalableRuleWithDetailRespRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EventSort struct {

	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式。ASC: 0，DESC: 1。默认为 1

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 排序顺序，越小权重越大。最小为1，表示第一个排序的字段

	OrderIndex *int64 `json:"OrderIndex,omitempty" name:"OrderIndex"`
}

type MonitorOverview struct {

	// 近24小时调用数量

	InvocationCountOfDay *string `json:"InvocationCountOfDay,omitempty" name:"InvocationCountOfDay"`
	// 总调用数量

	InvocationCount *string `json:"InvocationCount,omitempty" name:"InvocationCount"`
	// 近24小时调用错误数量

	ErrorCountOfDay *string `json:"ErrorCountOfDay,omitempty" name:"ErrorCountOfDay"`
	// 总调用错误数量

	ErrorCount *string `json:"ErrorCount,omitempty" name:"ErrorCount"`
	// 近24小时调用成功率

	SuccessRatioOfDay *string `json:"SuccessRatioOfDay,omitempty" name:"SuccessRatioOfDay"`
	// 总调用成功率

	SuccessRatio *string `json:"SuccessRatio,omitempty" name:"SuccessRatio"`
}

type DescribeUnitRuleCreateTypeRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
}

func (r *DescribeUnitRuleCreateTypeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitRuleCreateTypeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReRelateGroupToScalableRuleRequest struct {
	*tchttp.BaseRequest

	// 新规则id;

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 1:启用 2:关闭

	Status *uint64 `json:"Status,omitempty" name:"Status"`
}

func (r *ReRelateGroupToScalableRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReRelateGroupToScalableRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Event struct {

	// 事件 Id

	EventId *string `json:"EventId,omitempty" name:"EventId"`
	// 触发时间

	OccurTime *uint64 `json:"OccurTime,omitempty" name:"OccurTime"`
	// appId值

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 事件类型

	Category *string `json:"Category,omitempty" name:"Category"`
	// 事件状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 事件名，事件摘要

	Name *string `json:"Name,omitempty" name:"Name"`
	// 事件影响对象

	Object *string `json:"Object,omitempty" name:"Object"`
	// 事件等级

	Level *string `json:"Level,omitempty" name:"Level"`
	// 对象详情

	Dimensions []*TsfEventAttribute `json:"Dimensions,omitempty" name:"Dimensions"`
	// 事件详情

	Attributes []*TsfEventAttribute `json:"Attributes,omitempty" name:"Attributes"`
}

type DeleteMonitorStatisticsPolicyRequest struct {
	*tchttp.BaseRequest

	// 监控统计策略id;

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
}

func (r *DeleteMonitorStatisticsPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMonitorStatisticsPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RecordResourceTypeNameV2 struct {

	// 操作记录资源类型

	ResourceType *string `json:"ResourceType,omitempty" name:"ResourceType"`
	// 操作记录资源类型名称

	ResourceTypeName *string `json:"ResourceTypeName,omitempty" name:"ResourceTypeName"`
}

type UpdateCircuitBreakerRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateCircuitBreakerRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateCircuitBreakerRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePermissionCategoriesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 权限组列表

		Result *PagedPermCat `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePermissionCategoriesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePermissionCategoriesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ServerlessGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 服务状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 程序包名

	PkgName *string `json:"PkgName,omitempty" name:"PkgName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// vpc ID

	VpcId *string `json:"VpcId,omitempty" name:"VpcId"`
	// vpc 子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 程序包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 所需实例内存大小

	Memory *string `json:"Memory,omitempty" name:"Memory"`
	// 要求最小实例数

	InstanceRequest *uint64 `json:"InstanceRequest,omitempty" name:"InstanceRequest"`
	// 部署组启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组实例数

	InstanceCount *uint64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 应用名称

	ApplicationName []*string `json:"ApplicationName,omitempty" name:"ApplicationName"`
}

type VmSubTask struct {

	// 机器Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 内网IP

	LanIp *string `json:"LanIp,omitempty" name:"LanIp"`
	// 外网IP

	WanIp *string `json:"WanIp,omitempty" name:"WanIp"`
	// 机器名称

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 机器Agent状态

	AgentState *int64 `json:"AgentState,omitempty" name:"AgentState"`
	// 机器状态

	InstanceState *int64 `json:"InstanceState,omitempty" name:"InstanceState"`
	// 任务状态

	TaskStatus *int64 `json:"TaskStatus,omitempty" name:"TaskStatus"`
	// 任务记录

	TaskRecord *string `json:"TaskRecord,omitempty" name:"TaskRecord"`
}

type TsfConfig struct {

	// TSFID标识

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// TSF名称

	TsfName *string `json:"TsfName,omitempty" name:"TsfName"`
	// 地域

	Region *string `json:"Region,omitempty" name:"Region"`
	// 注册中心配置信息

	ConsulAccessInfo *ConsulAccessInfo `json:"ConsulAccessInfo,omitempty" name:"ConsulAccessInfo"`
	// CTSDB配置信息

	CtsdbInfo *CtsdbInfo `json:"CtsdbInfo,omitempty" name:"CtsdbInfo"`
}

type DescribeApplicationsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 应用分页列表信息

		Result *TsfPageApplication `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicationsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyMicroserviceRequest struct {
	*tchttp.BaseRequest

	// 微服务 ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务备注信息

	MicroserviceDesc *string `json:"MicroserviceDesc,omitempty" name:"MicroserviceDesc"`
}

func (r *ModifyMicroserviceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyMicroserviceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AbnormalMetricsConfig struct {

	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 平均响应时间

	AvgTimeSlow *float64 `json:"AvgTimeSlow,omitempty" name:"AvgTimeSlow"`
	// 服务异常时错误率，已经乘以100，保留两位小数

	ErrorRate *float64 `json:"ErrorRate,omitempty" name:"ErrorRate"`
	// apdex慢调用阈值，保留两位小数

	ApdexSlowThreshold *int64 `json:"ApdexSlowThreshold,omitempty" name:"ApdexSlowThreshold"`
	// apdex错误调用阈值

	ApdexErrorThreshold *float64 `json:"ApdexErrorThreshold,omitempty" name:"ApdexErrorThreshold"`
	// 生效范围是否全局

	IsGlobal *bool `json:"IsGlobal,omitempty" name:"IsGlobal"`
	// apdex慢调用阈值区间范围

	ApdexSlowThresholdRange []*int64 `json:"ApdexSlowThresholdRange,omitempty" name:"ApdexSlowThresholdRange"`
	// 平均响应时间变红阈值

	AvgTimeError *float64 `json:"AvgTimeError,omitempty" name:"AvgTimeError"`
}

type GetTraceServicesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务名集合

		Result *TsfPageTraceService `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTraceServicesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTraceServicesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyZoneRequest struct {
	*tchttp.BaseRequest

	// TZoneId

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
	// TZoneName

	TZoneName *string `json:"TZoneName,omitempty" name:"TZoneName"`
	// TRemark

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
	// TRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
}

func (r *ModifyZoneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyZoneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PathRewrite struct {

	// 路径重写规则ID

	PathRewriteId *string `json:"PathRewriteId,omitempty" name:"PathRewriteId"`
	// 网关部署组ID

	GatewayGroupId *string `json:"GatewayGroupId,omitempty" name:"GatewayGroupId"`
	// 正则表达式

	Regex *string `json:"Regex,omitempty" name:"Regex"`
	// 替换的内容

	Replacement *string `json:"Replacement,omitempty" name:"Replacement"`
	// 是否屏蔽映射后路径，Y: 是 N: 否

	Blocked *string `json:"Blocked,omitempty" name:"Blocked"`
	// 规则顺序，越小优先级越高

	Order *int64 `json:"Order,omitempty" name:"Order"`
}

type TaskFlowLogPage struct {

	// 数据总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 工作流数据列表

	Content []*TaskFlowLog `json:"Content,omitempty" name:"Content"`
}

type CreateMicroserviceApiRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 访问路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 访问方法

	Method *string `json:"Method,omitempty" name:"Method"`
}

func (r *CreateMicroserviceApiRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMicroserviceApiRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFileConfigSummaryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置项分页对象

		Result *TsfPageFileConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFileConfigSummaryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigSummaryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ServiceInfo struct {

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
}

type DeleteImageTag struct {

	// 仓库名，如/tsf/nginx

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 版本号:如V1

	TagName *string `json:"TagName,omitempty" name:"TagName"`
}

type MultipartPkg struct {

	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 当前分片

	FileSeg *uint64 `json:"FileSeg,omitempty" name:"FileSeg"`
	// 总分片数

	FileSegments *uint64 `json:"FileSegments,omitempty" name:"FileSegments"`
	// 每个分片的大小 (字节数)

	SegmentSize *uint64 `json:"SegmentSize,omitempty" name:"SegmentSize"`
	// 文件的MD5

	Md5 *string `json:"Md5,omitempty" name:"Md5"`
	// 文件大小（总字节数）

	Size *uint64 `json:"Size,omitempty" name:"Size"`
	// 文件编码数据 (@为首，表示base64编码)

	File *string `json:"File,omitempty" name:"File"`
}

type DescribeMeshSidecarStatusRequest struct {
	*tchttp.BaseRequest

	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeMeshSidecarStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMeshSidecarStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Service struct {

	// 产品ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 产品编码

	ServiceCode *string `json:"ServiceCode,omitempty" name:"ServiceCode"`
	// 产品名称

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 创建时间

	CreationTime *int64 `json:"CreationTime,omitempty" name:"CreationTime"`
	// 更新时间

	LastUpdateTime *int64 `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 删除标识，true: 可以删除；false: 不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
}

type DescribeSubTransactionsRequest struct {
	*tchttp.BaseRequest

	// 事务id

	TransactionId *string `json:"TransactionId,omitempty" name:"TransactionId"`
	// 搜索词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 事务状态

	TransactionState *int64 `json:"TransactionState,omitempty" name:"TransactionState"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeSubTransactionsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSubTransactionsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssTraceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 调用链列表

		Result *TsfPageZipkinTraceInfoV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchOssTraceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssTraceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MetricDataSingleValue struct {

	// 指标

	MetricName *string `json:"MetricName,omitempty" name:"MetricName"`
	// 统计方式

	MetricFunction *string `json:"MetricFunction,omitempty" name:"MetricFunction"`
	// 指标值

	MetricDataValue *string `json:"MetricDataValue,omitempty" name:"MetricDataValue"`
	// 日环比

	DailyPercent *float64 `json:"DailyPercent,omitempty" name:"DailyPercent"`
}

type DescribeThreadDetailRequest struct {
	*tchttp.BaseRequest

	// 查询的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeThreadDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeThreadDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceConfigClusterContainer struct {

	// 是否需要子网

	NeedSubnetWhenCreatingCluster *bool `json:"NeedSubnetWhenCreatingCluster,omitempty" name:"NeedSubnetWhenCreatingCluster"`
}

type DescribeInstanceMonitorDetailsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 节点指标监控数据曲线集合

		Result []*InstanceMetricDataCurve `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInstanceMonitorDetailsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceMonitorDetailsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGlobalGroupContextUniqueRestrictRequest struct {
	*tchttp.BaseRequest

	// 网关分组context是否唯一（true：唯一、false：不唯一，默认是false）

	GroupContextUnique *bool `json:"GroupContextUnique,omitempty" name:"GroupContextUnique"`
}

func (r *UpdateGlobalGroupContextUniqueRestrictRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGlobalGroupContextUniqueRestrictRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ThreadDetailInfos struct {

	// 线程详情数组

	Content []*ThreadDetailInfo `json:"Content,omitempty" name:"Content"`
	// 接口执行状态success/error

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
}

type OverviewResourceV2 struct {

	// 集群数目

	ClusterCount *int64 `json:"ClusterCount,omitempty" name:"ClusterCount"`
	// 命名空间数目

	NamespaceCount *int64 `json:"NamespaceCount,omitempty" name:"NamespaceCount"`
	// 实例总数目

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 运行中实例数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 停止实例数目

	OffInstanceCount *int64 `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
	// 异常实例数目

	UnNormalInstanceCount *int64 `json:"UnNormalInstanceCount,omitempty" name:"UnNormalInstanceCount"`
	// 应用数目

	ApplicationCount *int64 `json:"ApplicationCount,omitempty" name:"ApplicationCount"`
	// 部署组数目

	GroupCount *int64 `json:"GroupCount,omitempty" name:"GroupCount"`
}

type DeleteReleasesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否删除成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteReleasesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteReleasesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListScalableTasksRequest struct {
	*tchttp.BaseRequest

	// 规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// limit

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// offset

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *ListScalableTasksRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListScalableTasksRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EventDataCurveResult struct {

	// 事件类型

	Category *string `json:"Category,omitempty" name:"Category"`
	// 事件趋势曲线点集

	EventDataPoints []*EventDataPointResult `json:"EventDataPoints,omitempty" name:"EventDataPoints"`
}

type PathRewriteCreateObject struct {

	// 网关部署组ID

	GatewayGroupId *string `json:"GatewayGroupId,omitempty" name:"GatewayGroupId"`
	// 正则表达式

	Regex *string `json:"Regex,omitempty" name:"Regex"`
	// 替换的内容

	Replacement *string `json:"Replacement,omitempty" name:"Replacement"`
	// 是否屏蔽映射后路径，Y: 是 N: 否

	Blocked *string `json:"Blocked,omitempty" name:"Blocked"`
	// 规则顺序，越小优先级越高

	Order *int64 `json:"Order,omitempty" name:"Order"`
}

type DescribeContainerGroupYamlRequest struct {
	*tchttp.BaseRequest

	// 容器部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// tcr或者不填

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
}

func (r *DescribeContainerGroupYamlRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupYamlRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListContainGroupRequest struct {
	*tchttp.BaseRequest

	// 搜索字段，模糊搜索groupName字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 分组所属应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 排序字段，默认为 createTime字段，支持id， name， createTime

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，默认为1：倒序排序，0：正序，1：倒序

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ListContainGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListContainGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InvocationMetricScatterPlot struct {

	// 时间轴截止时间，GMT，精确到毫秒

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
	// 时间粒度

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 时间轴开始时间，GMT，精确到毫秒

	Period *int64 `json:"Period,omitempty" name:"Period"`
	// 多值数据点集合

	DataPoints []*MultiValueDataPoints `json:"DataPoints,omitempty" name:"DataPoints"`
}

type DescribeMicroserviceProtocolResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务类型

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroserviceProtocolResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceProtocolResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DownloadTemplateRequest struct {
	*tchttp.BaseRequest

	// 工程id

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
}

func (r *DownloadTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DownloadTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageMonitorGroup struct {

	// 部署组总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 部署组列表信息

	Content []*MonitorGroup `json:"Content,omitempty" name:"Content"`
}

type ModifyProductHelpRequest struct {
	*tchttp.BaseRequest

	// id

	HelpId *string `json:"HelpId,omitempty" name:"HelpId"`
	// 内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 链接

	Link *string `json:"Link,omitempty" name:"Link"`
	// 排序

	Order *int64 `json:"Order,omitempty" name:"Order"`
	// 样式Flag

	StyleFlag *string `json:"StyleFlag,omitempty" name:"StyleFlag"`
	// 是否有效

	Valid *int64 `json:"Valid,omitempty" name:"Valid"`
	// 标题

	Title *string `json:"Title,omitempty" name:"Title"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

func (r *ModifyProductHelpRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyProductHelpRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SynchronizeContainerClusterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 同步是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SynchronizeContainerClusterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SynchronizeContainerClusterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MonitorStatisticsPolicyGroup struct {

	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// GroupName

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// GroupDesc

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// NamespaceName

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// ApplicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// ApplicationName

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// ClusterId

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// ClusterName

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
}

type TsfPageGatewayInstance struct {

	// 数据总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 翻页数据

	Content []*GatewayInstance `json:"Content,omitempty" name:"Content"`
}

type CreateAbnormalMetricsConfigRequest struct {
	*tchttp.BaseRequest

	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 平均响应时间变黄阈值

	AvgTimeSlow *float64 `json:"AvgTimeSlow,omitempty" name:"AvgTimeSlow"`
	// 服务异常时错误率，已经乘以100，保留两位小数

	ErrorRate *float64 `json:"ErrorRate,omitempty" name:"ErrorRate"`
	// apdex慢调用阈值，保留两位小数

	ApdexSlowThreshold *int64 `json:"ApdexSlowThreshold,omitempty" name:"ApdexSlowThreshold"`
	// apdex错误调用阈值

	ApdexErrorThreshold *float64 `json:"ApdexErrorThreshold,omitempty" name:"ApdexErrorThreshold"`
	// 生效范围是否全局

	IsGlobal *bool `json:"IsGlobal,omitempty" name:"IsGlobal"`
	// 平均响应时间变红阈值

	AvgTimeError *float64 `json:"AvgTimeError,omitempty" name:"AvgTimeError"`
}

func (r *CreateAbnormalMetricsConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAbnormalMetricsConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInterfaceRequestResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 接口请求详情结果

		Result *InterfaceRequests `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInterfaceRequestResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInterfaceRequestResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateBuildTaskRequest struct {
	*tchttp.BaseRequest

	// 应用id。

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 可选值为：KONA、OPEN。
	// KONA: KONA JDK 8，OPEN: OPEN JDK8。不填默认为 KONA。

	JdkVersion *string `json:"JdkVersion,omitempty" name:"JdkVersion"`
	// 可选值：JAR、WAR。

	PackageType *string `json:"PackageType,omitempty" name:"PackageType"`
	// war 包运行环境。目前支持 TOMCAT7。不填默认为 TOMCAT7。

	WarEnvironment *string `json:"WarEnvironment,omitempty" name:"WarEnvironment"`
	// 镜像版本

	Tag *string `json:"Tag,omitempty" name:"Tag"`
	// 程序包名

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 镜像仓库类型

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
	// Tcr 镜像仓库的相关信息

	TcrRepoInfo *TcrRepoInfo `json:"TcrRepoInfo,omitempty" name:"TcrRepoInfo"`
}

func (r *CreateBuildTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateBuildTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateFlameGraphResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务下发成功/失败描述

		Result *ResultStatus `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateFlameGraphResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateFlameGraphResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateProgramResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true: 创建成功；false: 创建失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateProgramResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateProgramResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRouteRequest struct {
	*tchttp.BaseRequest

	// 路由ID

	RouteId *string `json:"RouteId,omitempty" name:"RouteId"`
}

func (r *DescribeRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyApplicationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyApplicationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyApplicationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskLastExecuteStatus struct {

	// 批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 运行状态，RUNNING/SUCCESS/FAIL/HALF/TERMINATED

	State *string `json:"State,omitempty" name:"State"`
	// 批次历史ID

	BatchLogId *string `json:"BatchLogId,omitempty" name:"BatchLogId"`
}

type CreateFlameGraphRequest struct {
	*tchttp.BaseRequest

	// 需要采集火焰图的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 采集时长,单位秒,取值(5,10,30,60,180)

	Duration *int64 `json:"Duration,omitempty" name:"Duration"`
	// 火焰图类型

	Event *string `json:"Event,omitempty" name:"Event"`
	// 是否需要压缩

	Compression *bool `json:"Compression,omitempty" name:"Compression"`
}

func (r *CreateFlameGraphRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateFlameGraphRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindContainerGroupRequest struct {
	*tchttp.BaseRequest

	// 无

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *FindContainerGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindContainerGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LicenseGrantee struct {

	// 被授予者名称

	Name *string `json:"Name,omitempty" name:"Name"`
}

type CloudMonitorPolicyResultV2 struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*CloudMonitorPolicies `json:"Content,omitempty" name:"Content"`
}

type DeletePublicConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DeletePublicConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePublicConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRouteRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路由规则Id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateRouteRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRouteRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageRouteReleaseHistoryV2 struct {

	// 服务路由部署记录列表总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 服务路由规则部署记录列表信息

	Content []*RouteReleaseHistoryV2 `json:"Content,omitempty" name:"Content"`
}

type SearchSpanBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 调用链ID

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 调用链SpanID

	SpanId *string `json:"SpanId,omitempty" name:"SpanId"`
	// 请求偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 单页请求配置数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 调用链时间戳

	TracingTs *uint64 `json:"TracingTs,omitempty" name:"TracingTs"`
}

func (r *SearchSpanBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchSpanBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type NamespaceServiceOverview struct {

	// 命名空间名

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 运行微服务数目（dubbo 的独立计算）

	RunMicroserviceCount *int64 `json:"RunMicroserviceCount,omitempty" name:"RunMicroserviceCount"`
	// 服务在线实例数目

	RunMicroserviceInstanceCount *int64 `json:"RunMicroserviceInstanceCount,omitempty" name:"RunMicroserviceInstanceCount"`
}

type ProductHelp struct {

	// id

	HelpId *string `json:"HelpId,omitempty" name:"HelpId"`
	// 内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 链接

	Link *string `json:"Link,omitempty" name:"Link"`
	// 排序

	Order *int64 `json:"Order,omitempty" name:"Order"`
	// 样式Flag

	StyleFlag *string `json:"StyleFlag,omitempty" name:"StyleFlag"`
	// 是否有效

	Valid *int64 `json:"Valid,omitempty" name:"Valid"`
	// 生效时间（当valid从0 -> 1，刷新生效时间）

	ValidTime *string `json:"ValidTime,omitempty" name:"ValidTime"`
	// 标题

	Title *string `json:"Title,omitempty" name:"Title"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

type CreateAlarmPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateAlarmPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAlarmPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowBatchGraphResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流执行批次对应图的边列表

		Result []*TaskFlowBatchEdge `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFlowBatchGraphResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowBatchGraphResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UnitRule struct {

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 规则名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 规则描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 使用状态：enabled/disabled

	Status *string `json:"Status,omitempty" name:"Status"`
	// 规则项列表

	UnitRuleItemList []*UnitRuleItem `json:"UnitRuleItemList,omitempty" name:"UnitRuleItemList"`
	// CreatedTime

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// UpdatedTime

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
}

type CheckTaskRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务规则校验结果

		Result *TaskRuleCheckResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CheckTaskRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckTaskRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeletePodResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeletePodResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePodResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTransactionsResp struct {

	// 返回的事务数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 主事务信息

	Content []*TxMainTransaction `json:"Content,omitempty" name:"Content"`
}

type ExpandSubrule struct {

	// Indicators

	Indicators *int64 `json:"Indicators,omitempty" name:"Indicators"`
	// IndicatorType

	IndicatorType *int64 `json:"IndicatorType,omitempty" name:"IndicatorType"`
	// RuleType

	RuleType *int64 `json:"RuleType,omitempty" name:"RuleType"`
}

type DraftPluginRequest struct {
	*tchttp.BaseRequest

	// 插件ID

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DraftPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DraftPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateRatelimitResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功与否

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateRatelimitResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateRatelimitResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateUnitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateUnitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateUnitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ClusterLimitResource struct {

	// 最大分配cpu 核数

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配内存M数

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
}

type DeleteMicroserviceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除微服务是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteMicroserviceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMicroserviceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAuthorizationRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DescribeAuthorizationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCreateGatewayApiStatusRequest struct {
	*tchttp.BaseRequest

	// 请求方法

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeCreateGatewayApiStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCreateGatewayApiStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VmTask struct {

	// 任务Id

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 任务类型

	TaskType *int64 `json:"TaskType,omitempty" name:"TaskType"`
	// 分组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 程序包Id

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 程序包名称

	PkgName *string `json:"PkgName,omitempty" name:"PkgName"`
	// 程序包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 任务描述

	TaskDesc *string `json:"TaskDesc,omitempty" name:"TaskDesc"`
	// 子任务数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 成功的子任务数目

	SuccessCount *int64 `json:"SuccessCount,omitempty" name:"SuccessCount"`
	// 运行中的子任务数目

	RunCount *int64 `json:"RunCount,omitempty" name:"RunCount"`
	// 失败的子任务数目

	FailCount *int64 `json:"FailCount,omitempty" name:"FailCount"`
	// 任务的变更状态

	TaskStatus *uint64 `json:"TaskStatus,omitempty" name:"TaskStatus"`
}

type DisableCircuitBreakerRuleRequest struct {
	*tchttp.BaseRequest

	// 熔断规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DisableCircuitBreakerRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableCircuitBreakerRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisassociateBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// 业务日志配置项ID列表

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
	// TSF分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DisassociateBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisassociateBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperateApplicationTcrBindingRequest struct {
	*tchttp.BaseRequest

	// bind 或 unbind

	Command *string `json:"Command,omitempty" name:"Command"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// TcrRepoInfo值

	TcrRepoInfo *TcrRepoInfo `json:"TcrRepoInfo,omitempty" name:"TcrRepoInfo"`
}

func (r *OperateApplicationTcrBindingRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *OperateApplicationTcrBindingRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSdkVersionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 实例对应程序的 SDK 列表，当前最多只有一个 SDK 版本号

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSdkVersionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSdkVersionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OverviewClusterResourceUsage struct {

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群总 CPU

	ClusterTotalCpu *float64 `json:"ClusterTotalCpu,omitempty" name:"ClusterTotalCpu"`
	// 集群已使用 CPU

	ClusterUsedCpu *float64 `json:"ClusterUsedCpu,omitempty" name:"ClusterUsedCpu"`
	// 集群总内存

	ClusterTotalMem *float64 `json:"ClusterTotalMem,omitempty" name:"ClusterTotalMem"`
	// 集群已使用内存

	ClusterUsedMem *float64 `json:"ClusterUsedMem,omitempty" name:"ClusterUsedMem"`
}

type DescribeApiUseDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 日使用统计对象

		Result *GroupApiUseStatistics `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApiUseDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiUseDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGeneralMetricDataDimensionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 命名空间维度

		Result *TsfPageSimpleNamespace `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGeneralMetricDataDimensionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGeneralMetricDataDimensionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceAffinityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true： 就近访问策略开启状态； false：就近访问策略停用状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeNamespaceAffinityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceAffinityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchSurroundBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 日志配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组ID列表

	GroupIds []*string `json:"GroupIds,omitempty" name:"GroupIds"`
	// 实例ID列表

	InstanceIds []*string `json:"InstanceIds,omitempty" name:"InstanceIds"`
	// 基准日志ID

	LogId *string `json:"LogId,omitempty" name:"LogId"`
	// 上下文日志基准时间戳

	SurroundTs *uint64 `json:"SurroundTs,omitempty" name:"SurroundTs"`
	// 上下文日志数量，取值范围[10, 100]，默认值为50

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 上下文查询方向，B：双向，U：前向，D：向后

	Direction *string `json:"Direction,omitempty" name:"Direction"`
}

func (r *SearchSurroundBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchSurroundBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerGroupDeployInfoRequest struct {
	*tchttp.BaseRequest

	// 实例所属 groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeContainerGroupDeployInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupDeployInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateConfigTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateConfigTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateConfigTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AdjustProductNewsPriorityRequest struct {
	*tchttp.BaseRequest

	// id数组

	IdList []*string `json:"IdList,omitempty" name:"IdList"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

func (r *AdjustProductNewsPriorityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AdjustProductNewsPriorityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableLaneRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableLaneRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableLaneRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopFailureRateInterfacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TopN条目列表

		Result []*StatisticsEntry `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTopFailureRateInterfacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopFailureRateInterfacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSimpleInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 机器列表

		Result *TsfPageInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSimpleInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CosUploadInfo struct {

	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 桶

	Bucket *string `json:"Bucket,omitempty" name:"Bucket"`
	// 目标地域

	Region *string `json:"Region,omitempty" name:"Region"`
	// 存储路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 鉴权信息

	Credentials *CosCredentials `json:"Credentials,omitempty" name:"Credentials"`
}

type Namespace struct {

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间编码

	NamespaceCode *string `json:"NamespaceCode,omitempty" name:"NamespaceCode"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 命名空间描述

	NamespaceDesc *string `json:"NamespaceDesc,omitempty" name:"NamespaceDesc"`
	// 默认命名空间

	IsDefault *string `json:"IsDefault,omitempty" name:"IsDefault"`
	// 命名空间状态

	NamespaceStatus *string `json:"NamespaceStatus,omitempty" name:"NamespaceStatus"`
	// 删除标识

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 集群数组，仅携带集群ID，集群名称，集群类型等基础信息。

	ClusterList []*Cluster `json:"ClusterList,omitempty" name:"ClusterList"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群资源类型

	NamespaceResourceType *string `json:"NamespaceResourceType,omitempty" name:"NamespaceResourceType"`
	// 命名空间类型

	NamespaceType *string `json:"NamespaceType,omitempty" name:"NamespaceType"`
	// 是否开启高可用

	IsHaEnable *string `json:"IsHaEnable,omitempty" name:"IsHaEnable"`
	// KubeInjectEnable值

	KubeInjectEnable *bool `json:"KubeInjectEnable,omitempty" name:"KubeInjectEnable"`
	// ProgramId

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// ProgramIdList

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

type DeleteContainerGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除操作是否成功：
		// true：成功
		// false：失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteContainerGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteContainerGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApplicationAttribute struct {

	// 总实例个数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 运行实例个数

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 应用下部署组个数

	GroupCount *int64 `json:"GroupCount,omitempty" name:"GroupCount"`
}

type Instance struct {

	// 机器实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 机器名称

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 机器内网地址IP

	LanIp *string `json:"LanIp,omitempty" name:"LanIp"`
	// 机器外网地址IP

	WanIp *string `json:"WanIp,omitempty" name:"WanIp"`
	// 机器描述信息

	InstanceDesc *string `json:"InstanceDesc,omitempty" name:"InstanceDesc"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// VM的状态 虚机：虚机的状态 容器：Pod所在虚机的状态

	InstanceStatus *string `json:"InstanceStatus,omitempty" name:"InstanceStatus"`
	// VM的可使用状态 虚机：虚机是否能够作为资源使用 容器：虚机是否能够作为资源部署POD

	InstanceAvailableStatus *string `json:"InstanceAvailableStatus,omitempty" name:"InstanceAvailableStatus"`
	// 服务下的服务实例的状态 虚机：应用是否可用 + Agent状态 容器：Pod状态

	ServiceInstanceStatus *string `json:"ServiceInstanceStatus,omitempty" name:"ServiceInstanceStatus"`
	// 标识此instance是否已添加在tsf中

	CountInTsf *int64 `json:"CountInTsf,omitempty" name:"CountInTsf"`
	// 机器所属部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 机器所属应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 机器所属应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 机器实例在CVM的创建时间

	InstanceCreatedTime *string `json:"InstanceCreatedTime,omitempty" name:"InstanceCreatedTime"`
	// 机器实例在CVM的过期时间

	InstanceExpiredTime *string `json:"InstanceExpiredTime,omitempty" name:"InstanceExpiredTime"`
	// 机器实例在CVM的计费模式

	InstanceChargeType *string `json:"InstanceChargeType,omitempty" name:"InstanceChargeType"`
	// 机器实例总CPU信息

	InstanceTotalCpu *float64 `json:"InstanceTotalCpu,omitempty" name:"InstanceTotalCpu"`
	// 机器实例总内存信息

	InstanceTotalMem *float64 `json:"InstanceTotalMem,omitempty" name:"InstanceTotalMem"`
	// 机器实例使用的CPU信息

	InstanceUsedCpu *float64 `json:"InstanceUsedCpu,omitempty" name:"InstanceUsedCpu"`
	// 机器实例使用的内存信息

	InstanceUsedMem *float64 `json:"InstanceUsedMem,omitempty" name:"InstanceUsedMem"`
	// 机器实例Limit CPU信息

	InstanceLimitCpu *float64 `json:"InstanceLimitCpu,omitempty" name:"InstanceLimitCpu"`
	// 机器实例Limit 内存信息

	InstanceLimitMem *float64 `json:"InstanceLimitMem,omitempty" name:"InstanceLimitMem"`
	// 包版本

	InstancePkgVersion *string `json:"InstancePkgVersion,omitempty" name:"InstancePkgVersion"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 机器实例业务状态

	RestrictState *string `json:"RestrictState,omitempty" name:"RestrictState"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 实例执行状态

	OperationState *int64 `json:"OperationState,omitempty" name:"OperationState"`
	// NamespaceId Ns ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// InstanceZoneId 可用区ID

	InstanceZoneId *string `json:"InstanceZoneId,omitempty" name:"InstanceZoneId"`
	// InstanceImportMode 导入模式

	InstanceImportMode *string `json:"InstanceImportMode,omitempty" name:"InstanceImportMode"`
	// ApplicationType应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// ApplicationResourceType 资源类型

	ApplicationResourceType *string `json:"ApplicationResourceType,omitempty" name:"ApplicationResourceType"`
	// sidecar状态

	ServiceSidecarStatus *string `json:"ServiceSidecarStatus,omitempty" name:"ServiceSidecarStatus"`
	// 部署组名

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// NS名

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 健康检查原因

	Reason *string `json:"Reason,omitempty" name:"Reason"`
	// agent版本

	AgentVersion *string `json:"AgentVersion,omitempty" name:"AgentVersion"`
	// 容器母机实例ID

	NodeInstanceId *string `json:"NodeInstanceId,omitempty" name:"NodeInstanceId"`
	// 无

	InstanceAdvancedSettings *InstanceAdvancedSettings `json:"InstanceAdvancedSettings,omitempty" name:"InstanceAdvancedSettings"`
}

type DescribeAuthorizationTypeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 权限规则组

		Result *AuthRuleGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAuthorizationTypeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationTypeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourcesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页的资源列表

		Result *PagedResource `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeResourcesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourcesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ServiceStatistics struct {

	// 服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 总请求量

	RequestAmount *string `json:"RequestAmount,omitempty" name:"RequestAmount"`
	// 请求成功量

	SuccessAmount *string `json:"SuccessAmount,omitempty" name:"SuccessAmount"`
	// 请求成功率

	SuccessRate *string `json:"SuccessRate,omitempty" name:"SuccessRate"`
	// 请求最大耗时

	MaxDuration *string `json:"MaxDuration,omitempty" name:"MaxDuration"`
	// 请求最小耗时

	MinDuration *string `json:"MinDuration,omitempty" name:"MinDuration"`
	// 请求平均耗时

	AvgDuration *string `json:"AvgDuration,omitempty" name:"AvgDuration"`
}

type ListAppResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 错误码

		Code *string `json:"Code,omitempty" name:"Code"`
		// 结果

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListAppResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListAppResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupResourceUsageResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署组统计信息

		Result *OverviewGroupResourceUsage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupResourceUsageResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupResourceUsageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeThreadDetailListRequest struct {
	*tchttp.BaseRequest

	// java实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 线程状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 搜索关键词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 分页大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 排序类型（升序，降序）

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 是否需要压缩数据

	Compression *bool `json:"Compression,omitempty" name:"Compression"`
}

func (r *DescribeThreadDetailListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeThreadDetailListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRepositoriesRequest struct {
	*tchttp.BaseRequest

	// 查询关键字（按照仓库名称搜索）

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 查询起始偏移

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 返回数量限制

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 仓库类型（默认仓库：default，私有仓库：private）

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
}

func (r *DescribeRepositoriesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRepositoriesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyClusterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新集群详情操作是否成功。
		// true： 操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyClusterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyClusterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleasePluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleasePluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleasePluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopInstanceRequest struct {
	*tchttp.BaseRequest

	// 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 机器实例ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
}

func (r *StopInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type JvmLockDetail struct {

	// 死锁线程数, 没有死锁时为0

	ThreadCount *int64 `json:"ThreadCount,omitempty" name:"ThreadCount"`
	// 死锁检测响应信息,没有死锁时为空串""

	LockInfos *string `json:"LockInfos,omitempty" name:"LockInfos"`
	// 调用成功success/调用失败error

	Status *string `json:"Status,omitempty" name:"Status"`
	// 调用成功为""/调用失败为对应失败信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// 调用成功为0/调用失败为对应的错误码

	StatusCode *int64 `json:"StatusCode,omitempty" name:"StatusCode"`
}

type ServiceConfig struct {

	// 服务名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 端口信息列表

	Ports []*Ports `json:"Ports,omitempty" name:"Ports"`
	// 健康检查配置

	HealthCheck *HealthCheckConfig `json:"HealthCheck,omitempty" name:"HealthCheck"`
}

type CosCredentials struct {

	// 会话Token

	SessionToken *string `json:"SessionToken,omitempty" name:"SessionToken"`
	// 临时应用ID

	TmpAppId *string `json:"TmpAppId,omitempty" name:"TmpAppId"`
	// 临时调用者身份ID

	TmpSecretId *string `json:"TmpSecretId,omitempty" name:"TmpSecretId"`
	// 临时密钥

	TmpSecretKey *string `json:"TmpSecretKey,omitempty" name:"TmpSecretKey"`
	// 过期时间

	ExpiredTime *int64 `json:"ExpiredTime,omitempty" name:"ExpiredTime"`
	// 所在域

	Domain *string `json:"Domain,omitempty" name:"Domain"`
}

type MetricStatistic struct {

	// 平均请求数。

	Requests *float64 `json:"Requests,omitempty" name:"Requests"`
	// 平均请求耗时。

	Latency *float64 `json:"Latency,omitempty" name:"Latency"`
	// 平均错误数。

	Errors *float64 `json:"Errors,omitempty" name:"Errors"`
	// 平均错误率。

	ErrorRate *float64 `json:"ErrorRate,omitempty" name:"ErrorRate"`
	// 客户端平均错误数。

	HttpClientErrors *float64 `json:"HttpClientErrors,omitempty" name:"HttpClientErrors"`
	// 服务端平均错误数。

	HttpServerErrors *float64 `json:"HttpServerErrors,omitempty" name:"HttpServerErrors"`
	// 平均数对应的时间粒度

	Period *float64 `json:"Period,omitempty" name:"Period"`
}

type SpanLabel struct {

	// 标签键

	Key *string `json:"Key,omitempty" name:"Key"`
	// 标签值

	Value *string `json:"Value,omitempty" name:"Value"`
}

type DescribeLicenseApplicationContentRequest struct {
	*tchttp.BaseRequest

	// 填写申请时间

	CreateTime *uint64 `json:"CreateTime,omitempty" name:"CreateTime"`
}

func (r *DescribeLicenseApplicationContentRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLicenseApplicationContentRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ZipkinMetadata struct {

	// 元数据值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 元数据时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 元数据端点信息

	Endpoint *ZipkinEndPoint `json:"Endpoint,omitempty" name:"Endpoint"`
}

type DtsGroupStatistics struct {

	// 事务分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 主事务总数

	TxQty *int64 `json:"TxQty,omitempty" name:"TxQty"`
	// 分支事务总数

	BranchQty *int64 `json:"BranchQty,omitempty" name:"BranchQty"`
	// 异常主事务数

	ErrorTxQty *int64 `json:"ErrorTxQty,omitempty" name:"ErrorTxQty"`
}

type DescribeMachineMonitorResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 1

		Result []*ResourceMonitor `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMachineMonitorResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMachineMonitorResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CircuitBreakerRule struct {

	// 熔断规则主键

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 熔断规则微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务所属命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 目标服务名

	TargetServiceName *string `json:"TargetServiceName,omitempty" name:"TargetServiceName"`
	// 目标服务所属命名空间ID

	TargetNamespaceId *string `json:"TargetNamespaceId,omitempty" name:"TargetNamespaceId"`
	// 熔断策略

	StrategyList []*CircuitBreakerStrategy `json:"StrategyList,omitempty" name:"StrategyList"`
	// 熔断级别

	IsolationLevel *string `json:"IsolationLevel,omitempty" name:"IsolationLevel"`
	// 是否开启此规则

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// APPID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// subAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// 目标服务所属命名空间

	TargetNamespaceName *string `json:"TargetNamespaceName,omitempty" name:"TargetNamespaceName"`
}

type DescribeApiVersionsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API版本列表

		Result []*ApiVersionArray `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApiVersionsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiVersionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AuthCondition struct {

	// 类型，meta 或者 tag；条件为服务名时用 meta，其他用 tag

	Type *string `json:"Type,omitempty" name:"Type"`
	// 条件为服务名时，key 为 sourceServiceId；条件是 tag 时，key 为用户自定义

	Key *string `json:"Key,omitempty" name:"Key"`
	// 操作符，从中选其一，equal, notEqual, in, notIn, regex

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 如果操作符不是 in / notIn， 值只有一个

	ValueList []*string `json:"ValueList,omitempty" name:"ValueList"`
	// 如果条件是服务名，在回包中这个数组中包含主调服务信息

	SourceServiceList []*AuthMicroservice `json:"SourceServiceList,omitempty" name:"SourceServiceList"`
}

type SimpleGroupV2 struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
}

type DescribeContainerEventsRequest struct {
	*tchttp.BaseRequest

	// event 的资源类型, group 或者 instance

	ResourceType *string `json:"ResourceType,omitempty" name:"ResourceType"`
	// event 的资源 id

	ResourceId *string `json:"ResourceId,omitempty" name:"ResourceId"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 当类型是 instance 时需要

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeContainerEventsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerEventsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMsApiListRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 每页的数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribeMsApiListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMsApiListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerTasksResult struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表信息

	Content []*ContainerTasks `json:"Content,omitempty" name:"Content"`
}

type InterfaceStatistic struct {

	// 请求路径模版

	Path *string `json:"Path,omitempty" name:"Path"`
	// 请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 接口请求量

	RequestCount *int64 `json:"RequestCount,omitempty" name:"RequestCount"`
	// 错误率0-1之间小数

	ErrorRate *float64 `json:"ErrorRate,omitempty" name:"ErrorRate"`
	// 平均耗时,单位ms

	AvgTimeConsuming *int64 `json:"AvgTimeConsuming,omitempty" name:"AvgTimeConsuming"`
	// p50,单位ms

	P50 *int64 `json:"P50,omitempty" name:"P50"`
	// p99,单位ms

	P99 *int64 `json:"P99,omitempty" name:"P99"`
}

type DescribeImageFeaturesRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeImageFeaturesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImageFeaturesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MonitorStatisticsPolicyResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*MonitorStatisticsPolicy `json:"Content,omitempty" name:"Content"`
}

type AppPkgInfo struct {

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用下的程序包数量

	PkgCount *int64 `json:"PkgCount,omitempty" name:"PkgCount"`
}

type MicroserviceCount struct {

	// 总服务数

	MsCount *int64 `json:"MsCount,omitempty" name:"MsCount"`
	// 总服务变化量

	MsVarianceCount *int64 `json:"MsVarianceCount,omitempty" name:"MsVarianceCount"`
	// 在线服务数

	NormalCount *int64 `json:"NormalCount,omitempty" name:"NormalCount"`
	// 在线服务数变化量

	NormalVarianceCount *int64 `json:"NormalVarianceCount,omitempty" name:"NormalVarianceCount"`
	// 异常服务数

	AbnormalCount *int64 `json:"AbnormalCount,omitempty" name:"AbnormalCount"`
	// 异常服务数变化量

	AbnormalVarianceCount *int64 `json:"AbnormalVarianceCount,omitempty" name:"AbnormalVarianceCount"`
}

type AutoRetryTransactionRequest struct {
	*tchttp.BaseRequest

	// 自动重试事务ID列表

	TransactionId []*string `json:"TransactionId,omitempty" name:"TransactionId"`
	// 是否开启自动重试

	AutoRetry *bool `json:"AutoRetry,omitempty" name:"AutoRetry"`
}

func (r *AutoRetryTransactionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AutoRetryTransactionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeJvmMonitorResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Java实例jvm监控数据

		Result *JvmMonitorData `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeJvmMonitorResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeJvmMonitorResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ProjectList struct {

	// 工程id

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
	// 工程名

	ProjectName *string `json:"ProjectName,omitempty" name:"ProjectName"`
	// 包路径

	BasePackage *string `json:"BasePackage,omitempty" name:"BasePackage"`
	// 修改时间

	LastTime *int64 `json:"LastTime,omitempty" name:"LastTime"`
	// AppId

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// SubAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// Data

	Data *string `json:"Data,omitempty" name:"Data"`
}

type AdjustProductNewsPriorityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AdjustProductNewsPriorityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AdjustProductNewsPriorityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceUsageConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 概览页配置

		Result *OverviewConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeResourceUsageConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceUsageConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetEnvRequest struct {
	*tchttp.BaseRequest

	// InstanceId

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// EndpointName

	EndpointName *string `json:"EndpointName,omitempty" name:"EndpointName"`
}

func (r *GetEnvRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetEnvRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListAlarmPoliciesRequest struct {
	*tchttp.BaseRequest

	// SearchWord

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 偏移

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *ListAlarmPoliciesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListAlarmPoliciesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PreviewLicenseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 证书内含信息结构

		Result *License `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *PreviewLicenseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *PreviewLicenseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupResourceConfig struct {

	// 容器部署组相关的参数配置

	Container *ContainerGroupResourceConfig `json:"Container,omitempty" name:"Container"`
}

type TsfPageSimpleGroup struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 简单部署组列表

	Content []*SimpleGroup `json:"Content,omitempty" name:"Content"`
}

type BillingOperationPurchaseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果（true成功，false失败）

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *BillingOperationPurchaseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationPurchaseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterSchedulabilityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群支持调度的实例数

		Result *int64 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterSchedulabilityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterSchedulabilityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLogCapacityRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeLogCapacityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLogCapacityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableUnitRouteRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DisableUnitRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableUnitRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ResourceNodeStatus struct {

	// 已使用的资源量

	Used *uint64 `json:"Used,omitempty" name:"Used"`
	// 总的资源量

	Total *uint64 `json:"Total,omitempty" name:"Total"`
}

type TaskInstance struct {

	// id

	Id *string `json:"Id,omitempty" name:"Id"`
	// status

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// mtime

	Mtime *string `json:"Mtime,omitempty" name:"Mtime"`
}

type CreateOrUpdateUnitRuleByMultiCloudRequest struct {
	*tchttp.BaseRequest

	// 主键ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 规则名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 规则描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 规则项列表

	UnitRuleItemList []*UnitRuleItem `json:"UnitRuleItemList,omitempty" name:"UnitRuleItemList"`
}

func (r *CreateOrUpdateUnitRuleByMultiCloudRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateOrUpdateUnitRuleByMultiCloudRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateApiRateLimitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateApiRateLimitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApiRateLimitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MultiCloudPingTsfResp struct {

	// 配置ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 地域ID

	TsfRegionId *string `json:"TsfRegionId,omitempty" name:"TsfRegionId"`
	// 超云tsfId

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// 超云cloudId

	CloudId *string `json:"CloudId,omitempty" name:"CloudId"`
	// 网关实例ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 网关服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 网关服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 连通状态, 正常: normal; 异常: unusual; 未知: unknown

	Status *string `json:"Status,omitempty" name:"Status"`
}

type DeployContainerGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID，分组唯一标识

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 旧版镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称,如v1

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 业务容器最大的 CPU 核数，对应 K8S 的 limit；不填时默认为 request 的 2 倍

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 业务容器最大的内存 MiB 数，对应 K8S 的 limit；不填时默认为 request 的 2 倍

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 实例数量

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// jvm参数

	JvmOpts *string `json:"JvmOpts,omitempty" name:"JvmOpts"`
	// 业务容器分配的 CPU 核数，对应 K8S 的 request，默认0.25

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 业务容器分配的内存 MiB 数，对应 K8S 的 request，默认640 MiB

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 是否不立即启动

	DoNotStart *bool `json:"DoNotStart,omitempty" name:"DoNotStart"`
	// （优先使用）新版镜像名，如/tsf/nginx

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 滚动更新必填，更新间隔

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// agent 容器分配的 CPU 核数，对应 K8S 的 request

	AgentCpuRequest *string `json:"AgentCpuRequest,omitempty" name:"AgentCpuRequest"`
	// agent 容器最大的 CPU 核数，对应 K8S 的 limit

	AgentCpuLimit *string `json:"AgentCpuLimit,omitempty" name:"AgentCpuLimit"`
	// agent 容器分配的内存 MiB 数，对应 K8S 的 request

	AgentMemRequest *string `json:"AgentMemRequest,omitempty" name:"AgentMemRequest"`
	// agent 容器最大的内存 MiB 数，对应 K8S 的 limit

	AgentMemLimit *string `json:"AgentMemLimit,omitempty" name:"AgentMemLimit"`
	// istioproxy 容器分配的 CPU 核数，对应 K8S 的 request

	IstioCpuRequest *string `json:"IstioCpuRequest,omitempty" name:"IstioCpuRequest"`
	// istioproxy 容器最大的 CPU 核数，对应 K8S 的 limit

	IstioCpuLimit *string `json:"IstioCpuLimit,omitempty" name:"IstioCpuLimit"`
	// istioproxy 容器分配的内存 MiB 数，对应 K8S 的 request

	IstioMemRequest *string `json:"IstioMemRequest,omitempty" name:"IstioMemRequest"`
	// istioproxy 容器最大的内存 MiB 数，对应 K8S 的 limit

	IstioMemLimit *string `json:"IstioMemLimit,omitempty" name:"IstioMemLimit"`
	// kubernetes滚动更新策略的MaxSurge参数

	MaxSurge *string `json:"MaxSurge,omitempty" name:"MaxSurge"`
	// kubernetes滚动更新策略的MaxUnavailable参数

	MaxUnavailable *string `json:"MaxUnavailable,omitempty" name:"MaxUnavailable"`
	// 健康检查配置信息，若不指定该参数，则默认不设置健康检查。

	HealthCheckSettings *HealthCheckSettings `json:"HealthCheckSettings,omitempty" name:"HealthCheckSettings"`
	// 部署组应用运行的环境变量。若不指定该参数，则默认不设置额外的环境变量。

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// 容器部署组的网络设置。

	ServiceSetting *ServiceSetting `json:"ServiceSetting,omitempty" name:"ServiceSetting"`
	// 是否部署 agent 容器。若不指定该参数，则默认不部署 agent 容器。

	DeployAgent *bool `json:"DeployAgent,omitempty" name:"DeployAgent"`
	// 节点调度策略。若不指定改参数，则默认不使用节点调度策略。

	SchedulingStrategy *SchedulingStrategy `json:"SchedulingStrategy,omitempty" name:"SchedulingStrategy"`
	// 是否进行增量部署，默认为false，全量更新

	IncrementalDeployment *bool `json:"IncrementalDeployment,omitempty" name:"IncrementalDeployment"`
	// tcr或者不填

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
	// 数据卷信息-废弃，请用VolumeInfoList参数

	VolumeInfos *VolumeInfo `json:"VolumeInfos,omitempty" name:"VolumeInfos"`
	// 数据卷挂载点信息-废弃，请用VolumeMountInfoList参数

	VolumeMountInfos *VolumeMountInfo `json:"VolumeMountInfos,omitempty" name:"VolumeMountInfos"`
	// 数据卷信息，list

	VolumeInfoList []*VolumeInfo `json:"VolumeInfoList,omitempty" name:"VolumeInfoList"`
	// 数据卷挂载点信息，list

	VolumeMountInfoList []*VolumeMountInfo `json:"VolumeMountInfoList,omitempty" name:"VolumeMountInfoList"`
	// 是否清除数据卷信息，默认false

	VolumeClean *bool `json:"VolumeClean,omitempty" name:"VolumeClean"`
	// javaagent信息: SERVICE_AGENT/OT_AGENT

	AgentProfileList []*AgentProfile `json:"AgentProfileList,omitempty" name:"AgentProfileList"`
	// 预热配置信息

	WarmupSetting *WarmupSetting `json:"WarmupSetting,omitempty" name:"WarmupSetting"`
	// Envoy网关服务配置

	GatewayConfig *GatewayConfig `json:"GatewayConfig,omitempty" name:"GatewayConfig"`
	// 镜像秘钥

	SecretName *string `json:"SecretName,omitempty" name:"SecretName"`
}

func (r *DeployContainerGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployContainerGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployContainGroupRequest struct {
	*tchttp.BaseRequest

	// groupId，分组唯一标识

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称,如v1

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// JVM参数

	JvmOpts *string `json:"JvmOpts,omitempty" name:"JvmOpts"`
	// 最大分配cpu 核数

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配内存M数

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 实例数量

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
}

func (r *DeployContainGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployContainGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowEdge struct {

	// 节点 ID

	NodeId *string `json:"NodeId,omitempty" name:"NodeId"`
	// 子节点 ID

	ChildNodeId *string `json:"ChildNodeId,omitempty" name:"ChildNodeId"`
	// 是否核心任务,Y/N

	CoreNode *string `json:"CoreNode,omitempty" name:"CoreNode"`
	// 边类型

	EdgeType *string `json:"EdgeType,omitempty" name:"EdgeType"`
	// 任务节点类型

	NodeType *string `json:"NodeType,omitempty" name:"NodeType"`
	// X轴坐标位置

	PositionX *string `json:"PositionX,omitempty" name:"PositionX"`
	// Y轴坐标位置

	PositionY *string `json:"PositionY,omitempty" name:"PositionY"`
	// 图 ID

	GraphId *string `json:"GraphId,omitempty" name:"GraphId"`
	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 节点名称

	NodeName *string `json:"NodeName,omitempty" name:"NodeName"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务历史ID

	TaskLogId *string `json:"TaskLogId,omitempty" name:"TaskLogId"`
}

type DescribePluginInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件信息列表

		Result *TsfPageGatewayPlugin `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePluginInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePluginInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetMetricsRequest struct {
	*tchttp.BaseRequest

	// InstanceId

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// EndpointName

	EndpointName *string `json:"EndpointName,omitempty" name:"EndpointName"`
}

func (r *GetMetricsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetMetricsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageGetRepositoryListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 总记录数

		TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
		// 镜像服务器地址

		Server *int64 `json:"Server,omitempty" name:"Server"`
		// 列表信息

		Content []*string `json:"Content,omitempty" name:"Content"`
		// 仓库名,含命名空间,如tsf/nginx

		Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
		// 命名空间,tsf

		Namespace *string `json:"Namespace,omitempty" name:"Namespace"`
		// 镜像版本数

		TagCount *int64 `json:"TagCount,omitempty" name:"TagCount"`
		// 是否公共,1:公有,0:私有

		IsPublic *int64 `json:"IsPublic,omitempty" name:"IsPublic"`
		// 是否被用户收藏。true：是，false：否

		IsUserFavor *bool `json:"IsUserFavor,omitempty" name:"IsUserFavor"`
		// 是否是腾讯云官方仓库。 是否是腾讯云官方仓库。true：是，false：否

		IsQcloudOfficial *bool `json:"IsQcloudOfficial,omitempty" name:"IsQcloudOfficial"`
		// 被所有用户收藏次数

		FavorCount *int64 `json:"FavorCount,omitempty" name:"FavorCount"`
		// 拉取次数

		PullCount *int64 `json:"PullCount,omitempty" name:"PullCount"`
		// 描述内容

		Description *string `json:"Description,omitempty" name:"Description"`
		// 创建时间

		CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
		// 更新时间

		UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ImageGetRepositoryListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageGetRepositoryListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleasePluginRequest struct {
	*tchttp.BaseRequest

	// 插件ID

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *ReleasePluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleasePluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeKubeDeploymentsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result *KubeDeploymentPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeKubeDeploymentsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeKubeDeploymentsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperateApplicationTcrBindingResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *OperateApplicationTcrBindingResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *OperateApplicationTcrBindingResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConfigReleaseV2 struct {

	// 配置项发布ID

	ConfigReleaseId *string `json:"ConfigReleaseId,omitempty" name:"ConfigReleaseId"`
	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 发布时间

	ReleaseTime *string `json:"ReleaseTime,omitempty" name:"ReleaseTime"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
}

type DeleteServiceInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteServiceInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteServiceInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTraceInterfacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务接口集合

		Result *TsfPageTraceInterface `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTraceInterfacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTraceInterfacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayJwtPlugin struct {

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件创建时间 如:2019-06-20 15:51:28

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 插件更新时间 如:2019-06-20 15:51:28

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 公钥标识

	Kid *string `json:"Kid,omitempty" name:"Kid"`
	// 公钥对

	PublicKeyJson *string `json:"PublicKeyJson,omitempty" name:"PublicKeyJson"`
	// 重定向地址

	RedirectUrl *string `json:"RedirectUrl,omitempty" name:"RedirectUrl"`
	// token携带位置，网关取token位置与发送认证请求时token位置一致,值:query/header

	TokenBaggagePosition *string `json:"TokenBaggagePosition,omitempty" name:"TokenBaggagePosition"`
	// token的key值

	TokenKeyName *string `json:"TokenKeyName,omitempty" name:"TokenKeyName"`
	// claim参数映射关系json

	ClaimMappingJson *string `json:"ClaimMappingJson,omitempty" name:"ClaimMappingJson"`
	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
}

type AssociateConfigWithGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 绑定是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AssociateConfigWithGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AssociateConfigWithGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RollbackPublicConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：回滚成功；false：回滚失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RollbackPublicConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RollbackPublicConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayWeChatMiniProgramLoginPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件Id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件类型 "WeChatMiniProgramLogin"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 微信小程序AppId

	WeChatAppId *string `json:"WeChatAppId,omitempty" name:"WeChatAppId"`
	// 微信小程序AppSecret

	WeChatAppSecret *string `json:"WeChatAppSecret,omitempty" name:"WeChatAppSecret"`
	// 微信小程序请求code携带位置：header/cookie

	RequestCodeBaggagePosition *string `json:"RequestCodeBaggagePosition,omitempty" name:"RequestCodeBaggagePosition"`
	// 自定义登录态参数名

	SessionKeyName *string `json:"SessionKeyName,omitempty" name:"SessionKeyName"`
	// 自定义登录态过期时间，单位：秒

	SessionExpireTime *int64 `json:"SessionExpireTime,omitempty" name:"SessionExpireTime"`
	// 前台业务请求自定义登录态参数位置：header/cookie

	RequestSessionBaggagePosition *string `json:"RequestSessionBaggagePosition,omitempty" name:"RequestSessionBaggagePosition"`
	// 向业务后台传输登录态参数位置：header/cookie/query

	BusinessSessionBaggagePosition *string `json:"BusinessSessionBaggagePosition,omitempty" name:"BusinessSessionBaggagePosition"`
	// 返回自定义登录态参数位置：header

	ResponseSessionBaggagePosition *string `json:"ResponseSessionBaggagePosition,omitempty" name:"ResponseSessionBaggagePosition"`
	// 元数据转标签配置的Json串

	MetaDataTagInfoList *string `json:"MetaDataTagInfoList,omitempty" name:"MetaDataTagInfoList"`
	// 自定义标签配置的Json串

	CustomizeTagInfoList *string `json:"CustomizeTagInfoList,omitempty" name:"CustomizeTagInfoList"`
}

func (r *UpdateGatewayWeChatMiniProgramLoginPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayWeChatMiniProgramLoginPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AdjustLaneRulePriorityRequest struct {
	*tchttp.BaseRequest

	// 泳道规则Id列表

	RuleIdList []*string `json:"RuleIdList,omitempty" name:"RuleIdList"`
}

func (r *AdjustLaneRulePriorityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AdjustLaneRulePriorityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateViewResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// viewId

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateViewResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateViewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RelateGroupToScalableRuleRequest struct {
	*tchttp.BaseRequest

	// 规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 1:启用 2:关闭

	Status *uint64 `json:"Status,omitempty" name:"Status"`
}

func (r *RelateGroupToScalableRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RelateGroupToScalableRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopFailureRateServicesRequest struct {
	*tchttp.BaseRequest

	// 列表条目数量，取值范围[1, 50]，默认值10

	Count *uint64 `json:"Count,omitempty" name:"Count"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 统计开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 统计结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TSF命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *GetTopFailureRateServicesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopFailureRateServicesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayNamespace struct {

	// 命名空间主键

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间编码

	NamespaceCode *string `json:"NamespaceCode,omitempty" name:"NamespaceCode"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 命名空间备注

	NamespaceDesc *string `json:"NamespaceDesc,omitempty" name:"NamespaceDesc"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 命名空间资源类型

	NamespaceResourceType *string `json:"NamespaceResourceType,omitempty" name:"NamespaceResourceType"`
	// 命名空间类型, DEF GLOBAL

	NamespaceType *string `json:"NamespaceType,omitempty" name:"NamespaceType"`
}

type DtsGroup struct {

	// 事务分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 事务分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 事务分组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 创建时间戳，UTC，精确到毫秒

	CreationTime *int64 `json:"CreationTime,omitempty" name:"CreationTime"`
	// 更新时间戳，UTC，精确到毫秒

	LastUpdateTime *int64 `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 删除标识，true：可以删除；false：不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
}

type KafkaDeliveryConfig struct {

	// 配置项id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 采集路径

	CollectPath []*string `json:"CollectPath,omitempty" name:"CollectPath"`
	// kafka vip

	KafkaVIp *string `json:"KafkaVIp,omitempty" name:"KafkaVIp"`
	// kafka vport

	KafkaVPort *string `json:"KafkaVPort,omitempty" name:"KafkaVPort"`
	// kafka topic

	Topic *string `json:"Topic,omitempty" name:"Topic"`
	// 换行规则

	LineRule *string `json:"LineRule,omitempty" name:"LineRule"`
	// 是否需要认证

	EnableAuth *bool `json:"EnableAuth,omitempty" name:"EnableAuth"`
	// 用户名

	Username *string `json:"Username,omitempty" name:"Username"`
	// 密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// 投递的topic和path

	KafkaInfos []*DeliveryKafkaInfo `json:"KafkaInfos,omitempty" name:"KafkaInfos"`
	// 是否应用单行规则

	EnableGlobalLineRule *bool `json:"EnableGlobalLineRule,omitempty" name:"EnableGlobalLineRule"`
	// 自定义分行规则

	CustomRule *string `json:"CustomRule,omitempty" name:"CustomRule"`
	// KafkaAddress

	KafkaAddress *string `json:"KafkaAddress,omitempty" name:"KafkaAddress"`
}

type ShirkNamespaceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 移除成功或失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ShirkNamespaceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShirkNamespaceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除成功or失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageTagsResult struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 仓库名,含命名空间,如tsf/ngin

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 镜像服务器地址

	Server *string `json:"Server,omitempty" name:"Server"`
	// 列表信息

	Content []*ImageTag `json:"Content,omitempty" name:"Content"`
}

type DescribeClusterInstancesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 是否只查询EKS超级节点(容器集群)

	OnlyEKS *bool `json:"OnlyEKS,omitempty" name:"OnlyEKS"`
}

func (r *DescribeClusterInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyRouteRuleRequest struct {
	*tchttp.BaseRequest

	// 路由规则Id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
	// 路由规则名称

	RouteRuleName *string `json:"RouteRuleName,omitempty" name:"RouteRuleName"`
	// 路由规则描述

	RouteRuleDesc *string `json:"RouteRuleDesc,omitempty" name:"RouteRuleDesc"`
	// 标签路由规则项

	TagRouteItemList []*TagRouteItemList `json:"TagRouteItemList,omitempty" name:"TagRouteItemList"`
	// 权重路由规则项

	WeightRouteItemList []*WeightRouteItemList `json:"WeightRouteItemList,omitempty" name:"WeightRouteItemList"`
}

func (r *ModifyRouteRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyRouteRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskExecuteHistoryRecord struct {

	// 执行流水ID

	ExecuteLogId *string `json:"ExecuteLogId,omitempty" name:"ExecuteLogId"`
	// 执行ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
	// 任务执行分组

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 实例执行状态

	State *string `json:"State,omitempty" name:"State"`
	// 触发方式

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 开始时间

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
	// 超时时间

	TimeOut *int64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 执行日志

	ExecuteLog *string `json:"ExecuteLog,omitempty" name:"ExecuteLog"`
	// 历史执行次数

	HistoryCount *int64 `json:"HistoryCount,omitempty" name:"HistoryCount"`
	// 分片Key

	ShardKey *uint64 `json:"ShardKey,omitempty" name:"ShardKey"`
}

type DescribeDeployGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeDeployGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeployGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventDetailRequest struct {
	*tchttp.BaseRequest

	// 查询开始时间。格式为 yyyy-MM-dd HH:mm:ss

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询结束时间。格式为 yyyy-MM-dd HH:mm:ss

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 单页请求数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 事件过滤器

	Filters []*EventFilter `json:"Filters,omitempty" name:"Filters"`
	// 事件排序器

	Sorts []*EventSort `json:"Sorts,omitempty" name:"Sorts"`
}

func (r *DescribeEventDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableUnitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableUnitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableUnitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListMachinesRequest struct {
	*tchttp.BaseRequest

	// ModuleId

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
}

func (r *ListMachinesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListMachinesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterLimitResourceRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *DescribeClusterLimitResourceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterLimitResourceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyLaneRuleRequest struct {
	*tchttp.BaseRequest

	// 泳道规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 泳道规则名称

	RuleName *string `json:"RuleName,omitempty" name:"RuleName"`
	// 泳道规则备注

	Remark *string `json:"Remark,omitempty" name:"Remark"`
	// 泳道规则标签列表

	RuleTagList []*LaneRuleTag `json:"RuleTagList,omitempty" name:"RuleTagList"`
	// 泳道规则标签关系

	RuleTagRelationship *string `json:"RuleTagRelationship,omitempty" name:"RuleTagRelationship"`
	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 开启状态

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
}

func (r *ModifyLaneRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyLaneRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ClearResourceDataResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ClearResourceDataResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ClearResourceDataResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Microservice struct {

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务描述

	MicroserviceDesc *string `json:"MicroserviceDesc,omitempty" name:"MicroserviceDesc"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务的运行实例数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 微服务的离线实例数目

	CriticalInstanceCount *int64 `json:"CriticalInstanceCount,omitempty" name:"CriticalInstanceCount"`
}

type DescribeUnitRuleRequest struct {
	*tchttp.BaseRequest

	// 单元化规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DescribeUnitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiGroupInfo struct {

	// Api Group Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// Api Group 名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 分组上下文

	GroupContext *string `json:"GroupContext,omitempty" name:"GroupContext"`
	// 鉴权类型。 secret： 密钥鉴权； none:无鉴权

	AuthType *string `json:"AuthType,omitempty" name:"AuthType"`
	// 发布状态, drafted: 未发布。 released: 发布

	Status *string `json:"Status,omitempty" name:"Status"`
	// 分组创建时间 如:2019-06-20 15:51:28

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 分组更新时间 如:2019-06-20 15:51:28

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// api分组已绑定的网关部署组

	BindedGatewayDeployGroups []*GatewayDeployGroup `json:"BindedGatewayDeployGroups,omitempty" name:"BindedGatewayDeployGroups"`
	// api 个数

	ApiCount *int64 `json:"ApiCount,omitempty" name:"ApiCount"`
	// 访问group的ACL类型

	AclMode *string `json:"AclMode,omitempty" name:"AclMode"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 分组类型。 ms： 微服务分组； external:外部Api分组

	GroupType *string `json:"GroupType,omitempty" name:"GroupType"`
	// 网关实例的类型

	GatewayInstanceType *string `json:"GatewayInstanceType,omitempty" name:"GatewayInstanceType"`
	// 网关实例ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 命名空间参数key值

	NamespaceNameKey *string `json:"NamespaceNameKey,omitempty" name:"NamespaceNameKey"`
	// 微服务名参数key值

	ServiceNameKey *string `json:"ServiceNameKey,omitempty" name:"ServiceNameKey"`
	// 命名空间参数位置，path，header或query，默认是path

	NamespaceNameKeyPosition *string `json:"NamespaceNameKeyPosition,omitempty" name:"NamespaceNameKeyPosition"`
	// 微服务名参数位置，path，header或query，默认是path

	ServiceNameKeyPosition *string `json:"ServiceNameKeyPosition,omitempty" name:"ServiceNameKeyPosition"`
	// 无

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 无

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 无

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
}

type ContainerGroupResult struct {

	// 镜像版本列表

	Content []*ContainerGroup `json:"Content,omitempty" name:"Content"`
	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
}

type GetTopReqAmountInterfacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TopN条目列表

		Result []*StatisticsEntry `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTopReqAmountInterfacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopReqAmountInterfacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyApplicationRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用备注

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 应用备注名

	ApplicationRemarkName *string `json:"ApplicationRemarkName,omitempty" name:"ApplicationRemarkName"`
	// 服务配置信息列表

	ServiceConfigList []*ServiceConfig `json:"ServiceConfigList,omitempty" name:"ServiceConfigList"`
}

func (r *ModifyApplicationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyApplicationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConfigReleaseLogV2 struct {

	// 配置项发布日志ID

	ConfigReleaseLogId *string `json:"ConfigReleaseLogId,omitempty" name:"ConfigReleaseLogId"`
	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 发布时间

	ReleaseTime *string `json:"ReleaseTime,omitempty" name:"ReleaseTime"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
	// 发布状态

	ReleaseStatus *string `json:"ReleaseStatus,omitempty" name:"ReleaseStatus"`
	// 上次发布的配置项ID

	LastConfigId *string `json:"LastConfigId,omitempty" name:"LastConfigId"`
	// 上次发布的配置项名称

	LastConfigName *string `json:"LastConfigName,omitempty" name:"LastConfigName"`
	// 上次发布的配置项版本

	LastConfigVersion *string `json:"LastConfigVersion,omitempty" name:"LastConfigVersion"`
	// 回滚标识

	RollbackFlag *bool `json:"RollbackFlag,omitempty" name:"RollbackFlag"`
}

type DisableNamespaceAffinityRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *DisableNamespaceAffinityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableNamespaceAffinityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConfigV2 struct {

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 配置项版本描述

	ConfigVersionDesc *string `json:"ConfigVersionDesc,omitempty" name:"ConfigVersionDesc"`
	// 配置项值

	ConfigValue *string `json:"ConfigValue,omitempty" name:"ConfigValue"`
	// 配置项类型

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
	// 创建时间

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 删除标识，true：可以删除；false：不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 最后更新时间

	LastUpdateTime *string `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 配置项版本数量

	ConfigVersionCount *int64 `json:"ConfigVersionCount,omitempty" name:"ConfigVersionCount"`
}

type ConfigRelease struct {

	// 配置项发布ID

	ConfigReleaseId *string `json:"ConfigReleaseId,omitempty" name:"ConfigReleaseId"`
	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 发布时间

	ReleaseTime *string `json:"ReleaseTime,omitempty" name:"ReleaseTime"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

type CreateRepositoryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 创建仓库是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateRepositoryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRepositoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRatelimitResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功与否

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteRatelimitResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRatelimitResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterLimitResourceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群剩余资源

		Result *ClusterLimitResourceV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterLimitResourceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterLimitResourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 业务日志列表

		Result *TsfPageBusinessLogV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchOssBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCloudMonitorGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署组分页信息

		Result *TsfPageMonitorGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeCloudMonitorGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCloudMonitorGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListManagerJobLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 无

		Result *ManagerJobLogPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListManagerJobLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListManagerJobLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRegionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// reult

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteRegionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRegionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployContainerGroupByYamlResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeployContainerGroupByYamlResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployContainerGroupByYamlResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstanceMetrics struct {

	// 节点Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 节点名称

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// CPU使用量（单位为核）

	CpuUsed *MetricAttribute `json:"CpuUsed,omitempty" name:"CpuUsed"`
	// CPU利用率（%）

	CpuUsage *MetricAttribute `json:"CpuUsage,omitempty" name:"CpuUsage"`
	// CPU核数

	CpuCores *MetricAttribute `json:"CpuCores,omitempty" name:"CpuCores"`
	// 内存使用量

	MemoryUsed *MetricAttribute `json:"MemoryUsed,omitempty" name:"MemoryUsed"`
	// 内存利用率（%）

	MemoryUsage *MetricAttribute `json:"MemoryUsage,omitempty" name:"MemoryUsage"`
	// 活动线程数

	ActiveThreads *MetricAttribute `json:"ActiveThreads,omitempty" name:"ActiveThreads"`
	// NIO线程数

	NioThreads *MetricAttribute `json:"NioThreads,omitempty" name:"NioThreads"`
	// 总线程数

	TotalThreads *MetricAttribute `json:"TotalThreads,omitempty" name:"TotalThreads"`
	// 连接数

	Connection *MetricAttribute `json:"Connection,omitempty" name:"Connection"`
	// 入流量（单位为MB)

	InboundTraffic *MetricAttribute `json:"InboundTraffic,omitempty" name:"InboundTraffic"`
	// 网络I/O（单位为KB/S）

	Network *MetricAttribute `json:"Network,omitempty" name:"Network"`
	// 守护线程数

	DaemonThreads *MetricAttribute `json:"DaemonThreads,omitempty" name:"DaemonThreads"`
}

type TsfPageLicenseTag struct {

	// 记录总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*LicenseTag `json:"Content,omitempty" name:"Content"`
}

type CreateApiRateLimitRuleRequest struct {
	*tchttp.BaseRequest

	// Api Id

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// 开启/禁用，enabled/disabled, 不传默认开启

	UsableStatus *string `json:"UsableStatus,omitempty" name:"UsableStatus"`
	// qps值

	MaxQps *uint64 `json:"MaxQps,omitempty" name:"MaxQps"`
}

func (r *CreateApiRateLimitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateApiRateLimitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNodeMonitorRequest struct {
	*tchttp.BaseRequest

	// 查询的模块id

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// 时间粒度

	TimeGranularity *string `json:"TimeGranularity,omitempty" name:"TimeGranularity"`
	// 查询数据起始时间

	From *string `json:"From,omitempty" name:"From"`
	// 查询数据结束时间

	To *string `json:"To,omitempty" name:"To"`
	// 查询的节点机器Ip

	MachineIp *string `json:"MachineIp,omitempty" name:"MachineIp"`
}

func (r *DescribeNodeMonitorRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNodeMonitorRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseConfigRequest struct {
	*tchttp.BaseRequest

	// 配置ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
}

func (r *ReleaseConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageInvocationStatisticsV2 struct {

	// 总数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 内容列表

	Content []*InvocationStatisticsV2 `json:"Content,omitempty" name:"Content"`
}

type ModifyContainerReplicasResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyContainerReplicasResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyContainerReplicasResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartBuildTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 启动是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StartBuildTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartBuildTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AlarmOverviewContent struct {

	// 展示给前端的告警记录的指标名

	MetricName *string `json:"MetricName,omitempty" name:"MetricName"`
	// 该告警指标24小时内，已恢复的告警条数

	RestoredNums *int64 `json:"RestoredNums,omitempty" name:"RestoredNums"`
	// 该告警指标24小时内，未恢复的告警条数

	UnRestoredNums *int64 `json:"UnRestoredNums,omitempty" name:"UnRestoredNums"`
}

type CreateReleaseRequest struct {
	*tchttp.BaseRequest

	// 发布单名称

	ReleaseName *string `json:"ReleaseName,omitempty" name:"ReleaseName"`
	// 发布单类型 single

	ReleaseType *string `json:"ReleaseType,omitempty" name:"ReleaseType"`
	// 触发类型 manual, timer

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 触发配置，手动触发时，可以不填

	TriggerConfig *string `json:"TriggerConfig,omitempty" name:"TriggerConfig"`
	// 添加的数据集列表

	ProgramIds []*string `json:"ProgramIds,omitempty" name:"ProgramIds"`
	// 是否启用

	EnableStatus *bool `json:"EnableStatus,omitempty" name:"EnableStatus"`
}

func (r *CreateReleaseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateReleaseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Program struct {

	// 数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// 数据集名称

	ProgramName *string `json:"ProgramName,omitempty" name:"ProgramName"`
	// 数据集描述

	ProgramDesc *string `json:"ProgramDesc,omitempty" name:"ProgramDesc"`
	// 删除标识，true: 可以删除; false: 不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 创建时间

	CreationTime *int64 `json:"CreationTime,omitempty" name:"CreationTime"`
	// 最后更新时间

	LastUpdateTime *int64 `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 数据项列表，无值时返回空数组

	ProgramItemList []*ProgramItem `json:"ProgramItemList,omitempty" name:"ProgramItemList"`
}

type ContainerVolumeOption struct {

	// 无

	ConfigMap []*VolumeItem `json:"ConfigMap,omitempty" name:"ConfigMap"`
	// 无

	Secret []*VolumeItem `json:"Secret,omitempty" name:"Secret"`
	// 无

	PersistentVolumeClaim []*VolumeItem `json:"PersistentVolumeClaim,omitempty" name:"PersistentVolumeClaim"`
}

type ImageTagsResultV2 struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 仓库名,含命名空间,如tsf/ngin

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像服务器地址

	Server *string `json:"Server,omitempty" name:"Server"`
	// 列表信息

	Content []*ImageTag `json:"Content,omitempty" name:"Content"`
}

type TsfPageBillingOperationRecord struct {

	// 记录总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*BillingOperationRecord `json:"Content,omitempty" name:"Content"`
}

type CreateGatewayQQMiniProgramLoginPluginRequest struct {
	*tchttp.BaseRequest

	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
	// 插件类型 "QQMiniProgramLogin"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// QQ小程序AppId

	QqAppId *string `json:"QqAppId,omitempty" name:"QqAppId"`
	// QQ小程序AppSecret

	QqAppSecret *string `json:"QqAppSecret,omitempty" name:"QqAppSecret"`
	// 小程序请求code携带位置：header/cookie

	RequestCodeBaggagePosition *string `json:"RequestCodeBaggagePosition,omitempty" name:"RequestCodeBaggagePosition"`
	// 自定义登录态参数名

	SessionKeyName *string `json:"SessionKeyName,omitempty" name:"SessionKeyName"`
	// 自定义登录态过期时间，单位：秒

	SessionExpireTime *int64 `json:"SessionExpireTime,omitempty" name:"SessionExpireTime"`
	// 前台业务请求自定义登录态参数位置：header/cookie

	RequestSessionBaggagePosition *string `json:"RequestSessionBaggagePosition,omitempty" name:"RequestSessionBaggagePosition"`
	// 向业务后台传输登录态参数位置：header/query/cookie

	BusinessSessionBaggagePosition *string `json:"BusinessSessionBaggagePosition,omitempty" name:"BusinessSessionBaggagePosition"`
	// 返回自定义登录态参数位置：header

	ResponseSessionBaggagePosition *string `json:"ResponseSessionBaggagePosition,omitempty" name:"ResponseSessionBaggagePosition"`
	// 元数据转标签配置的Json串

	MetaDataTagInfoList *string `json:"MetaDataTagInfoList,omitempty" name:"MetaDataTagInfoList"`
	// 自定义标签配置的Json串

	CustomizeTagInfoList *string `json:"CustomizeTagInfoList,omitempty" name:"CustomizeTagInfoList"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateGatewayQQMiniProgramLoginPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayQQMiniProgramLoginPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMeshSidecarVersionRequest struct {
	*tchttp.BaseRequest

	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeMeshSidecarVersionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMeshSidecarVersionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceAlarmResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回值

		Result []*AlarmInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeNamespaceAlarmResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceAlarmResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSubTasksResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 虚拟机子任务信息

		Result *TsfPageVmSubTask `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSubTasksResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSubTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisassociateKafkaConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 解除绑定是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisassociateKafkaConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisassociateKafkaConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ManagerJobInfo struct {

	// 无

	Id *int64 `json:"Id,omitempty" name:"Id"`
	// 无

	JobDesc *string `json:"JobDesc,omitempty" name:"JobDesc"`
	// 无

	ScheduleConf *string `json:"ScheduleConf,omitempty" name:"ScheduleConf"`
	// 无

	ExecutorParam *string `json:"ExecutorParam,omitempty" name:"ExecutorParam"`
	// 无

	ExecutorTimeout *int64 `json:"ExecutorTimeout,omitempty" name:"ExecutorTimeout"`
	// 无

	ExecutorFailRetryCount *int64 `json:"ExecutorFailRetryCount,omitempty" name:"ExecutorFailRetryCount"`
	// 无

	GlueSource *string `json:"GlueSource,omitempty" name:"GlueSource"`
	// 无

	TriggerStatus *int64 `json:"TriggerStatus,omitempty" name:"TriggerStatus"`
	// 无

	TriggerNextTime *int64 `json:"TriggerNextTime,omitempty" name:"TriggerNextTime"`
	// 无

	ModuleName *string `json:"ModuleName,omitempty" name:"ModuleName"`
}

type RedoTaskFlowBatchRequest struct {
	*tchttp.BaseRequest

	// 工作流批次 ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
}

func (r *RedoTaskFlowBatchRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RedoTaskFlowBatchRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageSimpleNamespace struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 元数据列表

	Content *SimpleNamespace `json:"Content,omitempty" name:"Content"`
}

type DescribeContainerVolumeOptionsRequest struct {
	*tchttp.BaseRequest

	// 无

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeContainerVolumeOptionsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerVolumeOptionsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayTagPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件信息列表

		Result *GatewayTagPlugin `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayTagPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayTagPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceAffinitiesRequest struct {
	*tchttp.BaseRequest

	// 命名空间列表

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
}

func (r *DescribeNamespaceAffinitiesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceAffinitiesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinessLogConfigV2 struct {

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项日志路径

	ConfigPath *string `json:"ConfigPath,omitempty" name:"ConfigPath"`
	// 配置项描述

	ConfigDesc *string `json:"ConfigDesc,omitempty" name:"ConfigDesc"`
	// 配置项标签

	ConfigTags *string `json:"ConfigTags,omitempty" name:"ConfigTags"`
	// 配置项对应的ES管道

	ConfigPipeline *string `json:"ConfigPipeline,omitempty" name:"ConfigPipeline"`
	// 配置项创建时间

	ConfigCreateTime *string `json:"ConfigCreateTime,omitempty" name:"ConfigCreateTime"`
	// 配置项更新时间

	ConfigUpdateTime *string `json:"ConfigUpdateTime,omitempty" name:"ConfigUpdateTime"`
	// 配置项解析规则

	ConfigSchema *BusinessLogConfigSchema `json:"ConfigSchema,omitempty" name:"ConfigSchema"`
	// 配置项关联部署组

	ConfigAssociatedGroups []*BusinesLogConfigAssociatedGroup `json:"ConfigAssociatedGroups,omitempty" name:"ConfigAssociatedGroups"`
}

type TsfPageMicroserviceGroup struct {

	// 数据总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 翻页数据

	Content []*MicroserviceGroup `json:"Content,omitempty" name:"Content"`
}

type DescribeContainerGroupYamlResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 容器部署组的 yaml 信息

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerGroupYamlResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupYamlResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigReleasesRequest struct {
	*tchttp.BaseRequest

	// 配置项名称，不传入时查询全量

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 命名空间ID，不传入时查询全量

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 配置项ID，不传入时查询全量

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DescribePublicConfigReleasesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigReleasesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeBillingOperationRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 计费运营端操作记录分页信息

		Result *TsfPageBillingOperationRecord `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeBillingOperationRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBillingOperationRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BillingOperationIsolateRequest struct {
	*tchttp.BaseRequest

	// 计费租户ID

	BillingAppId *string `json:"BillingAppId,omitempty" name:"BillingAppId"`
	// 计费账号ID

	BillingUin *string `json:"BillingUin,omitempty" name:"BillingUin"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

func (r *BillingOperationIsolateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationIsolateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApisWithPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API分组信息列表

		Result *TsfPageApiDetailInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApisWithPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApisWithPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeStatisticsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询服务统计结果

		Result *ServiceStatisticsResults `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeStatisticsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayPlugin struct {

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 创建时间

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 更新时间

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 发布状态

	Status *string `json:"Status,omitempty" name:"Status"`
}

type AdjustProductHelpPriorityRequest struct {
	*tchttp.BaseRequest

	// id数组

	IdList []*string `json:"IdList,omitempty" name:"IdList"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

func (r *AdjustProductHelpPriorityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AdjustProductHelpPriorityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskBatchRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 翻页查询结果

		Result *TaskBatchRecordPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskBatchRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskBatchRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableLaneRuleRequest struct {
	*tchttp.BaseRequest

	// 泳道规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DisableLaneRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableLaneRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SimpleKafkaDeliveryConfig struct {

	// 配置项id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 无

	KafkaAddress *string `json:"KafkaAddress,omitempty" name:"KafkaAddress"`
	// 无

	KafkaVIp *string `json:"KafkaVIp,omitempty" name:"KafkaVIp"`
	// 无

	KafkaVPort *string `json:"KafkaVPort,omitempty" name:"KafkaVPort"`
	// 无

	LineRule *string `json:"LineRule,omitempty" name:"LineRule"`
	// 无

	CustomRule *string `json:"CustomRule,omitempty" name:"CustomRule"`
	// 无

	EnableGlobalLineRule *bool `json:"EnableGlobalLineRule,omitempty" name:"EnableGlobalLineRule"`
	// 无

	KafkaInfos []*DeliveryKafkaInfo `json:"KafkaInfos,omitempty" name:"KafkaInfos"`
	// 无

	EnableAuth *bool `json:"EnableAuth,omitempty" name:"EnableAuth"`
	// 无

	Username *string `json:"Username,omitempty" name:"Username"`
	// 无

	Password *string `json:"Password,omitempty" name:"Password"`
}

type DescribeApplicationInstancesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeApplicationInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCommonPkgResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 公共包信息

		Result *TsfPageCommonPkg `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeCommonPkgResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCommonPkgResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UnbindPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UnbindPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UnbindPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RouteRule struct {

	// 路由规则Id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
	// 路由规则名称

	RouteRuleName *string `json:"RouteRuleName,omitempty" name:"RouteRuleName"`
	// 路由规则类型，包括标签路由和权重标签，标签路由： T , 权重路由： W

	RouteRuleType *string `json:"RouteRuleType,omitempty" name:"RouteRuleType"`
	// 路由规则描述信息

	RouteRuleDesc *string `json:"RouteRuleDesc,omitempty" name:"RouteRuleDesc"`
	// 微服务Id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// true/false，true：路由规则为启用状态， false：路由规则为停用状态

	EnableStatus *bool `json:"EnableStatus,omitempty" name:"EnableStatus"`
	// 路由规则创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 路由规则更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 标签路由规则项信息

	TagRouteItemList []*TagRouteItemList `json:"TagRouteItemList,omitempty" name:"TagRouteItemList"`
	// 权重路由规则项信息

	WeightRouteItemList []*WeightRouteItemList `json:"WeightRouteItemList,omitempty" name:"WeightRouteItemList"`
	// 微服务所属命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
}

type DescribeAuthorizationsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页的微服务权限规则列表

		Result *TsfPageAuthRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAuthorizationsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopAvgTimeCostInterfacesRequest struct {
	*tchttp.BaseRequest

	// 列表条目数量，取值范围[1, 50]，默认值10

	Count *uint64 `json:"Count,omitempty" name:"Count"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 统计开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 统计结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TSF命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// TSF微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
}

func (r *GetTopAvgTimeCostInterfacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopAvgTimeCostInterfacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseProductHelpResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleaseProductHelpResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseProductHelpResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InvocationStatisticsV2 struct {

	// 调用统计名称

	InvocationStatisticsName *string `json:"InvocationStatisticsName,omitempty" name:"InvocationStatisticsName"`
	// 请求总数

	InvocationSumQuantity *int64 `json:"InvocationSumQuantity,omitempty" name:"InvocationSumQuantity"`
	// 请求平均耗时，单位毫秒

	InvocationAvgDuration *float64 `json:"InvocationAvgDuration,omitempty" name:"InvocationAvgDuration"`
	// 2xx状态码响应请求数

	Invocation2xxStatusQuantity *int64 `json:"Invocation2xxStatusQuantity,omitempty" name:"Invocation2xxStatusQuantity"`
	// 4xx状态码响应请求数

	Invocation4xxStatusQuantity *int64 `json:"Invocation4xxStatusQuantity,omitempty" name:"Invocation4xxStatusQuantity"`
	// 5xx状态码响应请求数

	Invocation5xxStatusQuantity *int64 `json:"Invocation5xxStatusQuantity,omitempty" name:"Invocation5xxStatusQuantity"`
	// 其它状态码响应请求数

	InvocationOtherStatusQuantity *int64 `json:"InvocationOtherStatusQuantity,omitempty" name:"InvocationOtherStatusQuantity"`
	// 连接失败请求数

	InvocationConnectFailedQuantity *int64 `json:"InvocationConnectFailedQuantity,omitempty" name:"InvocationConnectFailedQuantity"`
	// 超时请求数

	InvocationTimeoutQuantity *int64 `json:"InvocationTimeoutQuantity,omitempty" name:"InvocationTimeoutQuantity"`
	// 服务不可用请求数

	InvocationUnavailableQuantity *int64 `json:"InvocationUnavailableQuantity,omitempty" name:"InvocationUnavailableQuantity"`
	// 请求数占比

	InvocationQuantityProportion *float64 `json:"InvocationQuantityProportion,omitempty" name:"InvocationQuantityProportion"`
}

type DescribeGCLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分析GC日志结果以及相关信息

		Result *GCLogData `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGCLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGCLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RunReleaseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 执行动作是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RunReleaseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RunReleaseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ValueFrom struct {

	// k8s env 的 FieldRef

	FieldRef *FieldRef `json:"FieldRef,omitempty" name:"FieldRef"`
	// k8s env 的 ResourceFieldRef

	ResourceFieldRef *ResourceFieldRef `json:"ResourceFieldRef,omitempty" name:"ResourceFieldRef"`
}

type MicroserviceWrong struct {

	// 微服务Id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 描述

	MicroserviceDesc *string `json:"MicroserviceDesc,omitempty" name:"MicroserviceDesc"`
	// 类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 关联的应用 ID

	AssociateApplicationId *string `json:"AssociateApplicationId,omitempty" name:"AssociateApplicationId"`
	// 协议

	MicroserviceProtocol *string `json:"MicroserviceProtocol,omitempty" name:"MicroserviceProtocol"`
	// 监听端口

	MicroserviceListeningPort *int64 `json:"MicroserviceListeningPort,omitempty" name:"MicroserviceListeningPort"`
	// 健康检查参数

	HealthCheckUrl *string `json:"HealthCheckUrl,omitempty" name:"HealthCheckUrl"`
	// 集群类型

	ServiceClustertype *string `json:"ServiceClustertype,omitempty" name:"ServiceClustertype"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务的运行实例数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 关联的应用详情

	AssociateApplication *MsApplication `json:"AssociateApplication,omitempty" name:"AssociateApplication"`
}

type DeleteGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DeleteGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeliveryConfigsRequest struct {
	*tchttp.BaseRequest

	// 关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 搜索条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeDeliveryConfigsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeliveryConfigsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerTasksResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询任务列表对象

		Result *DescribeContainerTasksResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerTasksResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableUnitRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableUnitRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableUnitRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyZoneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyZoneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyZoneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ProtocolPortsV2 struct {

	// TCP UDP

	Protocol *string `json:"Protocol,omitempty" name:"Protocol"`
	// 服务端口

	Port *int64 `json:"Port,omitempty" name:"Port"`
	// 容器端口

	TargetPort *int64 `json:"TargetPort,omitempty" name:"TargetPort"`
	// 主机端口

	NodePort *int64 `json:"NodePort,omitempty" name:"NodePort"`
}

type CreateConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 配置项版本描述

	ConfigVersionDesc *string `json:"ConfigVersionDesc,omitempty" name:"ConfigVersionDesc"`
	// 配置项值

	ConfigValue *string `json:"ConfigValue,omitempty" name:"ConfigValue"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 配置项值类型

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
	// Base64编码的配置项

	EncodeWithBase64 *bool `json:"EncodeWithBase64,omitempty" name:"EncodeWithBase64"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreatePolicyDocumentResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 策略文档

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreatePolicyDocumentResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreatePolicyDocumentResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInterfaceListRequest struct {
	*tchttp.BaseRequest

	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 每页的数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribeInterfaceListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInterfaceListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRegionsRequest struct {
	*tchttp.BaseRequest

	// TRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
	// TRegionName

	TRegionName *string `json:"TRegionName,omitempty" name:"TRegionName"`
}

func (r *DescribeRegionsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRegionsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroserviceRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 可选，根据部署组ID进行过滤

	GroupIds []*string `json:"GroupIds,omitempty" name:"GroupIds"`
	// 过滤条件。多个 filter 之间是与关系，单个 filter 多个 value 之间是或关系。filter name 取值有：id（实例id）、name（实例名）、lan-ip（内网ip）、node-ip（所在节点ip）

	Filters []*Filter `json:"Filters,omitempty" name:"Filters"`
}

func (r *DescribeMicroserviceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AdvanceSettings struct {

	// 子任务单机并发数限制，默认值为2

	SubTaskConcurrency *int64 `json:"SubTaskConcurrency,omitempty" name:"SubTaskConcurrency"`
}

type TsfBusinessLog struct {

	// 时间戳，入参传入，若不为实时日志，可能为空

	RealtimeTs *uint64 `json:"RealtimeTs,omitempty" name:"RealtimeTs"`
	// 游标ID

	ScrollId *uint64 `json:"ScrollId,omitempty" name:"ScrollId"`
	// 容器日志输出列表

	BusinessLogSet []*BusinessLog `json:"BusinessLogSet,omitempty" name:"BusinessLogSet"`
}

type CancelHideInstanceRequest struct {
	*tchttp.BaseRequest

	// 注册实例ID

	RegistrationId *string `json:"RegistrationId,omitempty" name:"RegistrationId"`
	// 实例名

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 微服务名

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务ID （ms-xxx）

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *CancelHideInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CancelHideInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListScalableRuleResultV2 struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*ScalableRule `json:"Content,omitempty" name:"Content"`
}

type RemoveInstancesRequest struct {
	*tchttp.BaseRequest

	// 集群 ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 云主机 ID 列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
}

func (r *RemoveInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RemoveInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetBuildTaskFailedRequest struct {
	*tchttp.BaseRequest

	// 构建任务id

	BuildTaskId *string `json:"BuildTaskId,omitempty" name:"BuildTaskId"`
	// 错误信息

	ErrorMessage *string `json:"ErrorMessage,omitempty" name:"ErrorMessage"`
}

func (r *SetBuildTaskFailedRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetBuildTaskFailedRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAbnormalMetricsConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回值

		Result []*AbnormalMetricsConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAbnormalMetricsConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAbnormalMetricsConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayAllGroupApisRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 搜索关键字，支持分组名称或API Path

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *DescribeGatewayAllGroupApisRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayAllGroupApisRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUsableGatewayGroupsRequest struct {
	*tchttp.BaseRequest

	// API分组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页记录数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeUsableGatewayGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUsableGatewayGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupOtherRequest struct {
	*tchttp.BaseRequest

	// 部署组ID字段

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeGroupOtherRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupOtherRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperateManagerJobResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 无

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *OperateManagerJobResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *OperateManagerJobResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// 业务日志配置ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 业务日志配置名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 业务日志配置路径

	ConfigPath *string `json:"ConfigPath,omitempty" name:"ConfigPath"`
	// 业务日志配置描述

	ConfigDesc *string `json:"ConfigDesc,omitempty" name:"ConfigDesc"`
	// 业务日志配置标签

	ConfigTags *string `json:"ConfigTags,omitempty" name:"ConfigTags"`
	// 业务日志配置解析规则

	ConfigSchema *BusinessLogConfigSchema `json:"ConfigSchema,omitempty" name:"ConfigSchema"`
}

func (r *UpdateBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ThreadDetails struct {

	// 线程详情列表

	Data []*ThreadDetail `json:"Data,omitempty" name:"Data"`
	// 接口执行状态success/error

	Status *string `json:"Status,omitempty" name:"Status"`
	// success时为"", error时为错误信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// success时为, error时为错误码

	StatusCode *int64 `json:"StatusCode,omitempty" name:"StatusCode"`
}

type DeleteRepositoryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除仓库是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteRepositoryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRepositoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInstanceReleasedConfigRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 实例ID，虚机是 ins-xxx，容器是 pod name

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeInstanceReleasedConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceReleasedConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateLaneGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateLaneGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateLaneGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerNamespacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 命名空间结果

		Result *KubeNamespacePage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerNamespacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerNamespacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePathRewritesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路径重写翻页对象

		Result *PathRewritePage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePathRewritesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePathRewritesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InvocationIndicator struct {

	// 总请求数

	InvocationQuantity *int64 `json:"InvocationQuantity,omitempty" name:"InvocationQuantity"`
	// 请求成功率，百分比

	InvocationSuccessRate *float64 `json:"InvocationSuccessRate,omitempty" name:"InvocationSuccessRate"`
	// 请求平均耗时，单位毫秒

	InvocationAvgDuration *float64 `json:"InvocationAvgDuration,omitempty" name:"InvocationAvgDuration"`
	// 成功请求数时间分布

	InvocationSuccessDistribution []*IndicatorCoord `json:"InvocationSuccessDistribution,omitempty" name:"InvocationSuccessDistribution"`
	// 失败请求数时间分布

	InvocationFailedDistribution []*IndicatorCoord `json:"InvocationFailedDistribution,omitempty" name:"InvocationFailedDistribution"`
	// 状态码分布

	InvocationStatusDistribution []*IndicatorCoord `json:"InvocationStatusDistribution,omitempty" name:"InvocationStatusDistribution"`
	// 时延分布

	InvocationDurationDistribution []*IndicatorCoord `json:"InvocationDurationDistribution,omitempty" name:"InvocationDurationDistribution"`
	// 并发请求次数时间分布

	InvocationQuantityDistribution []*IndicatorCoord `json:"InvocationQuantityDistribution,omitempty" name:"InvocationQuantityDistribution"`
}

type ContinueRunFailedTaskBatchResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功或失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ContinueRunFailedTaskBatchResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ContinueRunFailedTaskBatchResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAuthNamespacesRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeAuthNamespacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthNamespacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MicroserviceExtra struct {

	// 微服务 ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 描述

	MicroserviceDesc *string `json:"MicroserviceDesc,omitempty" name:"MicroserviceDesc"`
	// 类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 关联的应用 ID

	AssociateApplicationId *string `json:"AssociateApplicationId,omitempty" name:"AssociateApplicationId"`
	// 协议

	MicroserviceProtocol *string `json:"MicroserviceProtocol,omitempty" name:"MicroserviceProtocol"`
	// 监听端口

	MicroserviceListeningPort *int64 `json:"MicroserviceListeningPort,omitempty" name:"MicroserviceListeningPort"`
	// 健康检查参数

	HealthCheckUrl *string `json:"HealthCheckUrl,omitempty" name:"HealthCheckUrl"`
	// 集群类型

	ServiceClustertype *string `json:"ServiceClustertype,omitempty" name:"ServiceClustertype"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群 ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
}

type DescribeTaskExecuteHistoryRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 执行记录的流水

		Result *TaskExecuteHistoryRecordPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskExecuteHistoryRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteHistoryRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyUploadInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyUploadInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyUploadInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceConfigResult struct {

	// Sts

	Sts *DescribeResourceConfigSts `json:"Sts,omitempty" name:"Sts"`
	// License

	License *DescribeResourceConfigLicense `json:"License,omitempty" name:"License"`
}

type AssociateBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// 日志配置项ID列表

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
	// TSF分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *AssociateBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AssociateBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageCommonPkg struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 公共包信息

	Content []*CommonPkg `json:"Content,omitempty" name:"Content"`
}

type DeleteRoleRequest struct {
	*tchttp.BaseRequest

	// 角色ID

	RoleId *string `json:"RoleId,omitempty" name:"RoleId"`
}

func (r *DeleteRoleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRoleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type HealthCheckConfig struct {

	// 健康检查路径

	Path *string `json:"Path,omitempty" name:"Path"`
}

type Release struct {

	// 发布单名称

	ReleaseName *string `json:"ReleaseName,omitempty" name:"ReleaseName"`
	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 发布单类型

	ReleaseType *string `json:"ReleaseType,omitempty" name:"ReleaseType"`
	// 触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 触发配置

	TriggerConfig *string `json:"TriggerConfig,omitempty" name:"TriggerConfig"`
	// 任务数

	TaskCount *int64 `json:"TaskCount,omitempty" name:"TaskCount"`
	// 数据集列表

	ProgramIds []*string `json:"ProgramIds,omitempty" name:"ProgramIds"`
	// 发布单状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 开始时间

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
	// 主帐号

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 子帐号

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// 子帐号昵称

	Nickname *string `json:"Nickname,omitempty" name:"Nickname"`
	// 是否启用

	EnableStatus *string `json:"EnableStatus,omitempty" name:"EnableStatus"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
}

type DtsAuth struct {

	// 事务分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 租户ID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 主账号ID

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 子账号ID

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type LicenseResource struct {

	// 资源名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 配额

	Quota *uint64 `json:"Quota,omitempty" name:"Quota"`
}

type DescribeCircuitBreakerRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 熔断规则

		Result *CircuitBreakerRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeCircuitBreakerRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCircuitBreakerRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceAlarmRequest struct {
	*tchttp.BaseRequest

	// 命名空间id数组

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
}

func (r *DescribeNamespaceAlarmRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceAlarmRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeImageUserIsExistsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询到的信息

		Result *ImageUserIsExistsResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeImageUserIsExistsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImageUserIsExistsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroservicesByAssociateApplicationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务列表

		Result []*MicroserviceExtra `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroservicesByAssociateApplicationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroservicesByAssociateApplicationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeScalableRuleAttributeByGroupRequest struct {
	*tchttp.BaseRequest

	// 应用id;

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeScalableRuleAttributeByGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeScalableRuleAttributeByGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyGroupLaneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyGroupLaneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyGroupLaneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type IndicesPageContent struct {

	// 内容

	Content []*IndicesPageInfo `json:"Content,omitempty" name:"Content"`
	// 数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
}

type CreateApiGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API分组ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateApiGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateApiGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteImageTagRequest struct {
	*tchttp.BaseRequest

	// （优先使用）仓库名，如/tsf/nginx

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 版本号:如V1

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 旧版仓库名

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 企业: tcr ；个人: personal或者不填

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
}

func (r *DeleteImageTagRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteImageTagRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceAffinitiesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 就近访问策略列表

		Result *TsfPageRouteAffinity `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeNamespaceAffinitiesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceAffinitiesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyAlarmPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyAlarmPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyAlarmPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayWeChatMiniProgramLoginPlugin struct {

	// 网关插件ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件创建时间 如:2019-06-20 15:51:28

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 插件更新时间 如:2019-06-20 15:51:28

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
	// 微信小程序AppId

	WeChatAppId *string `json:"WeChatAppId,omitempty" name:"WeChatAppId"`
	// 微信小程序请求code携带位置：header/cookie

	RequestCodeBaggagePosition *string `json:"RequestCodeBaggagePosition,omitempty" name:"RequestCodeBaggagePosition"`
	// 自定义登录态参数名

	SessionKeyName *string `json:"SessionKeyName,omitempty" name:"SessionKeyName"`
	// 自定义登录态过期时间，单位：秒

	SessionExpireTime *int64 `json:"SessionExpireTime,omitempty" name:"SessionExpireTime"`
	// 前台业务请求自定义登录态参数位置：header/cookie

	RequestSessionBaggagePosition *string `json:"RequestSessionBaggagePosition,omitempty" name:"RequestSessionBaggagePosition"`
	// 向业务后台传输登录态参数位置：header/query/cookie

	BusinessSessionBaggagePosition *string `json:"BusinessSessionBaggagePosition,omitempty" name:"BusinessSessionBaggagePosition"`
	// 返回自定义登录态参数位置：header

	ResponseSessionBaggagePosition *string `json:"ResponseSessionBaggagePosition,omitempty" name:"ResponseSessionBaggagePosition"`
	// 元数据转标签配置的Json串

	MetaDataTagInfoList *string `json:"MetaDataTagInfoList,omitempty" name:"MetaDataTagInfoList"`
	// 自定义标签配置的Json串

	CustomizeTagInfoList *string `json:"CustomizeTagInfoList,omitempty" name:"CustomizeTagInfoList"`
}

type RatelimitListResult struct {

	// 总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表内容

	Content []*RatelimitRuleV2 `json:"Content,omitempty" name:"Content"`
}

type DeleteProductNewsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteProductNewsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteProductNewsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListTsfModuleInstancePortsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result []*PortsResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListTsfModuleInstancePortsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListTsfModuleInstancePortsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayPluginDefinition struct {

	// 网关插件定义id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件标签

	Tag *string `json:"Tag,omitempty" name:"Tag"`
	// 插件创建时间 如:2019-06-20 15:51:28

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 插件更新时间 如:2019-06-20 15:51:28

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 插件排序

	Order *int64 `json:"Order,omitempty" name:"Order"`
}

type CreateGatewayJwtPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关插件

		Result *GatewayPluginId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateGatewayJwtPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayJwtPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLicenseApplicationsRequest struct {
	*tchttp.BaseRequest

	// 列表起始偏移

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 单页数量上限

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 按被授予者名字搜索

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 未作废0；已作废1

	Status *int64 `json:"Status,omitempty" name:"Status"`
}

func (r *DescribeLicenseApplicationsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLicenseApplicationsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceMicroserviceCountResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回值

		Result *MicroserviceCount `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeNamespaceMicroserviceCountResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceMicroserviceCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApplicationsOtherResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 应用列表其它字段返回参数

		Result *ApplicationAttribute `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicationsOtherResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationsOtherResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTemplatesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段，模糊搜索ProjectName , BasePackage 字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序字段，默认为 LastTime 字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，默认为1：倒序排序，0：正序，1：倒序

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 查询偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeTemplatesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTemplatesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetContainGroupOtherRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *GetContainGroupOtherRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetContainGroupOtherRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetEnvoyCloseDebugRequest struct {
	*tchttp.BaseRequest

	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *SetEnvoyCloseDebugRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetEnvoyCloseDebugRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListColudMonitorStatisticsPolicyRequest struct {
	*tchttp.BaseRequest

	// 关键字搜索;

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 默认为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 默认为20

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// KeywordsId

	KeywordsId *string `json:"KeywordsId,omitempty" name:"KeywordsId"`
}

func (r *ListColudMonitorStatisticsPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListColudMonitorStatisticsPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchRealtimeBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 实时日志集合

		Result *RealtimeLogSet `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchRealtimeBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchRealtimeBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListContainerTaskRequest struct {
	*tchttp.BaseRequest

	// 搜索字段，模糊搜索taskId字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 操作列表所属applicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 任务执行时间范围，格式："2017-10-01 10:03:27"

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 任务执行时间范围，格式："2017-11-01 10:03:27"

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 排序字段，默认为updateTime（修改时间字段）， 支持id， createTime， updateTime

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，默认为1：倒序排序，0：正序，1：倒序

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ListContainerTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListContainerTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ZipkinAnnotation struct {

	// 注解值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 注解时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 注解端点信息

	Endpoint *ZipkinEndPoint `json:"Endpoint,omitempty" name:"Endpoint"`
}

type CreateFileConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：创建成功；false：创建失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateFileConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateFileConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInstanceMetricsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 节点监控信息

		Result *InstanceSummary `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInstanceMetricsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceMetricsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 全局配置

		Result *Config `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePublicConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeViewsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回值

		Result []*ViewInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeViewsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeViewsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListAlarmPoliciesResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*AlarmPolicyResult `json:"Content,omitempty" name:"Content"`
}

type GetConfigpropsRequest struct {
	*tchttp.BaseRequest

	// InstanceId

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// EndpointName

	EndpointName *string `json:"EndpointName,omitempty" name:"EndpointName"`
}

func (r *GetConfigpropsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetConfigpropsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyRoleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true: 更新成功；false: 更新失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyRoleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyRoleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateMicroserviceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 新增微服务是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateMicroserviceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMicroserviceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupRelease struct {

	// 程序包ID

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 程序包名

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 程序包版本

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 镜像名

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 镜像版本

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 已发布的全局配置列表

	PublicConfigReleaseList []*ConfigRelease `json:"PublicConfigReleaseList,omitempty" name:"PublicConfigReleaseList"`
	// 已发布的应用配置列表

	ConfigReleaseList []*ConfigRelease `json:"ConfigReleaseList,omitempty" name:"ConfigReleaseList"`
	// 已发布的文件配置列表

	FileConfigReleaseList []*FileConfigRelease `json:"FileConfigReleaseList,omitempty" name:"FileConfigReleaseList"`
}

type DescribeTransactionsRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 事务查询开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 事务查询结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 事务状态

	Status *int64 `json:"Status,omitempty" name:"Status"`
}

func (r *DescribeTransactionsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTransactionsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetOssTopologyGraphResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务（节点）集合

		Result []*GraphNodeV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetOssTopologyGraphResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetOssTopologyGraphResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SimpleApplication struct {

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 应用微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// ApplicationDesc

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// ProgLang

	ProgLang *string `json:"ProgLang,omitempty" name:"ProgLang"`
	// ApplicationResourceType

	ApplicationResourceType *string `json:"ApplicationResourceType,omitempty" name:"ApplicationResourceType"`
	// CreateTime

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// UpdateTime

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// ApigatewayServiceId

	ApigatewayServiceId *string `json:"ApigatewayServiceId,omitempty" name:"ApigatewayServiceId"`
	// ApplicationRuntimeType

	ApplicationRuntimeType *string `json:"ApplicationRuntimeType,omitempty" name:"ApplicationRuntimeType"`
	// ApplicationRemarkName

	ApplicationRemarkName *string `json:"ApplicationRemarkName,omitempty" name:"ApplicationRemarkName"`
}

type GroupInstanceUnified struct {

	// 实例的 appid

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 实例的 cluster id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 实例的 namespace id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 实例的 group id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 实例的 application id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 实例的 id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 实例的名字

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
}

type CreateProgramRequest struct {
	*tchttp.BaseRequest

	// 数据集名称

	ProgramName *string `json:"ProgramName,omitempty" name:"ProgramName"`
	// 数据集描述

	ProgramDesc *string `json:"ProgramDesc,omitempty" name:"ProgramDesc"`
	// 数据项列表，传入null或空数组时不新增

	ProgramItemList []*ProgramItem `json:"ProgramItemList,omitempty" name:"ProgramItemList"`
}

func (r *CreateProgramRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateProgramRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroserviceTotalInstanceCountResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务下所有部署组的总实例数

		Result *int64 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroserviceTotalInstanceCountResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceTotalInstanceCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerTasksResult struct {

	// 列表总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表内容

	Content []*ContainerTasks `json:"Content,omitempty" name:"Content"`
}

type CreateMicroserviceApiResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功：true；失败：false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateMicroserviceApiResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMicroserviceApiResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeBusinessLogConfigsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 业务日志配置列表

		Result *TsfPageBusinessLogConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeBusinessLogConfigsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBusinessLogConfigsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeliveryConfigByGroupIdRequest struct {
	*tchttp.BaseRequest

	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeDeliveryConfigByGroupIdRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeliveryConfigByGroupIdRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMsRunningApplicationsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务运行态分页应用列表

		Result *TsfPageMsRunningApplicationV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMsRunningApplicationsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMsRunningApplicationsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeImageRepositoryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询的权限数据对象

		Result *ImageRepositoryResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeImageRepositoryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImageRepositoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableLaneGroupEntranceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableLaneGroupEntranceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableLaneGroupEntranceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopReqAmountInterfacesRequest struct {
	*tchttp.BaseRequest

	// 列表条目数量，取值范围[1, 50]，默认值10

	Count *uint64 `json:"Count,omitempty" name:"Count"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 统计开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 统计结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TSF命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// TSF微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
}

func (r *GetTopReqAmountInterfacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopReqAmountInterfacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetUploadInfoRequest struct {
	*tchttp.BaseRequest

	// 无

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 无

	PkgName *string `json:"PkgName,omitempty" name:"PkgName"`
	// 无

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 无

	PkgType *string `json:"PkgType,omitempty" name:"PkgType"`
	// 无

	PkgDesc *string `json:"PkgDesc,omitempty" name:"PkgDesc"`
}

func (r *GetUploadInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetUploadInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCommonGroupAttributeRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeCommonGroupAttributeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCommonGroupAttributeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchRealtimeStdoutLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 实时日志集合

		Result *RealtimeLogSet `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchRealtimeStdoutLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchRealtimeStdoutLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageUserIsExistsResultV2 struct {

	// 用户是否存在

	Data *ImageUserIsExists `json:"Data,omitempty" name:"Data"`
}

type TsfPageUnitNamespace struct {

	// 记录总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*UnitNamespace `json:"Content,omitempty" name:"Content"`
}

type BatchTemplate struct {

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 程序包ID

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 镜像仓库名

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 镜像版本

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 是否允许应用配置

	EnableApplicationConfig *bool `json:"EnableApplicationConfig,omitempty" name:"EnableApplicationConfig"`
	// 是否先进行应用配置发布，再部署程序

	PriorApplicationConfig *bool `json:"PriorApplicationConfig,omitempty" name:"PriorApplicationConfig"`
	// 应用配置列表

	ApplicationConfigs []*ApplicationConfig `json:"ApplicationConfigs,omitempty" name:"ApplicationConfigs"`
	// 是否允许文件配置

	EnableFileConfig *bool `json:"EnableFileConfig,omitempty" name:"EnableFileConfig"`
	// 文件配置列表

	FileConfigs []*FileConfig `json:"FileConfigs,omitempty" name:"FileConfigs"`
	// 分批部署组列表

	BatchGroups []*BatchGroup `json:"BatchGroups,omitempty" name:"BatchGroups"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 包名

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 包版本

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 镜像仓库类型

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
}

type DescribeEnabledUnitRuleRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
}

func (r *DescribeEnabledUnitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEnabledUnitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BindGatewayInstanceProgramsRequest struct {
	*tchttp.BaseRequest

	// 要绑定的网关实体ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 需要绑定的数据集ID集合

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *BindGatewayInstanceProgramsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BindGatewayInstanceProgramsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindMonitorObjectResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果

		Result *Result `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *FindMonitorObjectResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindMonitorObjectResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TxError struct {

	// 错误码

	Code *string `json:"Code,omitempty" name:"Code"`
	// 错误信息

	Message *string `json:"Message,omitempty" name:"Message"`
}

type DeleteRoleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true: 删除成功；false: 删除失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteRoleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRoleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskBatchRecordsRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 翻页查询偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询单页数量

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 运行状态，支持次字段过滤

	State *string `json:"State,omitempty" name:"State"`
	// 搜索关键字，支持批次ID

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 任务分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 任务ID列表

	TaskIds []*string `json:"TaskIds,omitempty" name:"TaskIds"`
	// 批次类型

	BatchType *string `json:"BatchType,omitempty" name:"BatchType"`
	// 预触发时间最大值, 非必填

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 预触发时间最小值, 非必填

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 任务名称

	TaskName *string `json:"TaskName,omitempty" name:"TaskName"`
	// 工作流ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流名称

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
	// 任务批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 工作流批次ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 触发类型, N: 正常触发/ M:手工触发/ MR: 手动重试/ FR:失败重试

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
}

func (r *DescribeTaskBatchRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskBatchRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageFileConfigRelease struct {

	// 数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表

	Content []*FileConfigRelease `json:"Content,omitempty" name:"Content"`
}

type WeightRouteItemV2 struct {

	// 权重路由规则项ID

	WeightRouteId *string `json:"WeightRouteId,omitempty" name:"WeightRouteId"`
	// 权重路由，百分比数值

	SourcePercent *int64 `json:"SourcePercent,omitempty" name:"SourcePercent"`
	// 权重路由规则匹配目标字段

	TargetField *string `json:"TargetField,omitempty" name:"TargetField"`
	// 权重路由规则匹配目标取值

	TargetValue *string `json:"TargetValue,omitempty" name:"TargetValue"`
	// 权重路由规则所属路由ID

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
}

type MetricDataPointMap struct {

	// 总调用次数监控数据点集合

	SumReqAmount []*MetricDataPoint `json:"SumReqAmount,omitempty" name:"SumReqAmount"`
	// 平均错误率监控数据点集合

	AvgFailureRate []*MetricDataPoint `json:"AvgFailureRate,omitempty" name:"AvgFailureRate"`
	// 平均响应时间监控数据点集合

	AvgTimeCost []*MetricDataPoint `json:"AvgTimeCost,omitempty" name:"AvgTimeCost"`
}

type DescribeInstanceResourceUsageRequest struct {
	*tchttp.BaseRequest

	// 是否无视权限查询全租户的，默认 true

	All *bool `json:"All,omitempty" name:"All"`
}

func (r *DescribeInstanceResourceUsageRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceResourceUsageRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListGroupPodRequest struct {
	*tchttp.BaseRequest

	// 实例所属groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ListGroupPodRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListGroupPodRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 部署组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 部署组备注

	Alias *string `json:"Alias,omitempty" name:"Alias"`
}

func (r *ModifyGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EventStatisticsResult struct {

	// String

	Category *string `json:"Category,omitempty" name:"Category"`
	// 影响对象名

	Item *string `json:"Item,omitempty" name:"Item"`
	// 统计结果

	Content []*TsfEventAttribute `json:"Content,omitempty" name:"Content"`
}

type Metric struct {

	// 指标名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 指标计算方式

	Function *string `json:"Function,omitempty" name:"Function"`
}

type ThreadPicture struct {

	// 总线程数

	ThreadCount []*CurvePoint `json:"ThreadCount,omitempty" name:"ThreadCount"`
	// 活跃线程数

	ThreadActive []*CurvePoint `json:"ThreadActive,omitempty" name:"ThreadActive"`
	// 守护线程数

	DeamonThreadCount []*CurvePoint `json:"DeamonThreadCount,omitempty" name:"DeamonThreadCount"`
}

type DeleteProductHelpResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteProductHelpResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteProductHelpResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLaneRequest struct {
	*tchttp.BaseRequest

	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
}

func (r *DescribeLaneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroserviceMetasRequest struct {
	*tchttp.BaseRequest

	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeMicroserviceMetasRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceMetasRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyReleasePipelineTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 设置是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyReleasePipelineTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyReleasePipelineTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type JavaFlameGraph struct {

	// 火焰图Json,历史无采集成功的火焰图返回""

	FlameGraphData *string `json:"FlameGraphData,omitempty" name:"FlameGraphData"`
	// 火焰图创建时间,格式为(yyyy-MM-dd HH:mm:ss),历史无采集成功的火焰图返回""

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 火焰图采集时长,历史无采集成功的火焰图返回0

	Duration *int64 `json:"Duration,omitempty" name:"Duration"`
	// 调用成功success/调用失败error

	Status *string `json:"Status,omitempty" name:"Status"`
	// 调用成功为""/调用失败为对应失败信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// 调用成功为0/调用失败为对应的错误码

	StatusCode *int64 `json:"StatusCode,omitempty" name:"StatusCode"`
	// 采集类型

	Event *string `json:"Event,omitempty" name:"Event"`
	// 如果为"true"代表相关数据是压缩后的

	Compression *bool `json:"Compression,omitempty" name:"Compression"`
	// 压缩数据

	GzipData *string `json:"GzipData,omitempty" name:"GzipData"`
}

type MicroserviceSummary struct {

	// Id值

	Id *string `json:"Id,omitempty" name:"Id"`
	// Name值

	Name *string `json:"Name,omitempty" name:"Name"`
	// Type值

	Type *string `json:"Type,omitempty" name:"Type"`
	// UpdateTime值

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type CreateContainGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回创建成功的部署组ID，返回null表示失败

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateContainGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateContainGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateProductHelpResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateProductHelpResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateProductHelpResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDockerForUseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Docker使用指引

		Result *DockerForUse `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeDockerForUseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDockerForUseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ChangeSecretStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果

		Result *SecretKeyInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ChangeSecretStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ChangeSecretStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AppPkgListV2 struct {

	// 无

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 无

	Content []*AppPkgInfo `json:"Content,omitempty" name:"Content"`
}

type ModifyNamespaceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyNamespaceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyNamespaceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageReleaseTaskRun struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 任务执行信息列表

	Content []*ReleaseTaskRun `json:"Content,omitempty" name:"Content"`
}

type DeployInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务id

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeployInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeJvmLogsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// jvm日志详情列表

		Result *TsfJvmLogPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeJvmLogsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeJvmLogsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceTsfConfigRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeResourceTsfConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceTsfConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteMicroserviceMetasResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteMicroserviceMetasResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMicroserviceMetasResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ExecuteTaskRequest struct {
	*tchttp.BaseRequest

	// 任务 ID。

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *ExecuteTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExecuteTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LicenseProduct struct {

	// 产品名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 产品规格

	Spec *string `json:"Spec,omitempty" name:"Spec"`
	// 选配功能列表

	Function []*LicenseFunction `json:"Function,omitempty" name:"Function"`
	// 受限资源列表

	Resource []*LicenseResource `json:"Resource,omitempty" name:"Resource"`
}

type TsfPageReleaseRunInfo struct {

	// 执行信息总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 执行信息列表

	Content []*ReleaseRunInfo `json:"Content,omitempty" name:"Content"`
}

type CheckUploadInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CheckUploadInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckUploadInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRolesRequest struct {
	*tchttp.BaseRequest

	// 角色名称，不传入时查询全量

	RoleName *string `json:"RoleName,omitempty" name:"RoleName"`
	// 模糊查询，角色ID/角色名称/角色描述 字段，不传入时查询全量

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 每页数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribeRolesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRolesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务Id

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StartInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BillingOperationDestroyRequest struct {
	*tchttp.BaseRequest

	// 计费租户ID

	BillingAppId *string `json:"BillingAppId,omitempty" name:"BillingAppId"`
	// 计费账号ID

	BillingUin *string `json:"BillingUin,omitempty" name:"BillingUin"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

func (r *BillingOperationDestroyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationDestroyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchTraceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 调用链列表

		Result *TsfPageZipkinTraceInfoV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchTraceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchTraceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateLaneRuleRequest struct {
	*tchttp.BaseRequest

	// 泳道规则名称

	RuleName *string `json:"RuleName,omitempty" name:"RuleName"`
	// 泳道规则备注

	Remark *string `json:"Remark,omitempty" name:"Remark"`
	// 泳道规则标签列表

	RuleTagList []*LaneRuleTag `json:"RuleTagList,omitempty" name:"RuleTagList"`
	// 泳道规则标签关系

	RuleTagRelationship *string `json:"RuleTagRelationship,omitempty" name:"RuleTagRelationship"`
	// 泳道Id

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateLaneRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateLaneRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSingleContainerGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 业务返回内容

		Result *DescribeSingleContainerGroupsResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSingleContainerGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSingleContainerGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ChangeContainerReplicasRequest struct {
	*tchttp.BaseRequest

	// 部署组ID，部署组唯一标识

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 实例数量

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
}

func (r *ChangeContainerReplicasRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ChangeContainerReplicasRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VmGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 部署组状态

	GroupStatus *string `json:"GroupStatus,omitempty" name:"GroupStatus"`
	// 程序包ID

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 程序包名称

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 程序包版本号

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 部署组机器数目

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 部署组运行中机器数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 部署组启动参数信息

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 部署组创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 部署组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 部署组停止机器数目

	OffInstanceCount *int64 `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
	// 部署组描述信息

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 部署组资源类型

	GroupResourceType *string `json:"GroupResourceType,omitempty" name:"GroupResourceType"`
	// 部署组更新时间戳

	UpdatedTime *int64 `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 部署应用描述信息

	DeployDesc *string `json:"DeployDesc,omitempty" name:"DeployDesc"`
	// 滚动发布的更新方式

	UpdateType *uint64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 发布是否启用beta批次

	DeployBetaEnable *bool `json:"DeployBetaEnable,omitempty" name:"DeployBetaEnable"`
	// 滚动发布的批次比例列表

	DeployBatch []*float64 `json:"DeployBatch,omitempty" name:"DeployBatch"`
	// 滚动发布的批次执行方式

	DeployExeMode *string `json:"DeployExeMode,omitempty" name:"DeployExeMode"`
	// 滚动发布的每个批次的等待时间

	DeployWaitTime *uint64 `json:"DeployWaitTime,omitempty" name:"DeployWaitTime"`
	// 是否开启了健康检查

	EnableHealthCheck *bool `json:"EnableHealthCheck,omitempty" name:"EnableHealthCheck"`
	// 健康检查配置

	HealthCheckSettings *HealthCheckSettings `json:"HealthCheckSettings,omitempty" name:"HealthCheckSettings"`
	// 程序包类型

	PackageType *string `json:"PackageType,omitempty" name:"PackageType"`
	// 启动脚本 base64编码

	StartScript *string `json:"StartScript,omitempty" name:"StartScript"`
	// 停止脚本 base64编码

	StopScript *string `json:"StopScript,omitempty" name:"StopScript"`
	// 部署组备注

	Alias *string `json:"Alias,omitempty" name:"Alias"`
	// javaagent信息

	AgentProfileList []*AgentProfile `json:"AgentProfileList,omitempty" name:"AgentProfileList"`
	// 预热属性配置

	WarmupSetting *WarmupSetting `json:"WarmupSetting,omitempty" name:"WarmupSetting"`
	// Envoy网关配置

	GatewayConfig *GatewayConfig `json:"GatewayConfig,omitempty" name:"GatewayConfig"`
	// 无

	JdkVersion *string `json:"JdkVersion,omitempty" name:"JdkVersion"`
	// 无

	ServiceAgentVersion *string `json:"ServiceAgentVersion,omitempty" name:"ServiceAgentVersion"`
	// 无

	Status *string `json:"Status,omitempty" name:"Status"`
	// 无

	OtAgentVersion *string `json:"OtAgentVersion,omitempty" name:"OtAgentVersion"`
	// 无

	JdkName *string `json:"JdkName,omitempty" name:"JdkName"`
	// 无

	IsNotEqualServiceConfig *bool `json:"IsNotEqualServiceConfig,omitempty" name:"IsNotEqualServiceConfig"`
	// 无

	ForceStart *bool `json:"ForceStart,omitempty" name:"ForceStart"`
	// 无

	ServiceSpecEncode *string `json:"ServiceSpecEncode,omitempty" name:"ServiceSpecEncode"`
}

type ShrinkInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ShrinkInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShrinkInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MicroserviceExtraV2 struct {

	// 微服务 ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 描述

	MicroserviceDesc *string `json:"MicroserviceDesc,omitempty" name:"MicroserviceDesc"`
	// 类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 关联的应用 ID

	AssociateApplicationId *string `json:"AssociateApplicationId,omitempty" name:"AssociateApplicationId"`
	// 协议

	MicroserviceProtocol *string `json:"MicroserviceProtocol,omitempty" name:"MicroserviceProtocol"`
	// 监听端口

	MicroserviceListeningPort *int64 `json:"MicroserviceListeningPort,omitempty" name:"MicroserviceListeningPort"`
	// 健康检查参数

	HealthCheckUrl *string `json:"HealthCheckUrl,omitempty" name:"HealthCheckUrl"`
	// 集群类型

	ServiceClustertype *string `json:"ServiceClustertype,omitempty" name:"ServiceClustertype"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群 ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
}

type ApiUseStatisticsEntity struct {

	// 名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 次数

	Count *string `json:"Count,omitempty" name:"Count"`
	// 比率

	Ratio *string `json:"Ratio,omitempty" name:"Ratio"`
}

type TaskRecord struct {

	// 任务名称

	TaskName *string `json:"TaskName,omitempty" name:"TaskName"`
	// 任务类型

	TaskType *string `json:"TaskType,omitempty" name:"TaskType"`
	// 执行类型

	ExecuteType *string `json:"ExecuteType,omitempty" name:"ExecuteType"`
	// 任务内容，长度限制65535字节

	TaskContent *string `json:"TaskContent,omitempty" name:"TaskContent"`
	// 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 超时时间

	TimeOut *int64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 重试次数

	RetryCount *int64 `json:"RetryCount,omitempty" name:"RetryCount"`
	// 重试间隔

	RetryInterval *int64 `json:"RetryInterval,omitempty" name:"RetryInterval"`
	// 触发规则

	TaskRule *TaskRule `json:"TaskRule,omitempty" name:"TaskRule"`
	// 是否启用任务,ENABLED/DISABLED

	TaskState *string `json:"TaskState,omitempty" name:"TaskState"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 判断任务成功的操作符

	SuccessOperator *string `json:"SuccessOperator,omitempty" name:"SuccessOperator"`
	// 判断任务成功的阈值

	SuccessRatio *int64 `json:"SuccessRatio,omitempty" name:"SuccessRatio"`
	// 分片数量

	ShardCount *int64 `json:"ShardCount,omitempty" name:"ShardCount"`
	// 高级设置

	AdvanceSettings *AdvanceSettings `json:"AdvanceSettings,omitempty" name:"AdvanceSettings"`
	// 分片参数

	ShardArguments []*ShardArgument `json:"ShardArguments,omitempty" name:"ShardArguments"`
	// 所属工作流ID

	BelongFlowIds []*string `json:"BelongFlowIds,omitempty" name:"BelongFlowIds"`
	// 任务历史ID

	TaskLogId *string `json:"TaskLogId,omitempty" name:"TaskLogId"`
	// 触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 任务参数，长度限制10000个字符

	TaskArgument *string `json:"TaskArgument,omitempty" name:"TaskArgument"`
}

type CreateContainerShellSessionRequest struct {
	*tchttp.BaseRequest
}

func (r *CreateContainerShellSessionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateContainerShellSessionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRoutesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路由分页列表

		Result *TsfPageRouteV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRoutesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRoutesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ManagerJobLogPage struct {

	// 无

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 无

	Content []*ManagerJobLog `json:"Content,omitempty" name:"Content"`
}

type DescribeLaneGroupExistRequest struct {
	*tchttp.BaseRequest

	// 泳道信息

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 部署组ID列表

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *DescribeLaneGroupExistRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneGroupExistRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceConfigSts struct {

	// uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
}

type DisassociateFilebeatConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisassociateFilebeatConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisassociateFilebeatConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UninstallAgentScriptsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 卸载agent脚本内容

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UninstallAgentScriptsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UninstallAgentScriptsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SidecarStatus struct {

	// envoy状态

	Envoy *string `json:"Envoy,omitempty" name:"Envoy"`
	// mesh-dns 状态

	MeshDns *string `json:"MeshDns,omitempty" name:"MeshDns"`
	// pilot-agent状态

	PilotAgent *string `json:"PilotAgent,omitempty" name:"PilotAgent"`
}

type TsfJvmLogPage struct {

	// jvm日志详情列表

	Content []*JvmLog `json:"Content,omitempty" name:"Content"`
	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 游标ID, 根据游标Id查询后续结果

	ScrollId *string `json:"ScrollId,omitempty" name:"ScrollId"`
}

type CreateConfigTemplateRequest struct {
	*tchttp.BaseRequest

	// 配置模板名称

	ConfigTemplateName *string `json:"ConfigTemplateName,omitempty" name:"ConfigTemplateName"`
	// 配置模板描述

	ConfigTemplateDesc *string `json:"ConfigTemplateDesc,omitempty" name:"ConfigTemplateDesc"`
	// 配置模板对应的微服务框架

	ConfigTemplateType *string `json:"ConfigTemplateType,omitempty" name:"ConfigTemplateType"`
	// 配置模板数据

	ConfigTemplateValue *string `json:"ConfigTemplateValue,omitempty" name:"ConfigTemplateValue"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateConfigTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateConfigTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupAddibleInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 虚拟机部署组可添加机器列表

		Result *TsfPageInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupAddibleInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupAddibleInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VolumeInfo struct {

	// 数据卷类型

	VolumeType *string `json:"VolumeType,omitempty" name:"VolumeType"`
	// 数据卷名称

	VolumeName *string `json:"VolumeName,omitempty" name:"VolumeName"`
	// 数据卷配置

	VolumeConfig *string `json:"VolumeConfig,omitempty" name:"VolumeConfig"`
}

type CreateTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceAffinityRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *DescribeNamespaceAffinityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceAffinityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinessLog struct {

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 日志内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 日志时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
}

type RatelimitRule struct {

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 规则名字，在一个微服务下唯一

	Name *string `json:"Name,omitempty" name:"Name"`
	// 状态 0表示启用 1表示停用

	Status *uint64 `json:"Status,omitempty" name:"Status"`
	// 限流规则区分的来源微服务名

	SourceService *string `json:"SourceService,omitempty" name:"SourceService"`
	// 限流周期，单位秒

	DurationSecond *uint64 `json:"DurationSecond,omitempty" name:"DurationSecond"`
	// 每周期内的限流配额

	DurationQuota *uint64 `json:"DurationQuota,omitempty" name:"DurationQuota"`
	// 最近一次修改规则时间，UTC秒数

	ModifyTime *uint64 `json:"ModifyTime,omitempty" name:"ModifyTime"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 限制条件列表

	Dimensions []*RatelimitDimension `json:"Dimensions,omitempty" name:"Dimensions"`
}

type DeleteGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否删除成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSidecarFilterRequest struct {
	*tchttp.BaseRequest

	// 过滤器Id

	FilterId *string `json:"FilterId,omitempty" name:"FilterId"`
}

func (r *DescribeSidecarFilterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSidecarFilterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseApiGroupRequest struct {
	*tchttp.BaseRequest

	// Api 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *ReleaseApiGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseApiGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RollbackFileConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项发布历史ID

	ConfigReleaseLogId *string `json:"ConfigReleaseLogId,omitempty" name:"ConfigReleaseLogId"`
	// 回滚描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
}

func (r *RollbackFileConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RollbackFileConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CommonGroupAttribute struct {

	// 部署组状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 部署组实例数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
}

type BindGatewayInstanceProgramsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *BindGatewayInstanceProgramsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BindGatewayInstanceProgramsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 处理结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourcesRequest struct {
	*tchttp.BaseRequest

	// 是否需要Action存在，Y：需要；N（默认）：不需要，为Y时，仅返回ResourceAction字段有值的数据。

	NeedAction *string `json:"NeedAction,omitempty" name:"NeedAction"`
	// 资源编码，不传入时查询全量

	ResourceCode *string `json:"ResourceCode,omitempty" name:"ResourceCode"`
	// 产品ID列表，不传入时查询全量

	ServiceIdList []*string `json:"ServiceIdList,omitempty" name:"ServiceIdList"`
	// 产品编码列表，不传入时查询全量

	ServiceCodeList []*string `json:"ServiceCodeList,omitempty" name:"ServiceCodeList"`
	// 模糊查询，资源ID/资源编码/资源描述 字段，不传入时查询全量

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 每页数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 无

	IgnoreTask *bool `json:"IgnoreTask,omitempty" name:"IgnoreTask"`
}

func (r *DescribeResourcesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourcesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceTaskStatusRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DescribeResourceTaskStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceTaskStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModulesDetailResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*ModulesResult `json:"Content,omitempty" name:"Content"`
}

type OperateKubeInjectResult struct {

	// Success值

	Success *bool `json:"Success,omitempty" name:"Success"`
}

type CreateZoneRequest struct {
	*tchttp.BaseRequest

	// tZoneId值

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
	// tZoneName值

	TZoneName *string `json:"TZoneName,omitempty" name:"TZoneName"`
	// tRemark值

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
	// tRegionId值

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
	// TZoneEngName值

	TZoneEngName *string `json:"TZoneEngName,omitempty" name:"TZoneEngName"`
}

func (r *CreateZoneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateZoneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DscribeTasksRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DscribeTasksRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DscribeTasksRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DailyUseStatisticsEntity struct {

	// 日统计值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 日环比值

	DailyRate *string `json:"DailyRate,omitempty" name:"DailyRate"`
	// 周同比值

	WeekRate *string `json:"WeekRate,omitempty" name:"WeekRate"`
}

type CreateAllGatewayApiAsyncRequest struct {
	*tchttp.BaseRequest

	// API分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *CreateAllGatewayApiAsyncRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAllGatewayApiAsyncRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PolicyItem struct {

	// 角色ID

	RoleId *string `json:"RoleId,omitempty" name:"RoleId"`
	// 数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
}

type DeleteFilebeatConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteFilebeatConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteFilebeatConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyLaneRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyLaneRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyLaneRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ResourceGetBatchIndexResult struct {

	// 执行批次索引

	BatchNum *uint64 `json:"BatchNum,omitempty" name:"BatchNum"`
}

type DtsRetryError struct {

	// 主事务ID

	TxId *int64 `json:"TxId,omitempty" name:"TxId"`
	// 异常信息

	ErrorMessage *string `json:"ErrorMessage,omitempty" name:"ErrorMessage"`
}

type ResourceOperationStatusResult struct {

	// 操作的执行状态

	OperationResult *bool `json:"OperationResult,omitempty" name:"OperationResult"`
}

type DescribeMicroserviceMetasResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 元数据信息

		Result *TsfPageMicroServiceMetas `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroserviceMetasResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceMetasResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 机器实例ID，不传表示全部实例

	InstanceIds []*string `json:"InstanceIds,omitempty" name:"InstanceIds"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 请求偏移量，取值范围大于等于0，默认值为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 单页请求配置数量，取值范围[1, 200]，默认值为50

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 排序规则，默认值"time"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 日志配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组ID列表，不传表示全部部署组

	GroupIds []*string `json:"GroupIds,omitempty" name:"GroupIds"`
	// 检索类型，取值"LUCENE", "REGEXP", "NORMAL"

	SearchWordType *string `json:"SearchWordType,omitempty" name:"SearchWordType"`
	// 批量请求类型，取值"page"或"scroll"

	BatchType *string `json:"BatchType,omitempty" name:"BatchType"`
	// 游标ID

	ScrollId *string `json:"ScrollId,omitempty" name:"ScrollId"`
}

func (r *SearchBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MicroserviceGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 注册中心在线节点数

	ConsulInstanceCount *int64 `json:"ConsulInstanceCount,omitempty" name:"ConsulInstanceCount"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 应用微服务类型

	AppMicroServiceType *string `json:"AppMicroServiceType,omitempty" name:"AppMicroServiceType"`
}

type CreateLicenseApplicationRequest struct {
	*tchttp.BaseRequest

	// 有效期信息

	Duration *LicenseDuration `json:"Duration,omitempty" name:"Duration"`
	// 所申请的产品信息列表

	Product *LicenseProduct `json:"Product,omitempty" name:"Product"`
	// 联系电话

	Phone []*string `json:"Phone,omitempty" name:"Phone"`
	// 联系邮箱

	Email []*string `json:"Email,omitempty" name:"Email"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
}

func (r *CreateLicenseApplicationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateLicenseApplicationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventStatisticsRequest struct {
	*tchttp.BaseRequest

	// 查看开始时间。格式为 yyyy-MM-dd HH:mm:ss

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查看开始时间。格式为 yyyy-MM-dd HH:mm:ss

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 单页请求数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 事件过滤器

	Filters []*EventFilter `json:"Filters,omitempty" name:"Filters"`
	// 维度信息

	Dimensions []*string `json:"Dimensions,omitempty" name:"Dimensions"`
	// 事件排序器

	Sorts []*EventSort `json:"Sorts,omitempty" name:"Sorts"`
}

func (r *DescribeEventStatisticsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventStatisticsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
}

func (r *DescribeReleasePipelineRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApmTaskStatusRequest struct {
	*tchttp.BaseRequest

	// 查询的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 任务类型

	Type *string `json:"Type,omitempty" name:"Type"`
}

func (r *DescribeApmTaskStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApmTaskStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RatelimitDimension struct {

	// `S`:  系统标签/`U`: 自定义标签

	TagType *string `json:"TagType,omitempty" name:"TagType"`
	// 标签名

	TagField *string `json:"TagField,omitempty" name:"TagField"`
	// EQUAL/NOT_EQUAL/IN/NOT_IN/REGEX

	TagOperator *string `json:"TagOperator,omitempty" name:"TagOperator"`
	// 标签匹配值

	TagValue *string `json:"TagValue,omitempty" name:"TagValue"`
}

type NamespaceInfos struct {

	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
}

type DescribeGroupUseDetailRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 网关分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 查询的日期,格式：yyyy-MM-dd HH:mm:ss

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询的日期,格式：yyyy-MM-dd HH:mm:ss

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 指定top的条数,默认为10

	Count *int64 `json:"Count,omitempty" name:"Count"`
}

func (r *DescribeGroupUseDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupUseDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInvocationMetricDataCurveResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 指标监控数据曲线集合

		Result []*MetricDataCurve `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInvocationMetricDataCurveResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationMetricDataCurveResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainGroupResult struct {

	// 部署组列表

	Content []*ContainGroup `json:"Content,omitempty" name:"Content"`
	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
}

type DescribeGroupEnvRequest struct {
	*tchttp.BaseRequest

	// 虚拟机部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeGroupEnvRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupEnvRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperateUnitNsByMultiCloudResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *OperateUnitNsByMultiCloudResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *OperateUnitNsByMultiCloudResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Cluster struct {

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群描述

	ClusterDesc *string `json:"ClusterDesc,omitempty" name:"ClusterDesc"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 集群所属私有网络ID

	VpcId *string `json:"VpcId,omitempty" name:"VpcId"`
	// 集群状态

	ClusterStatus *string `json:"ClusterStatus,omitempty" name:"ClusterStatus"`
	// 集群CIDR

	ClusterCIDR *string `json:"ClusterCIDR,omitempty" name:"ClusterCIDR"`
	// 集群总CPU，单位: 核

	ClusterTotalCpu *float64 `json:"ClusterTotalCpu,omitempty" name:"ClusterTotalCpu"`
	// 集群总内存，单位: G

	ClusterTotalMem *float64 `json:"ClusterTotalMem,omitempty" name:"ClusterTotalMem"`
	// 集群已使用CPU，单位: 核

	ClusterUsedCpu *float64 `json:"ClusterUsedCpu,omitempty" name:"ClusterUsedCpu"`
	// 集群已使用内存，单位: G

	ClusterUsedMem *float64 `json:"ClusterUsedMem,omitempty" name:"ClusterUsedMem"`
	// 集群机器实例数量

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 集群可用的机器实例数量

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 集群正常状态的机器实例数量

	NormalInstanceCount *int64 `json:"NormalInstanceCount,omitempty" name:"NormalInstanceCount"`
	// 删除标记：true：可以删除；false：不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 集群所属TSF地域ID

	TsfRegionId *string `json:"TsfRegionId,omitempty" name:"TsfRegionId"`
	// 集群所属TSF地域名称

	TsfRegionName *string `json:"TsfRegionName,omitempty" name:"TsfRegionName"`
	// 集群所属TSF可用区ID

	TsfZoneId *string `json:"TsfZoneId,omitempty" name:"TsfZoneId"`
	// 集群所属TSF可用区名称

	TsfZoneName *string `json:"TsfZoneName,omitempty" name:"TsfZoneName"`
	// 集群不可删除的原因

	DeleteFlagReason *string `json:"DeleteFlagReason,omitempty" name:"DeleteFlagReason"`
	// 集群最大CPU限制，单位：核

	ClusterLimitCpu *float64 `json:"ClusterLimitCpu,omitempty" name:"ClusterLimitCpu"`
	// 集群最大内存限制，单位：G

	ClusterLimitMem *float64 `json:"ClusterLimitMem,omitempty" name:"ClusterLimitMem"`
	// 集群可用的服务实例数量

	RunServiceInstanceCount *int64 `json:"RunServiceInstanceCount,omitempty" name:"RunServiceInstanceCount"`
	// 集群所属子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 返回给前端的控制信息

	OperationInfo *OperationInfo `json:"OperationInfo,omitempty" name:"OperationInfo"`
	// 集群版本

	ClusterVersion *string `json:"ClusterVersion,omitempty" name:"ClusterVersion"`
	// 无

	StopGroupCount *int64 `json:"StopGroupCount,omitempty" name:"StopGroupCount"`
	// 无

	GroupCount *int64 `json:"GroupCount,omitempty" name:"GroupCount"`
	// 无

	ClusterRemarkName *string `json:"ClusterRemarkName,omitempty" name:"ClusterRemarkName"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
	// 无

	MaxClusterServiceNum *int64 `json:"MaxClusterServiceNum,omitempty" name:"MaxClusterServiceNum"`
	// 无

	KuberneteNativeType *string `json:"KuberneteNativeType,omitempty" name:"KuberneteNativeType"`
	// 无

	KuberneteApiServer *string `json:"KuberneteApiServer,omitempty" name:"KuberneteApiServer"`
	// 无

	MaxNodePodNum *int64 `json:"MaxNodePodNum,omitempty" name:"MaxNodePodNum"`
	// 无

	AbnormalGroupCount *int64 `json:"AbnormalGroupCount,omitempty" name:"AbnormalGroupCount"`
	// 无

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// 无

	KubeAuthValid *bool `json:"KubeAuthValid,omitempty" name:"KubeAuthValid"`
	// 无

	KuberneteNativeSecret *string `json:"KuberneteNativeSecret,omitempty" name:"KuberneteNativeSecret"`
	// 无

	RunGroupCount *int64 `json:"RunGroupCount,omitempty" name:"RunGroupCount"`
	// 无

	Unbind *bool `json:"Unbind,omitempty" name:"Unbind"`
}

type DescribeClustersRequest struct {
	*tchttp.BaseRequest

	// 搜索词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// idList

	ClusterIdList []*string `json:"ClusterIdList,omitempty" name:"ClusterIdList"`
}

func (r *DescribeClustersRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClustersRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerGroupsRequest struct {
	*tchttp.BaseRequest

	// 搜索字段，模糊搜索groupName字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 分组所属应用ID。必填

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 排序字段，默认为 createTime字段，支持id， name， createTime

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，默认为1：倒序排序，0：正序，1：倒序

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *DescribeContainerGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ThreadDetail struct {

	// 线程名称

	ThreadName *string `json:"ThreadName,omitempty" name:"ThreadName"`
	// 线程状态

	ThreadState *string `json:"ThreadState,omitempty" name:"ThreadState"`
	// 线程堆栈信息

	ThreadInfos *string `json:"ThreadInfos,omitempty" name:"ThreadInfos"`
}

type DescribeMicroserviceGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务下的部署组列表

		Result *TsfPageMicroserviceGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroserviceGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperateKubeInjectRequest struct {
	*tchttp.BaseRequest

	// Command值

	Command *string `json:"Command,omitempty" name:"Command"`
	// ClusterId值

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// Namespace值

	Namespace *string `json:"Namespace,omitempty" name:"Namespace"`
	// EnableByDefault值

	EnableByDefault *bool `json:"EnableByDefault,omitempty" name:"EnableByDefault"`
	// DefaultMicroserviceType值

	DefaultMicroserviceType *string `json:"DefaultMicroserviceType,omitempty" name:"DefaultMicroserviceType"`
	// EnableDeployment值

	EnableDeployment *bool `json:"EnableDeployment,omitempty" name:"EnableDeployment"`
	// ApplicationName值

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// AgentCpuRequest值

	AgentCpuRequest *string `json:"AgentCpuRequest,omitempty" name:"AgentCpuRequest"`
	// AgentCpuLimit值

	AgentCpuLimit *string `json:"AgentCpuLimit,omitempty" name:"AgentCpuLimit"`
	// AgentMemRequest值

	AgentMemRequest *string `json:"AgentMemRequest,omitempty" name:"AgentMemRequest"`
	// AgentMemLimit值

	AgentMemLimit *string `json:"AgentMemLimit,omitempty" name:"AgentMemLimit"`
	// Name值

	Name *string `json:"Name,omitempty" name:"Name"`
}

func (r *OperateKubeInjectRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *OperateKubeInjectRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SimpleApplicationV2 struct {

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 应用微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type DeleteLicenseApplicationRequest struct {
	*tchttp.BaseRequest

	// 填写申请时间

	CreateTime *uint64 `json:"CreateTime,omitempty" name:"CreateTime"`
}

func (r *DeleteLicenseApplicationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteLicenseApplicationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageApplicatoinServerLog struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 日志内容

	Content []*ApplicationServerLogContent `json:"Content,omitempty" name:"Content"`
}

type DescribeApplicationBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicationBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterRequest struct {
	*tchttp.BaseRequest

	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *DescribeClusterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableLaneGroupEntranceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableLaneGroupEntranceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableLaneGroupEntranceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MeshLog struct {

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 日志内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 日志时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 实例IP

	InstanceIp *string `json:"InstanceIp,omitempty" name:"InstanceIp"`
	// mesh 组件类型（0：pilotagent，1：envoy，2：MeshDns）

	Type *int64 `json:"Type,omitempty" name:"Type"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

type TaskRule struct {

	// 触发规则类型, Cron/Repeat

	RuleType *string `json:"RuleType,omitempty" name:"RuleType"`
	// Cron类型规则，cron表达式。

	Expression *string `json:"Expression,omitempty" name:"Expression"`
	// 时间间隔， 单位毫秒

	RepeatInterval *uint64 `json:"RepeatInterval,omitempty" name:"RepeatInterval"`
}

type CreateGatewayWeChatMiniProgramLoginPluginRequest struct {
	*tchttp.BaseRequest

	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
	// 插件类型 "WeChatMiniProgramLogin"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 微信小程序AppId

	WeChatAppId *string `json:"WeChatAppId,omitempty" name:"WeChatAppId"`
	// 微信小程序AppSecret

	WeChatAppSecret *string `json:"WeChatAppSecret,omitempty" name:"WeChatAppSecret"`
	// 微信小程序请求code携带位置：header/cookie

	RequestCodeBaggagePosition *string `json:"RequestCodeBaggagePosition,omitempty" name:"RequestCodeBaggagePosition"`
	// 自定义登录态参数名

	SessionKeyName *string `json:"SessionKeyName,omitempty" name:"SessionKeyName"`
	// 自定义登录态过期时间，单位：秒

	SessionExpireTime *int64 `json:"SessionExpireTime,omitempty" name:"SessionExpireTime"`
	// 前台业务请求自定义登录态参数位置：header/cookie

	RequestSessionBaggagePosition *string `json:"RequestSessionBaggagePosition,omitempty" name:"RequestSessionBaggagePosition"`
	// 向业务后台传输登录态参数位置：header/query/cookie

	BusinessSessionBaggagePosition *string `json:"BusinessSessionBaggagePosition,omitempty" name:"BusinessSessionBaggagePosition"`
	// 返回自定义登录态参数位置：header

	ResponseSessionBaggagePosition *string `json:"ResponseSessionBaggagePosition,omitempty" name:"ResponseSessionBaggagePosition"`
	// 元数据转标签配置的Json串

	MetaDataTagInfoList *string `json:"MetaDataTagInfoList,omitempty" name:"MetaDataTagInfoList"`
	// 自定义标签配置的Json串

	CustomizeTagInfoList *string `json:"CustomizeTagInfoList,omitempty" name:"CustomizeTagInfoList"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateGatewayWeChatMiniProgramLoginPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayWeChatMiniProgramLoginPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRouteRequest struct {
	*tchttp.BaseRequest

	// 路由所属微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 路由名称

	RouteName *string `json:"RouteName,omitempty" name:"RouteName"`
	// 路由描述信息

	RouteDesc *string `json:"RouteDesc,omitempty" name:"RouteDesc"`
	// 路由规则列表

	RuleList []*RouteRuleV2 `json:"RuleList,omitempty" name:"RuleList"`
}

func (r *CreateRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteContainerGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否删除成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteContainerGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteContainerGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteAlarmPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteAlarmPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteAlarmPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroservicesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 状态过滤，online、offline、single_online

	Status []*string `json:"Status,omitempty" name:"Status"`
	// IdList

	MicroserviceIdList []*string `json:"MicroserviceIdList,omitempty" name:"MicroserviceIdList"`
	// 搜索的服务名列表

	MicroserviceNameList []*string `json:"MicroserviceNameList,omitempty" name:"MicroserviceNameList"`
}

func (r *DescribeMicroservicesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroservicesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfRegion struct {

	// TSF地域ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// TSF地域名称

	Name *string `json:"Name,omitempty" name:"Name"`
}

type CreateTemplateRequest struct {
	*tchttp.BaseRequest

	// 新建项目为null，原有项目为原ProjectId

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
	// ProjectName

	ProjectName *string `json:"ProjectName,omitempty" name:"ProjectName"`
	// BasePackage

	BasePackage *string `json:"BasePackage,omitempty" name:"BasePackage"`
	// PomGroupId

	PomGroupId *string `json:"PomGroupId,omitempty" name:"PomGroupId"`
	// PomArtifactId

	PomArtifactId *string `json:"PomArtifactId,omitempty" name:"PomArtifactId"`
	// PomVersion

	PomVersion *string `json:"PomVersion,omitempty" name:"PomVersion"`
	// PomName

	PomName *string `json:"PomName,omitempty" name:"PomName"`
	// PomDesc

	PomDesc *string `json:"PomDesc,omitempty" name:"PomDesc"`
	// GetMethod

	GetMethod *string `json:"GetMethod,omitempty" name:"GetMethod"`
	// 微服务数组

	Ms []*Ms `json:"Ms,omitempty" name:"Ms"`
}

func (r *CreateTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteApplicationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除应用操作是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteApplicationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteApplicationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RealtimeLogSet struct {

	// 请求基准时间戳（用于下次调用）

	RealtimeTs *uint64 `json:"RealtimeTs,omitempty" name:"RealtimeTs"`
	// 业务日志集合

	BusinessLogSet *TsfPageBusinessLogV2 `json:"BusinessLogSet,omitempty" name:"BusinessLogSet"`
	// 标准输出日志集合

	StdoutLogSet *TsfPageStdoutLogV2 `json:"StdoutLogSet,omitempty" name:"StdoutLogSet"`
	// Meh日志集合

	MeshLogSet *TsfPageMeshLog `json:"MeshLogSet,omitempty" name:"MeshLogSet"`
}

type DescribeGWOverviewInvocationRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 网关分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组下的ApiID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// 监控统计类型: "SumReqAmount", "AvgFailureRate", "AvgTimeCost"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 监控统计数据粒度

	Period *int64 `json:"Period,omitempty" name:"Period"`
	// 开始时间，默认当前时间, eg: 2019-11-15 14:28:27

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间，默认当前时间 eg: 2019-11-15 14:28:27

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *DescribeGWOverviewInvocationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGWOverviewInvocationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindDeployModuleParamsRequest struct {
	*tchttp.BaseRequest

	// ParameterConfigType

	ParameterConfigType *string `json:"ParameterConfigType,omitempty" name:"ParameterConfigType"`
	// ParameterSubType

	ParameterSubType *string `json:"ParameterSubType,omitempty" name:"ParameterSubType"`
	// ParameterName

	ParameterName *string `json:"ParameterName,omitempty" name:"ParameterName"`
}

func (r *FindDeployModuleParamsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindDeployModuleParamsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateApiTimeoutsRequest struct {
	*tchttp.BaseRequest

	// API ID 列表

	ApiIds []*string `json:"ApiIds,omitempty" name:"ApiIds"`
	// 开启/禁用，enabled/disabled

	UsableStatus *string `json:"UsableStatus,omitempty" name:"UsableStatus"`
	// 超时时间，单位毫秒，开启API超时时，必填

	Timeout *int64 `json:"Timeout,omitempty" name:"Timeout"`
}

func (r *UpdateApiTimeoutsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApiTimeoutsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchStdoutLogRequest struct {
	*tchttp.BaseRequest

	// 机器实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 单页请求配置数量，取值范围[1, 500]，默认值为100

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 查询起始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 查询结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 请求偏移量，取值范围大于等于0，默认值为
	// 0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 排序规则，默认值"time"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，取值"asc"或"desc"，默认
	// 值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 检索类型，取值"LUCENE", "REGEXP",
	// "NORMAL"

	SearchWordType *string `json:"SearchWordType,omitempty" name:"SearchWordType"`
	// 批量请求类型，取值"page"或"scroll"，默认
	// 值"page"

	BatchType *string `json:"BatchType,omitempty" name:"BatchType"`
	// 游标ID

	ScrollId *string `json:"ScrollId,omitempty" name:"ScrollId"`
}

func (r *SearchStdoutLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchStdoutLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGroupSecretRequest struct {
	*tchttp.BaseRequest

	// Api 分组 ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 秘钥名称

	SecretName *string `json:"SecretName,omitempty" name:"SecretName"`
}

func (r *CreateGroupSecretRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGroupSecretRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConfigReleaseLog struct {

	// 配置项发布日志ID

	ConfigReleaseLogId *string `json:"ConfigReleaseLogId,omitempty" name:"ConfigReleaseLogId"`
	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 发布时间

	ReleaseTime *string `json:"ReleaseTime,omitempty" name:"ReleaseTime"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
	// 发布状态

	ReleaseStatus *string `json:"ReleaseStatus,omitempty" name:"ReleaseStatus"`
	// 上次发布的配置项ID

	LastConfigId *string `json:"LastConfigId,omitempty" name:"LastConfigId"`
	// 上次发布的配置项名称

	LastConfigName *string `json:"LastConfigName,omitempty" name:"LastConfigName"`
	// 上次发布的配置项版本

	LastConfigVersion *string `json:"LastConfigVersion,omitempty" name:"LastConfigVersion"`
	// 回滚标识

	RollbackFlag *bool `json:"RollbackFlag,omitempty" name:"RollbackFlag"`
}

type DeleteTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeConfigTemplatesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置模板列表

		Result *ConfigTemplateResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeConfigTemplatesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigTemplatesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetResourceBatchIndexRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *GetResourceBatchIndexRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetResourceBatchIndexRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ScalableTaskV2 struct {

	// 任务id

	Taskid *string `json:"Taskid,omitempty" name:"Taskid"`
	// 任务描述

	Desc *string `json:"Desc,omitempty" name:"Desc"`
	// CreateTime

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// EndTime

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TaskInstanceList

	TaskInstanceList []*TaskInstance `json:"TaskInstanceList,omitempty" name:"TaskInstanceList"`
}

type CreateApplicationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 应用ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateApplicationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateApplicationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableTaskFlowResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true成功，false: 失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableTaskFlowResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableTaskFlowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyLaneRequest struct {
	*tchttp.BaseRequest

	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 泳道名称

	LaneName *string `json:"LaneName,omitempty" name:"LaneName"`
	// 备注

	Remark *string `json:"Remark,omitempty" name:"Remark"`
}

func (r *ModifyLaneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyLaneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUnitRulesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页列表信息

		Result []*TsfPageUnitRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUnitRulesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyScalableRuleRequest struct {
	*tchttp.BaseRequest

	// 规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 弹性伸缩规则名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 包含缩容规则, 默认0, 0:否 1:是

	EnableShrink *uint64 `json:"EnableShrink,omitempty" name:"EnableShrink"`
	// 包含扩容规则，默认0, 0否 1是

	EnableExpand *uint64 `json:"EnableExpand,omitempty" name:"EnableExpand"`
	// 扩容规则持续时间,0-9999s

	ExpandPeriod *uint64 `json:"ExpandPeriod,omitempty" name:"ExpandPeriod"`
	// 缩容规则持续时间，0-9999s

	ShrinkPeriod *uint64 `json:"ShrinkPeriod,omitempty" name:"ShrinkPeriod"`
	// 单次扩容机器数量, 0-9999

	ExpandVmCount *uint64 `json:"ExpandVmCount,omitempty" name:"ExpandVmCount"`
	// 单次缩容机器数量, 0-9999

	ShrinkVmCount *uint64 `json:"ShrinkVmCount,omitempty" name:"ShrinkVmCount"`
	// 冷却时间, s为单位, 0-9999

	CoolTime *uint64 `json:"CoolTime,omitempty" name:"CoolTime"`
	// 扩容之后，最大实例数目,0-9999

	ExpandVmCountLimit *uint64 `json:"ExpandVmCountLimit,omitempty" name:"ExpandVmCountLimit"`
	// 缩容之后，最小实例数目, 0-9999

	ShrinkVmCountLimit *uint64 `json:"ShrinkVmCountLimit,omitempty" name:"ShrinkVmCountLimit"`
	// 扩容规则

	ExpandSubruleList []*ScalableSubRule `json:"ExpandSubruleList,omitempty" name:"ExpandSubruleList"`
	// 缩容规则

	ShrinkSubruleList []*ScalableSubRule `json:"ShrinkSubruleList,omitempty" name:"ShrinkSubruleList"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 开启定时伸缩规则, 默认0, 0:关闭定时伸缩 1:开启定时伸缩

	EnableCronAS *uint64 `json:"EnableCronAS,omitempty" name:"EnableCronAS"`
	// 是否关闭指标伸缩, 默认0, 0:打开指标伸缩 1:关闭指标伸缩

	DisableMetricAS *uint64 `json:"DisableMetricAS,omitempty" name:"DisableMetricAS"`
	// 定时伸缩规则列表

	CronRuleList []*CronRule `json:"CronRuleList,omitempty" name:"CronRuleList"`
}

func (r *ModifyScalableRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyScalableRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageRepository struct {

	// 仓库名,含命名空间,如tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 仓库类型

	Repotype *string `json:"Repotype,omitempty" name:"Repotype"`
	// 镜像版本数

	TagCount *int64 `json:"TagCount,omitempty" name:"TagCount"`
	// 是否公共,1:公有,0:私有

	IsPublic *int64 `json:"IsPublic,omitempty" name:"IsPublic"`
	// 是否被用户收藏。true：是，false：否

	IsUserFavor *bool `json:"IsUserFavor,omitempty" name:"IsUserFavor"`
	// 是否是腾讯云官方仓库。 是否是腾讯云官方仓库。true：是，false：否

	IsQcloudOfficial *bool `json:"IsQcloudOfficial,omitempty" name:"IsQcloudOfficial"`
	// 被所有用户收藏次数

	FavorCount *int64 `json:"FavorCount,omitempty" name:"FavorCount"`
	// 拉取次数

	PullCount *int64 `json:"PullCount,omitempty" name:"PullCount"`
	// 描述内容

	Description *string `json:"Description,omitempty" name:"Description"`
	// 创建时间

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// TcrRepoInfo值

	TcrRepoInfo *TcrRepoInfo `json:"TcrRepoInfo,omitempty" name:"TcrRepoInfo"`
	// TcrBindingId值

	TcrBindingId *int64 `json:"TcrBindingId,omitempty" name:"TcrBindingId"`
	// applicationid值

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// ApplicationName值（废弃）

	ApplicationName *ScalableRule `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// ApplicationName值

	ApplicationNameReal *string `json:"ApplicationNameReal,omitempty" name:"ApplicationNameReal"`
	// 是否公共,1:公有,0:私有

	Public *int64 `json:"Public,omitempty" name:"Public"`
}

type DescribeApiDetailRequest struct {
	*tchttp.BaseRequest

	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 请求路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeApiDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeConfigTemplateRequest struct {
	*tchttp.BaseRequest

	// 无

	ConfigTemplateId *string `json:"ConfigTemplateId,omitempty" name:"ConfigTemplateId"`
}

func (r *DescribeConfigTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupInstancesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeGroupInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroServiceListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务列表

		Result *CloudMonitorMicroserviceResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroServiceListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroServiceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTransactionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询事务详情结果

		Result *DescribeTransactionResp `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTransactionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTransactionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConfigTemplateResultV2 struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置模板列表

	Content []*ConfigTemplate `json:"Content,omitempty" name:"Content"`
}

type DescribeTsfmanagerZonesRequest struct {
	*tchttp.BaseRequest

	// TZoneId

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
	// TZoneName

	TZoneName *string `json:"TZoneName,omitempty" name:"TZoneName"`
	// TRemark

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
	// TRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
}

func (r *DescribeTsfmanagerZonesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTsfmanagerZonesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUsableUnitNamespacesRequest struct {
	*tchttp.BaseRequest

	// 根据命名空间名或ID模糊查询

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeUsableUnitNamespacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUsableUnitNamespacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新路由详情操作是否成功。
		// true：更新路由操作成功。
		// false：更新路由操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConfigTemplateResult struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置模板列表

	Content []*ConfigTemplate `json:"Content,omitempty" name:"Content"`
}

type DescribeUnitRulesV2Request struct {
	*tchttp.BaseRequest

	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 根据规则名或备注内容模糊查询

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 启用状态, disabled: 未发布， enabled: 发布

	Status *string `json:"Status,omitempty" name:"Status"`
	// 翻页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeUnitRulesV2Request) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitRulesV2Request) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteClusterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除集群操作是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteClusterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteClusterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterGroupCountRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *DescribeClusterGroupCountRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterGroupCountRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayWeChatMiniProgramLoginPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件信息列表

		Result *GatewayWeChatMiniProgramLoginPlugin `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayWeChatMiniProgramLoginPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayWeChatMiniProgramLoginPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerGroupDeployInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 获取部署组

		Result *ContainerGroupDeploy `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerGroupDeployInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupDeployInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetEnvoyDebugRequest struct {
	*tchttp.BaseRequest

	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *SetEnvoyDebugRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetEnvoyDebugRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConsumerV2 struct {

	// ConsumerControllerName

	ConsumerControllerName *string `json:"ConsumerControllerName,omitempty" name:"ConsumerControllerName"`
	// ToProviderName

	ToProviderName *string `json:"ToProviderName,omitempty" name:"ToProviderName"`
	// ToProviderServiceName

	ToProviderServiceName *string `json:"ToProviderServiceName,omitempty" name:"ToProviderServiceName"`
}

type DeleteGroupsRequest struct {
	*tchttp.BaseRequest

	// 无

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *DeleteGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroservicesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务分页列表信息

		Result *TsfPageMicroservice `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroservicesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroservicesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EventFilter struct {

	// 过滤器 Key

	Key *string `json:"Key,omitempty" name:"Key"`
	// 过滤器 Value

	Value []*string `json:"Value,omitempty" name:"Value"`
}

type DescribeScalableRuleAttributeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ScalableRuleAttribute `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeScalableRuleAttributeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeScalableRuleAttributeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DtsTransaction struct {

	// 主事务ID

	TxId *int64 `json:"TxId,omitempty" name:"TxId"`
	// 主事务开始时间戳，UTC，精确到毫秒

	TxBegin *int64 `json:"TxBegin,omitempty" name:"TxBegin"`
	// 主事务结束时间戳，UTC，精确到毫秒

	TxEnd *int64 `json:"TxEnd,omitempty" name:"TxEnd"`
	// 主事务提交时间戳，UTC，精确到毫秒

	TxCommit *int64 `json:"TxCommit,omitempty" name:"TxCommit"`
	// 主事务回滚时间戳，UTC，精确到毫秒

	TxRollback *int64 `json:"TxRollback,omitempty" name:"TxRollback"`
	// 主事务异常停止时间戳，UTC，精确到毫秒

	TxError *int64 `json:"TxError,omitempty" name:"TxError"`
	// 主事务超时时长，单位毫秒

	Timeout *int64 `json:"Timeout,omitempty" name:"Timeout"`
	// 主事务状态

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 主事务结束标识

	EndFlag *int64 `json:"EndFlag,omitempty" name:"EndFlag"`
	// 主事务超时标识

	TimeoutFlag *int64 `json:"TimeoutFlag,omitempty" name:"TimeoutFlag"`
	// 异常信息

	Comment *string `json:"Comment,omitempty" name:"Comment"`
	// 事务分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 主事务来源服务标识

	Server *string `json:"Server,omitempty" name:"Server"`
	// 分支事务数量

	BranchQty *int64 `json:"BranchQty,omitempty" name:"BranchQty"`
	// 重试标识：true：可以重试；false：不可重试

	RetryFlag *bool `json:"RetryFlag,omitempty" name:"RetryFlag"`
}

type ImageGetTagListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 总记录数

		TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
		// 仓库名,含命名空间,如tsf/nginx

		Reponame *int64 `json:"Reponame,omitempty" name:"Reponame"`
		// 镜像服务器地址

		Server *int64 `json:"Server,omitempty" name:"Server"`
		// 列表信息(见下面字段)

		Content []*string `json:"Content,omitempty" name:"Content"`
		// 仓库名，如nginx

		Repo_name *string `json:"Repo_name,omitempty" name:"Repo_name"`
		// 版本名称

		TagName *string `json:"TagName,omitempty" name:"TagName"`
		// 版本ID

		TagId *string `json:"TagId,omitempty" name:"TagId"`
		// 镜像ID

		ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
		// 大小

		Size *string `json:"Size,omitempty" name:"Size"`
		// 创建时间

		CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
		// 更新时间

		UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
		// 镜像制作者

		Author *string `json:"Author,omitempty" name:"Author"`
		// CPU架构

		Architecture *string `json:"Architecture,omitempty" name:"Architecture"`
		// Docker客户端版本

		DockerVersion *string `json:"DockerVersion,omitempty" name:"DockerVersion"`
		// 操作系统

		Os *string `json:"Os,omitempty" name:"Os"`
		// push时间

		PushTime *string `json:"PushTime,omitempty" name:"PushTime"`
		// 单位为字节

		SizeByte *string `json:"SizeByte,omitempty" name:"SizeByte"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ImageGetTagListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageGetTagListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstanceReleasedConfig struct {

	// 实例内存生效配置（相关key限定在tsf下发配置范围内）

	MemoryConfig *string `json:"MemoryConfig,omitempty" name:"MemoryConfig"`
	// 查询发布的配置，包括应用配置和全局配置

	ReleaseConfig *string `json:"ReleaseConfig,omitempty" name:"ReleaseConfig"`
}

type AuthMicroserviceV2 struct {

	// 服务 ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 服务名

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 服务是否存在

	IsNotExist *bool `json:"IsNotExist,omitempty" name:"IsNotExist"`
	// 帐号 appid

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 账号 uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 子账号 uin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type DescribeAuthorizationTypeRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeAuthorizationTypeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationTypeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetDownloadInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// COS鉴权信息

		Result *CosDownloadInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetDownloadInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetDownloadInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AssociateConfigWithGroupRequest struct {
	*tchttp.BaseRequest

	// 配置项id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组信息

	Groups []*GroupInfo `json:"Groups,omitempty" name:"Groups"`
	// 是否选择全部投递，1 表示全部，0或不填表示非全部

	SelectAll *int64 `json:"SelectAll,omitempty" name:"SelectAll"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 模糊搜索关键词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *AssociateConfigWithGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AssociateConfigWithGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowLastBatchStateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流批次最新状态

		Result *TaskFlowLastBatchState `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFlowLastBatchStateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowLastBatchStateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetOssTopologyGraphRequest struct {
	*tchttp.BaseRequest

	// 查询开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询开始时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
}

func (r *GetOssTopologyGraphRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetOssTopologyGraphRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModuleExecuteStatus struct {

	// 状态ID

	StatusId *string `json:"StatusId,omitempty" name:"StatusId"`
	// 状态名称

	StatusName *string `json:"StatusName,omitempty" name:"StatusName"`
	// 关联ID

	RelevanceId *string `json:"RelevanceId,omitempty" name:"RelevanceId"`
	// 当前状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 状态信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// 扩展字段

	Extension *string `json:"Extension,omitempty" name:"Extension"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type DescribePriceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 询价返回结果

		Result *TsfPrice `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePriceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePriceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ZipkinEndPoint struct {

	// 端点服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 端点IP地址（v4）

	Ipv4 *string `json:"Ipv4,omitempty" name:"Ipv4"`
	// 端点IP地址（v6）

	Ipv6 *string `json:"Ipv6,omitempty" name:"Ipv6"`
	// 端点端口号

	Port *int64 `json:"Port,omitempty" name:"Port"`
}

type ImageUserIsExists struct {

	// 子账号是否存在,true：存在；false：不存在

	IsExist *bool `json:"IsExist,omitempty" name:"IsExist"`
	// 主账号是否存在，true：存在；false：不存在

	MainIsExist *bool `json:"MainIsExist,omitempty" name:"MainIsExist"`
}

type MsInstance struct {

	// 机器实例ID信息

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 机器实例名称信息

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 服务运行的端口号

	Port *string `json:"Port,omitempty" name:"Port"`
	// 机器实例内网IP

	LanIp *string `json:"LanIp,omitempty" name:"LanIp"`
	// 机器实例外网IP

	WanIp *string `json:"WanIp,omitempty" name:"WanIp"`
	// 机器可用状态

	InstanceAvailableStatus *string `json:"InstanceAvailableStatus,omitempty" name:"InstanceAvailableStatus"`
	// 服务运行状态

	ServiceInstanceStatus *string `json:"ServiceInstanceStatus,omitempty" name:"ServiceInstanceStatus"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 机器TSF可用状态

	InstanceStatus *string `json:"InstanceStatus,omitempty" name:"InstanceStatus"`
	// 健康检查URL

	HealthCheckUrl *string `json:"HealthCheckUrl,omitempty" name:"HealthCheckUrl"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 应用程序包版本

	ApplicationPackageVersion *string `json:"ApplicationPackageVersion,omitempty" name:"ApplicationPackageVersion"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 服务状态，passing 在线，critical 离线

	ServiceStatus *string `json:"ServiceStatus,omitempty" name:"ServiceStatus"`
	// 注册时间

	RegistrationTime *int64 `json:"RegistrationTime,omitempty" name:"RegistrationTime"`
	// 上次心跳时间

	LastHeartbeatTime *int64 `json:"LastHeartbeatTime,omitempty" name:"LastHeartbeatTime"`
	// 实例注册id

	RegistrationId *string `json:"RegistrationId,omitempty" name:"RegistrationId"`
	// 屏蔽状态，hidden 为屏蔽，unhidden 为未屏蔽

	HiddenStatus *string `json:"HiddenStatus,omitempty" name:"HiddenStatus"`
	// 微服务类型

	AppMicroServiceType *string `json:"AppMicroServiceType,omitempty" name:"AppMicroServiceType"`
}

type TsfPageConfigReleaseLog struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置项发布日志数组

	Content []*ConfigReleaseLog `json:"Content,omitempty" name:"Content"`
}

type DescribeConfigReleaseLogsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页的配置项发布历史列表

		Result *TsfPageConfigReleaseLog `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeConfigReleaseLogsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigReleaseLogsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UninstallAgentScriptsRequest struct {
	*tchttp.BaseRequest

	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *UninstallAgentScriptsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UninstallAgentScriptsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AlarmPolicyResult struct {

	// PolicyId

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// PolicyName

	PolicyName *string `json:"PolicyName,omitempty" name:"PolicyName"`
	// EventPolicies

	EventPolicies []*EventPolicyResult `json:"EventPolicies,omitempty" name:"EventPolicies"`
	// EnabledEmail

	EnabledEmail *int64 `json:"EnabledEmail,omitempty" name:"EnabledEmail"`
	// EnabledSMS

	EnabledSMS *int64 `json:"EnabledSMS,omitempty" name:"EnabledSMS"`
	// Enabled

	Enabled *int64 `json:"Enabled,omitempty" name:"Enabled"`
	// Receivers

	Receivers []*AlarmReceiverResult `json:"Receivers,omitempty" name:"Receivers"`
	// AlarmSubId

	AlarmSubId *int64 `json:"AlarmSubId,omitempty" name:"AlarmSubId"`
	// UpdateTime

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// CreateTime

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// EnabledWeChat

	EnabledWeChat *string `json:"EnabledWeChat,omitempty" name:"EnabledWeChat"`
	// EnabledRtx

	EnabledRtx *string `json:"EnabledRtx,omitempty" name:"EnabledRtx"`
}

type DescribeMsRunningApplicationsRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// Offset值

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// Limit值

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeMsRunningApplicationsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMsRunningApplicationsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SimpleCluster struct {

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
}

type TsfPageSimpleCluster struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 简单集群列表

	Content []*SimpleCluster `json:"Content,omitempty" name:"Content"`
}

type UpdateApiRateLimitRulesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateApiRateLimitRulesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApiRateLimitRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfRecordCodeResult struct {

	// 操作类型术语

	Operations []*TypeCode `json:"Operations,omitempty" name:"Operations"`
	// 模块类型术语

	Modules []*TypeCode `json:"Modules,omitempty" name:"Modules"`
}

type CreateRegionRequest struct {
	*tchttp.BaseRequest

	// TRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
	// TRegionName

	TRegionName *string `json:"TRegionName,omitempty" name:"TRegionName"`
	// TRemark

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
}

func (r *CreateRegionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRegionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TerminateTaskFlowBatchRequest struct {
	*tchttp.BaseRequest

	// 工作流批次 ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
}

func (r *TerminateTaskFlowBatchRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *TerminateTaskFlowBatchRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageConfigSummaryV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置项列表

	Content []*ConfigSummary `json:"Content,omitempty" name:"Content"`
}

type CreateCkafkaResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateCkafkaResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateCkafkaResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateClusterRequest struct {
	*tchttp.BaseRequest

	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 私有网络ID

	VpcId *string `json:"VpcId,omitempty" name:"VpcId"`
	// 分配给集群容器和服务IP的CIDR

	ClusterCIDR *string `json:"ClusterCIDR,omitempty" name:"ClusterCIDR"`
	// 集群备注

	ClusterDesc *string `json:"ClusterDesc,omitempty" name:"ClusterDesc"`
	// 集群所属TSF地域

	TsfRegionId *string `json:"TsfRegionId,omitempty" name:"TsfRegionId"`
	// 集群所属TSF可用区

	TsfZoneId *string `json:"TsfZoneId,omitempty" name:"TsfZoneId"`
	// 私有网络子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 集群版本

	ClusterVersion *string `json:"ClusterVersion,omitempty" name:"ClusterVersion"`
	// 集群中每个Node上最大的Pod数量。取值范围4～256。不为2的幂值时会向上取最接近的2的幂值。

	MaxNodePodNum *uint64 `json:"MaxNodePodNum,omitempty" name:"MaxNodePodNum"`
	// 集群最大的service数量。取值范围32～32768，不为2的幂值时会向上取最接近的2的幂值。

	MaxClusterServiceNum *uint64 `json:"MaxClusterServiceNum,omitempty" name:"MaxClusterServiceNum"`
	// 需要绑定的数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// api地址

	KuberneteApiServer *string `json:"KuberneteApiServer,omitempty" name:"KuberneteApiServer"`
	// K : kubeconfig, S : service account

	KuberneteNativeType *string `json:"KuberneteNativeType,omitempty" name:"KuberneteNativeType"`
	// native secret

	KuberneteNativeSecret *string `json:"KuberneteNativeSecret,omitempty" name:"KuberneteNativeSecret"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateClusterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateClusterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeManagerLicensesRequest struct {
	*tchttp.BaseRequest

	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeManagerLicensesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeManagerLicensesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeletePathRewritesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeletePathRewritesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePathRewritesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ScalableRuleV2 struct {

	// RuleId

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// Name

	Name *string `json:"Name,omitempty" name:"Name"`
	// ExpandVmCountLimit

	ExpandVmCountLimit *int64 `json:"ExpandVmCountLimit,omitempty" name:"ExpandVmCountLimit"`
	// ShrinkVmCountLimit

	ShrinkVmCountLimit *int64 `json:"ShrinkVmCountLimit,omitempty" name:"ShrinkVmCountLimit"`
	// GroupCount

	GroupCount *int64 `json:"GroupCount,omitempty" name:"GroupCount"`
}

type DescribeResourceConfigResultV2 struct {

	// STS参数配置

	Sts *DescribeResourceConfigSts `json:"Sts,omitempty" name:"Sts"`
	// 许可信息

	License *DescribeResourceConfigLicense `json:"License,omitempty" name:"License"`
	// 部署组相关的参数配置

	Group *GroupResourceConfig `json:"Group,omitempty" name:"Group"`
	// 实例相关的参数配置

	Instance *InstanceResourceConfig `json:"Instance,omitempty" name:"Instance"`
	// Cluster相关配置信息

	Cluster *DescribeResourceConfigCluster `json:"Cluster,omitempty" name:"Cluster"`
	// 程序包相关配置信息

	Package *PackageConfig `json:"Package,omitempty" name:"Package"`
}

type UpdateGatewayQQMiniProgramAppSecretResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGatewayQQMiniProgramAppSecretResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayQQMiniProgramAppSecretResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ChangeApiUsableStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API 信息

		Result *ApiDetailInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ChangeApiUsableStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ChangeApiUsableStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeJvmMonitorMethodProfileResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 方法执行分析数据以及相关信息

		Result *MethodProfile `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeJvmMonitorMethodProfileResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeJvmMonitorMethodProfileResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListManagerJobInfoRequest struct {
	*tchttp.BaseRequest

	// 无

	ModuleName *string `json:"ModuleName,omitempty" name:"ModuleName"`
	// 无

	TriggerStatus *int64 `json:"TriggerStatus,omitempty" name:"TriggerStatus"`
	// 无

	JobDesc *string `json:"JobDesc,omitempty" name:"JobDesc"`
	// 无

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 无

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ListManagerJobInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListManagerJobInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CheckUploadInfoRequest struct {
	*tchttp.BaseRequest

	// 程序包类型

	PkgType *string `json:"PkgType,omitempty" name:"PkgType"`
	// COS上传信息

	UploadInfo *CosUploadInfo `json:"UploadInfo,omitempty" name:"UploadInfo"`
}

func (r *CheckUploadInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckUploadInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageMsInstanceWrong struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 微服务实例列表内容

	Content []*MsInstanceWrong `json:"Content,omitempty" name:"Content"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type ModifyRegionRequest struct {
	*tchttp.BaseRequest

	// TRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
	// TRegionName

	TRegionName *string `json:"TRegionName,omitempty" name:"TRegionName"`
	// TRemark

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
}

func (r *ModifyRegionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyRegionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowLog struct {

	// 批次历史 ID

	FlowLogId *string `json:"FlowLogId,omitempty" name:"FlowLogId"`
	// 工作流中任务数量

	TaskCount *int64 `json:"TaskCount,omitempty" name:"TaskCount"`
	// 工作流历史 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流可用状态

	State *string `json:"State,omitempty" name:"State"`
	// 工作流名称

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
	// 触发规则

	TriggerRule *TaskRule `json:"TriggerRule,omitempty" name:"TriggerRule"`
	// 工作流对应的图 ID

	GraphId *string `json:"GraphId,omitempty" name:"GraphId"`
	// 超时时间

	TimeOut *int64 `json:"TimeOut,omitempty" name:"TimeOut"`
}

type DisableRouteRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableRouteRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableRouteRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSimpleClustersResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TSF集群分页对象

		Result *TsfPageCluster `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSimpleClustersResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleClustersResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AppPkgList struct {

	// 程序包总量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 应用的包列表

	Content []*AppPkgInfo `json:"Content,omitempty" name:"Content"`
}

type GatewayGroupIds struct {

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 分组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

type CreateDeliveryConfigRequest struct {
	*tchttp.BaseRequest

	// 配置名

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 采集数据路径

	CollectPath []*string `json:"CollectPath,omitempty" name:"CollectPath"`
	// kafka vip

	KafkaVIp *string `json:"KafkaVIp,omitempty" name:"KafkaVIp"`
	// kafka vport

	KafkaVPort *string `json:"KafkaVPort,omitempty" name:"KafkaVPort"`
	// 指定kafka topic

	Topic *string `json:"Topic,omitempty" name:"Topic"`
	// 指定换行的标志

	LineRule *string `json:"LineRule,omitempty" name:"LineRule"`
	// 是否需要认证信息

	EnableAuth *bool `json:"EnableAuth,omitempty" name:"EnableAuth"`
	// 认证的用户名

	Username *string `json:"Username,omitempty" name:"Username"`
	// 认证的密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// kafka的投递信息

	KafkaInfos []*DeliveryKafkaInfo `json:"KafkaInfos,omitempty" name:"KafkaInfos"`
}

func (r *CreateDeliveryConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateDeliveryConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteApplicationRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DeleteApplicationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteApplicationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteNamespaceRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *DeleteNamespaceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteNamespaceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiAccessRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeApiAccessRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiAccessRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StopGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DeleteConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSingleContainerGroupsRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 排序字段，默认为 createTime字段，支持id， name， createTime字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，默认为1：倒序排序，0：正序，1：倒序

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量，默认为0，从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 部署组资源类型数组

	GroupResourceTypeList []*string `json:"GroupResourceTypeList,omitempty" name:"GroupResourceTypeList"`
	// 根据部署组状态过滤

	Status *string `json:"Status,omitempty" name:"Status"`
	// 无

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *DescribeSingleContainerGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSingleContainerGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RunJvmDeadLockCheckResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Jvm当前死锁详情

		Result *JvmLockDetail `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RunJvmDeadLockCheckResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RunJvmDeadLockCheckResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateMultiClusterDeliveryConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateMultiClusterDeliveryConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateMultiClusterDeliveryConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageClusterV2 struct {

	// 集群总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 集群列表

	Content []*ClusterV2 `json:"Content,omitempty" name:"Content"`
}

type CreateUnitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateUnitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateUnitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInvocationMetricScatterPlotResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 多值时间抽统计指标

		Result *InvocationMetricScatterPlot `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInvocationMetricScatterPlotResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationMetricScatterPlotResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RevocationConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项发布ID

	ConfigReleaseId *string `json:"ConfigReleaseId,omitempty" name:"ConfigReleaseId"`
}

func (r *RevocationConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RevocationConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Consumer struct {

	// ConsumerControllerName

	ConsumerControllerName *string `json:"ConsumerControllerName,omitempty" name:"ConsumerControllerName"`
	// ToProviderName

	ToProviderName *string `json:"ToProviderName,omitempty" name:"ToProviderName"`
	// ToProviderServiceName

	ToProviderServiceName *string `json:"ToProviderServiceName,omitempty" name:"ToProviderServiceName"`
}

type CreateApiAccessResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// SubDomain, 系统给该服务自动分配的域名

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateApiAccessResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateApiAccessResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseStage struct {

	// 阶段名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 任务节点信息

	Tasks []*ReleaseTask `json:"Tasks,omitempty" name:"Tasks"`
}

type TsfPageVmTaskV2 struct {

	// 任务总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 任务详情列表

	Content []*VmTask `json:"Content,omitempty" name:"Content"`
}

type CreateGatewayTagPluginRequest struct {
	*tchttp.BaseRequest

	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件类型 "Tag"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 参数配置的Json串

	TagPluginInfoList *string `json:"TagPluginInfoList,omitempty" name:"TagPluginInfoList"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateGatewayTagPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayTagPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CommonPkg struct {

	// 公共包名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 包所属的应用ID，在微服务网关相关应用中使用

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 包的描述信息

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 回调接口

	CallbackAction *string `json:"CallbackAction,omitempty" name:"CallbackAction"`
	// 服务类型

	ServiceType *string `json:"ServiceType,omitempty" name:"ServiceType"`
}

type ContainerGroupDeploy struct {

	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 业务容器初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 业务容器最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 业务容器初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 业务容器最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 端口映射

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// jvm参数

	JvmOpts *string `json:"JvmOpts,omitempty" name:"JvmOpts"`
	// 子网id

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// agent容器初始分配的 CPU 核数，对应 K8S request

	AgentCpuRequest *string `json:"AgentCpuRequest,omitempty" name:"AgentCpuRequest"`
	// agent容器最大分配的 CPU 核数，对应 K8S limit

	AgentCpuLimit *string `json:"AgentCpuLimit,omitempty" name:"AgentCpuLimit"`
	// agent容器初始分配的内存 MiB 数，对应 K8S request

	AgentMemRequest *string `json:"AgentMemRequest,omitempty" name:"AgentMemRequest"`
	// agent容器最大分配的内存 MiB 数，对应 K8S limit

	AgentMemLimit *string `json:"AgentMemLimit,omitempty" name:"AgentMemLimit"`
	// istioproxy容器初始分配的 CPU 核数，对应 K8S request

	IstioCpuRequest *string `json:"IstioCpuRequest,omitempty" name:"IstioCpuRequest"`
	// istioproxy容器最大分配的 CPU 核数，对应 K8S limit

	IstioCpuLimit *string `json:"IstioCpuLimit,omitempty" name:"IstioCpuLimit"`
	// istioproxy容器初始分配的内存 MiB 数，对应 K8S request

	IstioMemRequest *string `json:"IstioMemRequest,omitempty" name:"IstioMemRequest"`
	// istioproxy容器最大分配的内存 MiB 数，对应 K8S limit

	IstioMemLimit *string `json:"IstioMemLimit,omitempty" name:"IstioMemLimit"`
	// 部署组的环境变量数组，这里没有展示 tsf 使用的环境变量，只展示了用户设置的环境变量。

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// 健康检查配置信息，若不指定该参数，则默认不设置健康检查。

	HealthCheckSettings *HealthCheckSettings `json:"HealthCheckSettings,omitempty" name:"HealthCheckSettings"`
	// 是否部署Agent容器

	DeployAgent *bool `json:"DeployAgent,omitempty" name:"DeployAgent"`
	// 部署组备注

	Alias *string `json:"Alias,omitempty" name:"Alias"`
	// 是否创建 k8s service

	DisableService *bool `json:"DisableService,omitempty" name:"DisableService"`
	// service 是否为 headless 类型

	HeadlessService *bool `json:"HeadlessService,omitempty" name:"HeadlessService"`
	// TcrRepoInfo值

	TcrRepoInfo *TcrRepoInfo `json:"TcrRepoInfo,omitempty" name:"TcrRepoInfo"`
	// 数据卷信息，list

	VolumeInfos []*VolumeInfo `json:"VolumeInfos,omitempty" name:"VolumeInfos"`
	// 数据卷挂载信息，list

	VolumeMountInfos []*VolumeMountInfo `json:"VolumeMountInfos,omitempty" name:"VolumeMountInfos"`
	// KubeInjectEnable值

	KubeInjectEnable *bool `json:"KubeInjectEnable,omitempty" name:"KubeInjectEnable"`
	// 仓库类型 (person, tcr)

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
	// 预热配置设置

	WarmupSetting *WarmupSetting `json:"WarmupSetting,omitempty" name:"WarmupSetting"`
	// Envoy网关服务配置

	GatewayConfig *GatewayConfig `json:"GatewayConfig,omitempty" name:"GatewayConfig"`
	// 无

	MaxUnavailable *string `json:"MaxUnavailable,omitempty" name:"MaxUnavailable"`
	// 无

	SecretName *string `json:"SecretName,omitempty" name:"SecretName"`
	// 无

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 无

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 无

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 无

	UserEnvs []*EnvsV2 `json:"UserEnvs,omitempty" name:"UserEnvs"`
	// 无

	AllowPlainYamlDeploy *bool `json:"AllowPlainYamlDeploy,omitempty" name:"AllowPlainYamlDeploy"`
	// 无

	MaxSurge *string `json:"MaxSurge,omitempty" name:"MaxSurge"`
	// 无

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 无

	SchedulingStrategy *SchedulingStrategy `json:"SchedulingStrategy,omitempty" name:"SchedulingStrategy"`
	// 无

	AgentProfileList []*AgentProfile `json:"AgentProfileList,omitempty" name:"AgentProfileList"`
	// 无

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 无

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 无

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 无

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 无

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 无

	SessionAffinityTimeoutSeconds *int64 `json:"SessionAffinityTimeoutSeconds,omitempty" name:"SessionAffinityTimeoutSeconds"`
	// 无

	OpenSessionAffinity *bool `json:"OpenSessionAffinity,omitempty" name:"OpenSessionAffinity"`
	// 无

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type DisableNamespaceAffinityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 停用命名空间就近访问策略操作是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableNamespaceAffinityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableNamespaceAffinityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LaneGroups struct {

	// 总个数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 泳道部署组列表

	Content []*LaneGroup `json:"Content,omitempty" name:"Content"`
}

type TsfPageAuthorization struct {

	// 鉴权规则是否被启用

	IsEnabled *bool `json:"IsEnabled,omitempty" name:"IsEnabled"`
	// 鉴权规则列表

	Conditions []*AuthCondition `json:"Conditions,omitempty" name:"Conditions"`
}

type GetApmEsAuthInfoRequest struct {
	*tchttp.BaseRequest
}

func (r *GetApmEsAuthInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetApmEsAuthInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PingTsfByMultiCloudRequest struct {
	*tchttp.BaseRequest
}

func (r *PingTsfByMultiCloudRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *PingTsfByMultiCloudRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ProgramItem struct {

	// 数据项ID

	ProgramItemId *string `json:"ProgramItemId,omitempty" name:"ProgramItemId"`
	// 资源

	Resource *Resource `json:"Resource,omitempty" name:"Resource"`
	// 数据值列表

	ValueList []*string `json:"ValueList,omitempty" name:"ValueList"`
	// 全选标识，true: 全选；false: 非全选

	IsAll *bool `json:"IsAll,omitempty" name:"IsAll"`
	// 创建时间

	CreationTime *int64 `json:"CreationTime,omitempty" name:"CreationTime"`
	// 最后更新时间

	LastUpdateTime *int64 `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 删除标识，true: 可删除；false: 不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
}

type DeleteImageTagsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 批量删除操作是否成功。
		// true：成功。
		// false：失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteImageTagsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteImageTagsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RelateGroupToScalableRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 请求结果,true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RelateGroupToScalableRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RelateGroupToScalableRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RevocationConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：回滚成功；false：回滚失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RevocationConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RevocationConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyAuthorizationInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyAuthorizationInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyAuthorizationInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Config struct {

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 配置项版本描述

	ConfigVersionDesc *string `json:"ConfigVersionDesc,omitempty" name:"ConfigVersionDesc"`
	// 配置项值

	ConfigValue *string `json:"ConfigValue,omitempty" name:"ConfigValue"`
	// 配置项类型

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
	// 创建时间

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 删除标识，true：可以删除；false：不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 最后更新时间

	LastUpdateTime *string `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 配置项版本数量

	ConfigVersionCount *int64 `json:"ConfigVersionCount,omitempty" name:"ConfigVersionCount"`
}

type OverviewLicenseResourceUsage struct {

	// 已注册实例数目

	ConsulInstanceCount *int64 `json:"ConsulInstanceCount,omitempty" name:"ConsulInstanceCount"`
}

type TsfApiListResponse struct {

	// 数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// API 列表

	Content []*MsApiArray `json:"Content,omitempty" name:"Content"`
}

type CreateServiceInstanceRequest struct {
	*tchttp.BaseRequest

	// ModuleId

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// IpList

	IpList []*IpListResult `json:"IpList,omitempty" name:"IpList"`
	// Ports

	Ports []*PortsResult `json:"Ports,omitempty" name:"Ports"`
}

func (r *CreateServiceInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateServiceInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApplicatoinServerLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 日志内容

		Result *TsfPageApplicatoinServerLog `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicatoinServerLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicatoinServerLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type HideInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *HideInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *HideInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MonitorStatisticsPolicyResultV2 struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*MonitorStatisticsPolicy `json:"Content,omitempty" name:"Content"`
}

type OperateUnitNsByMultiCloudRequest struct {
	*tchttp.BaseRequest

	// 网关实例ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 超云TsfId

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// 单元范围信息

	UnitNamespaceList []*UnitNamespace `json:"UnitNamespaceList,omitempty" name:"UnitNamespaceList"`
}

func (r *OperateUnitNsByMultiCloudRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *OperateUnitNsByMultiCloudRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContinueResourceBatchOperationRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 需要执行的批次索引

	BatchNum *int64 `json:"BatchNum,omitempty" name:"BatchNum"`
}

func (r *ContinueResourceBatchOperationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ContinueResourceBatchOperationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigsRequest struct {
	*tchttp.BaseRequest

	// 配置项ID，不传入时查询全量，高优先级

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数，默认为20

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 配置项ID列表，不传入时查询全量，低优先级

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
	// 配置项名称，精确查询，不传入时查询全量

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本，精确查询，不传入时查询全量

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 按时间排序：creation_time；按版本号排序：config_version

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序传 0，降序传 1

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
}

func (r *DescribePublicConfigsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerAdditionalResourceRequirement struct {

	// CPU 核数

	Cpu *string `json:"Cpu,omitempty" name:"Cpu"`
	// 内存 MiB 数

	Mem *string `json:"Mem,omitempty" name:"Mem"`
}

type Resource struct {

	// 资源ID

	ResourceId *string `json:"ResourceId,omitempty" name:"ResourceId"`
	// 资源编码

	ResourceCode *string `json:"ResourceCode,omitempty" name:"ResourceCode"`
	// 资源名称

	ResourceName *string `json:"ResourceName,omitempty" name:"ResourceName"`
	// 资源所属产品编码

	ServiceCode *string `json:"ServiceCode,omitempty" name:"ServiceCode"`
	// 选取资源使用的Action

	ResourceAction *string `json:"ResourceAction,omitempty" name:"ResourceAction"`
	// 资源数据查询的ID字段名

	IdField *string `json:"IdField,omitempty" name:"IdField"`
	// 资源数据查询的名称字段名

	NameField *string `json:"NameField,omitempty" name:"NameField"`
	// 资源数据查询的ID过滤字段名

	SelectIdsField *string `json:"SelectIdsField,omitempty" name:"SelectIdsField"`
	// 创建时间

	CreationTime *int64 `json:"CreationTime,omitempty" name:"CreationTime"`
	// 最后更新时间

	LastUpdateTime *int64 `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 删除标识

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 资源描述

	ResourceDesc *string `json:"ResourceDesc,omitempty" name:"ResourceDesc"`
	// 是否可以选择全部

	CanSelectAll *bool `json:"CanSelectAll,omitempty" name:"CanSelectAll"`
	// 资源数据查询的模糊查询字段名

	SearchWordField *string `json:"SearchWordField,omitempty" name:"SearchWordField"`
	// 排序

	Index *int64 `json:"Index,omitempty" name:"Index"`
}

type DeployTsfModulesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeployTsfModulesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployTsfModulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListScalableRuleResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*ScalableRule `json:"Content,omitempty" name:"Content"`
}

type DescribeSimpleReleasesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TSF发布单分页对象

		Result *TsfPageRelease `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSimpleReleasesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleReleasesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type KubeNamespace struct {

	// 名称

	Name *string `json:"Name,omitempty" name:"Name"`
}

type BuildTaskInfo struct {

	// 构建任务id

	BuildTaskId *string `json:"BuildTaskId,omitempty" name:"BuildTaskId"`
	// - STOP
	// 未启动
	// - BUILDING
	// 构建中
	// - BUILD_SUCCESS
	// 构建成功
	// - BUILD_FAILED
	// 构建失败
	// - CANCEL
	// 用户取消

	Status *string `json:"Status,omitempty" name:"Status"`
	// 构建包的名称

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 构建失败的原因

	ErrorMessage *string `json:"ErrorMessage,omitempty" name:"ErrorMessage"`
	// 开始时间，unix 时间戳，精确到毫秒。

	StartTime *uint64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间，unix 时间戳，精确到毫秒。

	EndTime *uint64 `json:"EndTime,omitempty" name:"EndTime"`
	// 镜像版本

	Tag *string `json:"Tag,omitempty" name:"Tag"`
}

type DescribeTaskExecuteRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务执行记录翻页查询结果

		Result *TaskExecuteRecordPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskExecuteRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShirkGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ShirkGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShirkGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateHealthCheckSettingsRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 是否能使健康检查

	EnableHealthCheck *bool `json:"EnableHealthCheck,omitempty" name:"EnableHealthCheck"`
	// 健康检查配置

	HealthCheckSettings *HealthCheckSettings `json:"HealthCheckSettings,omitempty" name:"HealthCheckSettings"`
}

func (r *UpdateHealthCheckSettingsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateHealthCheckSettingsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EventStatistics struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 事件统计内容

	Content []*EventStatisticsResult `json:"Content,omitempty" name:"Content"`
}

type BindPluginRequest struct {
	*tchttp.BaseRequest

	// 分组/API绑定插件列表

	PluginInstanceList []*GatewayPluginBoundParam `json:"PluginInstanceList,omitempty" name:"PluginInstanceList"`
}

func (r *BindPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BindPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CheckTaskRuleRequest struct {
	*tchttp.BaseRequest

	// 触发规则类型，Cron（Quartz规范） 或者 Repeat （周期执行）

	RuleType *string `json:"RuleType,omitempty" name:"RuleType"`
	// Cron表达式，当触发规则为Cron时，必填

	Expression *string `json:"Expression,omitempty" name:"Expression"`
	// 执行间隔，当触发规则为Repeat时，必填。

	RepeatInterval *uint64 `json:"RepeatInterval,omitempty" name:"RepeatInterval"`
}

func (r *CheckTaskRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckTaskRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFilebeatConfigPageResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// filebeat 配置分页数据

		Result *FilebeatConfigPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFilebeatConfigPageResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFilebeatConfigPageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployTsfModulesRequest struct {
	*tchttp.BaseRequest

	// ModuleIds

	ModuleIds []*string `json:"ModuleIds,omitempty" name:"ModuleIds"`
	// Instances

	Instances []*string `json:"Instances,omitempty" name:"Instances"`
}

func (r *DeployTsfModulesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployTsfModulesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListCloudMicroServiceFindPagedListRequest struct {
	*tchttp.BaseRequest

	// NamespaceName

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// Offset

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// Limit

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *ListCloudMicroServiceFindPagedListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListCloudMicroServiceFindPagedListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetUpKubeInjectResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result *SetUpKubeInjectResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SetUpKubeInjectResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetUpKubeInjectResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConsulAccessInfo struct {

	// 注册中心地址列表

	Addrs []*string `json:"Addrs,omitempty" name:"Addrs"`
}

type DescribeTsfRegionsRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeTsfRegionsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTsfRegionsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetContainGroupDeployInfoRequest struct {
	*tchttp.BaseRequest

	// 实例所属groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *GetContainGroupDeployInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetContainGroupDeployInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ZipkinBinaryAnnotationV2 struct {

	// 注解键

	Key *string `json:"Key,omitempty" name:"Key"`
	// 注解值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 注解端点信息

	Endpoint *ZipkinEndpointV2 `json:"Endpoint,omitempty" name:"Endpoint"`
}

type OverviewHostResourceUsage struct {

	// 运行云主机数

	RunHostCount *int64 `json:"RunHostCount,omitempty" name:"RunHostCount"`
	// 云主机总数

	HostCount *int64 `json:"HostCount,omitempty" name:"HostCount"`
}

type CreateBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// 日志配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 日志配置项描述

	ConfigDesc *string `json:"ConfigDesc,omitempty" name:"ConfigDesc"`
	// 日志配置项路径

	ConfigPath *string `json:"ConfigPath,omitempty" name:"ConfigPath"`
	// 日志配置项标签

	ConfigTags *string `json:"ConfigTags,omitempty" name:"ConfigTags"`
	// 日志配置项解析规则

	ConfigSchema *BusinessLogConfigSchema `json:"ConfigSchema,omitempty" name:"ConfigSchema"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateTaskFlowResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流 ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateTaskFlowResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateTaskFlowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRecordCodesRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeRecordCodesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRecordCodesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskFlowsRequest struct {
	*tchttp.BaseRequest

	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 检索状态值

	State *string `json:"State,omitempty" name:"State"`
	// 无

	Ids []*string `json:"Ids,omitempty" name:"Ids"`
}

func (r *DescribeTaskFlowsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskFlowsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AddClusterInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 添加云主机的返回列表

		Result *AddInstanceResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AddClusterInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AddClusterInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeImageTagsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询的权限数据对象

		Result *ImageTagsResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeImageTagsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImageTagsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceConfigRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeResourceConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyAuthorizationTypeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：更新成功；false：更新失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyAuthorizationTypeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyAuthorizationTypeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询的权限数据对象

		Result *ContainGroupResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageApplicationV2 struct {

	// 应用总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 应用信息列表

	Content []*ApplicationForPage `json:"Content,omitempty" name:"Content"`
}

type DeliverFilebeatConfigRequest struct {
	*tchttp.BaseRequest

	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DeliverFilebeatConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeliverFilebeatConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FileConfigReleaseLog struct {

	// 配置项发布日志ID

	ConfigReleaseLogId *string `json:"ConfigReleaseLogId,omitempty" name:"ConfigReleaseLogId"`
	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 上次配置项ID

	LastConfigId *string `json:"LastConfigId,omitempty" name:"LastConfigId"`
	// 上次配置项名称

	LastConfigName *string `json:"LastConfigName,omitempty" name:"LastConfigName"`
	// 上次配置项版本

	LastConfigVersion *string `json:"LastConfigVersion,omitempty" name:"LastConfigVersion"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
	// 发布状态

	ReleaseStatus *string `json:"ReleaseStatus,omitempty" name:"ReleaseStatus"`
	// 发布时间

	ReleaseTime *string `json:"ReleaseTime,omitempty" name:"ReleaseTime"`
	// 回滚标识

	RollbackFlag *bool `json:"RollbackFlag,omitempty" name:"RollbackFlag"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
}

type RecordV2 struct {

	// 账号AppId

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 账号Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 账号SubAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// 操作记录Id

	RecordId *string `json:"RecordId,omitempty" name:"RecordId"`
	// 模块类型

	ModuleType *string `json:"ModuleType,omitempty" name:"ModuleType"`
	// 操作类型

	OperationType *string `json:"OperationType,omitempty" name:"OperationType"`
	// 操作资源信息

	OperationResource *string `json:"OperationResource,omitempty" name:"OperationResource"`
	// 操作记录描述

	OperationMsg *string `json:"OperationMsg,omitempty" name:"OperationMsg"`
	// 操作记录时间

	OperationTime *string `json:"OperationTime,omitempty" name:"OperationTime"`
	// 操作状态

	OperationStatus *string `json:"OperationStatus,omitempty" name:"OperationStatus"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 昵称

	Nickname *string `json:"Nickname,omitempty" name:"Nickname"`
}

type ReleaseTaskRun struct {

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务执行状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 开始时间

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
}

type CreateAbnormalMetricsConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateAbnormalMetricsConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAbnormalMetricsConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApplicationMicroserviceTypesRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeApplicationMicroserviceTypesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationMicroserviceTypesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableRouteRequest struct {
	*tchttp.BaseRequest

	// 路由ID

	RouteId *string `json:"RouteId,omitempty" name:"RouteId"`
	// 路由启用描述

	ReleaseLog *string `json:"ReleaseLog,omitempty" name:"ReleaseLog"`
}

func (r *EnableRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组所属的应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组所属命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 部署组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 部署组资源类型

	GroupResourceType *string `json:"GroupResourceType,omitempty" name:"GroupResourceType"`
	// 部署组备注

	Alias *string `json:"Alias,omitempty" name:"Alias"`
	// k8s命名空间

	K8sNamespaceName *string `json:"K8sNamespaceName,omitempty" name:"K8sNamespaceName"`
}

func (r *CreateGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRouteRulesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeRouteRulesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRouteRulesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TagRouteItemList struct {

	// 标签路由规则项Id

	TagRouteId *string `json:"TagRouteId,omitempty" name:"TagRouteId"`
	// 标签路由，标签类型，表示系统标签或自定义标签, 系统标签： S, 自定义标签： U

	SourceType *string `json:"SourceType,omitempty" name:"SourceType"`
	// 标签路由匹配源字段

	SourceField *string `json:"SourceField,omitempty" name:"SourceField"`
	// 标签路由匹配源规则, 等于: EQUAL， 不等于： NOT_EQUAL， 包含： IN， 不包含： NOT_IN， 正则表达式： REGEX

	SourceMatchRule *string `json:"SourceMatchRule,omitempty" name:"SourceMatchRule"`
	// 标签路由匹配源取值

	SourceValue *string `json:"SourceValue,omitempty" name:"SourceValue"`
	// 标签路由匹配目标字段

	TargetField *string `json:"TargetField,omitempty" name:"TargetField"`
	// 标签路由匹配目标取值

	TargetValue *string `json:"TargetValue,omitempty" name:"TargetValue"`
	// 标签路由所属路由Id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
}

type DeployContainerGroupByPlainYamlRequest struct {
	*tchttp.BaseRequest

	// 容器部署组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 容器部署组的 Yaml 信息，不包含 TSF 的信息。包括了 service 和 deployment。Base64 编码

	ContainerGroupYaml *string `json:"ContainerGroupYaml,omitempty" name:"ContainerGroupYaml"`
}

func (r *DeployContainerGroupByPlainYamlRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployContainerGroupByPlainYamlRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroserviceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务详情实例列表

		Result *TsfPageMsInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroserviceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayWeChatMiniProgramLoginPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGatewayWeChatMiniProgramLoginPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayWeChatMiniProgramLoginPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteApiGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteApiGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteApiGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeImageFeaturesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 镜像特征列表

		Result *TsfPageImageFeature `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeImageFeaturesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImageFeaturesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MultiValueDataPoints struct {

	// 多值数据点

	Points []*MultiValue `json:"Points,omitempty" name:"Points"`
	// 指标名称

	MetricName *string `json:"MetricName,omitempty" name:"MetricName"`
	// 多值数据点key列表，每个值表示当前数据点所在区域的下限

	PointKeys []*string `json:"PointKeys,omitempty" name:"PointKeys"`
}

type DescribeRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作记录分页列表

		Result *TsfPageRecordV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageSimpleApplication struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 简单应用列表

	Content []*SimpleApplication `json:"Content,omitempty" name:"Content"`
}

type UpdateCircuitBreakerRuleRequest struct {
	*tchttp.BaseRequest

	// 熔断规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 熔断规则微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务所属命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 目标服务名

	TargetServiceName *string `json:"TargetServiceName,omitempty" name:"TargetServiceName"`
	// 目标服务所属命名空间

	TargetNamespaceId *string `json:"TargetNamespaceId,omitempty" name:"TargetNamespaceId"`
	// 熔断策略列表

	StrategyList []*CircuitBreakerStrategy `json:"StrategyList,omitempty" name:"StrategyList"`
	// Enable值

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
	// 熔断隔离级别

	IsolationLevel *string `json:"IsolationLevel,omitempty" name:"IsolationLevel"`
	// 微服务所属命名空间

	TargetNamespaceName *string `json:"TargetNamespaceName,omitempty" name:"TargetNamespaceName"`
}

func (r *UpdateCircuitBreakerRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateCircuitBreakerRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowBatchRecordRequest struct {
	*tchttp.BaseRequest

	// 工作流批次ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 工作流批次历史ID

	FlowBatchLogId *string `json:"FlowBatchLogId,omitempty" name:"FlowBatchLogId"`
}

func (r *DescribeFlowBatchRecordRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowBatchRecordRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DockerForUseV2 struct {

	// 仓库中心地址

	Server *string `json:"Server,omitempty" name:"Server"`
	// 用户名

	Username *string `json:"Username,omitempty" name:"Username"`
}

type DescribeNamespaceServiceOverviewResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 命名空间维度的服务概览列表

		Result *TsfPageNamespaceServiceOverview `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeNamespaceServiceOverviewResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceServiceOverviewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineDeployTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// CVM部署任务的taskID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasePipelineDeployTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineDeployTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RevokeFileConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项发布ID

	ConfigReleaseId *string `json:"ConfigReleaseId,omitempty" name:"ConfigReleaseId"`
}

func (r *RevokeFileConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RevokeFileConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageGatewayPluginModel struct {

	// 条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 网关实例

	Content []*GatewayPluginModel `json:"Content,omitempty" name:"Content"`
}

type DescribeCircuitBreakerRulesRequest struct {
	*tchttp.BaseRequest

	// 每页展示的条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 搜索关键词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 熔断规则微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务所属命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 熔断级别（用于过滤）

	IsolationLevel *string `json:"IsolationLevel,omitempty" name:"IsolationLevel"`
}

func (r *DescribeCircuitBreakerRulesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCircuitBreakerRulesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseRunInfo struct {

	// 执行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
	// 执行状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 任务数

	TaskCount *int64 `json:"TaskCount,omitempty" name:"TaskCount"`
	// 开始时间

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
	// 主帐号

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 子帐号

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// 昵称

	Nickname *string `json:"Nickname,omitempty" name:"Nickname"`
}

type MemoryPicture struct {

	// 内存最大值

	Max []*CurvePoint `json:"Max,omitempty" name:"Max"`
	// 已用内存大小

	Used []*CurvePoint `json:"Used,omitempty" name:"Used"`
	// 系统分配内存大小

	Committed []*CurvePoint `json:"Committed,omitempty" name:"Committed"`
}

type UpdateRepositoryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新仓库是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateRepositoryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateRepositoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateAndDownloadTemplateRequest struct {
	*tchttp.BaseRequest

	// ProjectId

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
	// ProjectName

	ProjectName *string `json:"ProjectName,omitempty" name:"ProjectName"`
	// BasePackage

	BasePackage *string `json:"BasePackage,omitempty" name:"BasePackage"`
	// PomGroupId

	PomGroupId *string `json:"PomGroupId,omitempty" name:"PomGroupId"`
	// PomArtifactId

	PomArtifactId *string `json:"PomArtifactId,omitempty" name:"PomArtifactId"`
	// PomVersion

	PomVersion *string `json:"PomVersion,omitempty" name:"PomVersion"`
	// PomName

	PomName *string `json:"PomName,omitempty" name:"PomName"`
	// PomDesc

	PomDesc *string `json:"PomDesc,omitempty" name:"PomDesc"`
	// GetMethod

	GetMethod *string `json:"GetMethod,omitempty" name:"GetMethod"`
	// 微服务数组

	Ms []*Ms `json:"Ms,omitempty" name:"Ms"`
}

func (r *CreateAndDownloadTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAndDownloadTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRouteRuleRequest struct {
	*tchttp.BaseRequest

	// 路由规则id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
}

func (r *DeleteRouteRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRouteRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupBusinessLogConfigsRequest struct {
	*tchttp.BaseRequest

	// 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeGroupBusinessLogConfigsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupBusinessLogConfigsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageBusinessLogConfigV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 业务日志配置项列表

	Content []*BusinessLogConfig `json:"Content,omitempty" name:"Content"`
}

type ModifyResourceUsageConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyResourceUsageConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyResourceUsageConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableLaneRuleRequest struct {
	*tchttp.BaseRequest

	// 泳道规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *EnableLaneRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableLaneRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableNamespaceAffinityRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *EnableNamespaceAffinityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableNamespaceAffinityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerGroupPlainYaml struct {

	// 简单 Yaml

	Yaml *string `json:"Yaml,omitempty" name:"Yaml"`
}

type DescribeGroupResourceUsageRequest struct {
	*tchttp.BaseRequest

	// 是否无视权限查询全租户的，默认 true

	All *bool `json:"All,omitempty" name:"All"`
}

func (r *DescribeGroupResourceUsageRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupResourceUsageRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PagedProductHelp struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 产品帮助列表

	Content []*ProductHelp `json:"Content,omitempty" name:"Content"`
}

type CreateProductNewsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateProductNewsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateProductNewsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUnitNamespaceListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 单元化命名空间数组

		Result []*UnitNamespace `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUnitNamespaceListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitNamespaceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTraceRequest struct {
	*tchttp.BaseRequest

	// InstanceId

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// EndpointName

	EndpointName *string `json:"EndpointName,omitempty" name:"EndpointName"`
}

func (r *GetTraceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTraceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VisitAccount struct {

	// 无

	VisitAppId *string `json:"VisitAppId,omitempty" name:"VisitAppId"`
	// 无

	VisitUin *string `json:"VisitUin,omitempty" name:"VisitUin"`
	// 无

	VisitName *string `json:"VisitName,omitempty" name:"VisitName"`
	// 无

	VisitSubAccountUin *string `json:"VisitSubAccountUin,omitempty" name:"VisitSubAccountUin"`
	// 无

	VisitPassword *string `json:"VisitPassword,omitempty" name:"VisitPassword"`
	// 无

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 无

	ExpireTime *string `json:"ExpireTime,omitempty" name:"ExpireTime"`
	// 是否满人

	Full *bool `json:"Full,omitempty" name:"Full"`
	// 当前是否体验账号

	Visit *bool `json:"Visit,omitempty" name:"Visit"`
}

type DescribeConfigTemplatesRequest struct {
	*tchttp.BaseRequest

	// 配置模板名称

	ConfigTemplateName *string `json:"ConfigTemplateName,omitempty" name:"ConfigTemplateName"`
	// 配置模板对应的微服务框架

	ConfigTemplateType *string `json:"ConfigTemplateType,omitempty" name:"ConfigTemplateType"`
	// 距离第一条的偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 无

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 按时间排序：creation_time；按名称排序：config_name

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序传 0，降序传 1

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
	// 无

	ConfigTemplateIdList []*string `json:"ConfigTemplateIdList,omitempty" name:"ConfigTemplateIdList"`
}

func (r *DescribeConfigTemplatesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigTemplatesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeOverviweServiceRequest struct {
	*tchttp.BaseRequest

	// 是否无视权限查询全租户的，默认 true

	All *bool `json:"All,omitempty" name:"All"`
}

func (r *DescribeOverviweServiceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeOverviweServiceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetReleasePipelineRunTaskRollbackRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 执行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 是否允许回滚，true:允许

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
}

func (r *SetReleasePipelineRunTaskRollbackRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetReleasePipelineRunTaskRollbackRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PkgList struct {

	// 程序包总量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 程序包信息列表

	Content []*PkgInfo `json:"Content,omitempty" name:"Content"`
	// 程序包仓库id

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
	// 程序包仓库类型

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
	// 程序包仓库名称

	RepositoryName *string `json:"RepositoryName,omitempty" name:"RepositoryName"`
}

type ServiceSetting struct {

	// 0:公网, 1:集群内访问, 2：NodePort, 3: VPC 内网访问

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 容器端口映射

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 是否创建 k8s service，默认为 false

	DisableService *bool `json:"DisableService,omitempty" name:"DisableService"`
	// service 是否为 headless 类型

	HeadlessService *bool `json:"HeadlessService,omitempty" name:"HeadlessService"`
	// 当为 true 且 DisableService 也为 true 时，会删除之前创建的 service，请小心使用

	AllowDeleteService *bool `json:"AllowDeleteService,omitempty" name:"AllowDeleteService"`
	// 开启SessionAffinity，true为开启，false为不开启，默认为false

	OpenSessionAffinity *bool `json:"OpenSessionAffinity,omitempty" name:"OpenSessionAffinity"`
	// SessionAffinity会话时间，默认10800

	SessionAffinityTimeoutSeconds *int64 `json:"SessionAffinityTimeoutSeconds,omitempty" name:"SessionAffinityTimeoutSeconds"`
}

type ShardArgument struct {

	// 分片参数 KEY，整形, 范围 [1,1000]

	ShardKey *uint64 `json:"ShardKey,omitempty" name:"ShardKey"`
	// 分片参数 VALUE

	ShardValue *string `json:"ShardValue,omitempty" name:"ShardValue"`
}

type ModifyNamespaceCodeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：更新成功；false：更新失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyNamespaceCodeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyNamespaceCodeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSingleContainerGroupsResultV2 struct {

	// 列表数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表内容

	Content []*DescribeSingleContainerGroups `json:"Content,omitempty" name:"Content"`
}

type TsfEventAttribute struct {

	// 属性 key

	Key *string `json:"Key,omitempty" name:"Key"`
	// 属性 Value

	Value *string `json:"Value,omitempty" name:"Value"`
}

type BindApiGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *BindApiGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BindApiGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchRealtimeStdoutLogRequest struct {
	*tchttp.BaseRequest

	// 机器实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 实时日志基准时间戳

	RealtimeTs *uint64 `json:"RealtimeTs,omitempty" name:"RealtimeTs"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *SearchRealtimeStdoutLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchRealtimeStdoutLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShrinkinstanceScriptsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ShrinkinstanceScriptsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShrinkinstanceScriptsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ValidateLogSchemaRequest struct {
	*tchttp.BaseRequest

	// 解析规则类型

	SchemaType *uint64 `json:"SchemaType,omitempty" name:"SchemaType"`
	// 解析规则内容，包含解析规则时间格式和解析规则内容

	SchemaPatternLayout *string `json:"SchemaPatternLayout,omitempty" name:"SchemaPatternLayout"`
}

func (r *ValidateLogSchemaRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ValidateLogSchemaRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateServerlessGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 创建成功的部署组ID，返回null表示失败

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateServerlessGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateServerlessGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeOverviewResourceRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeOverviewResourceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeOverviewResourceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUploadInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// COS上传信息

		Result *CosUploadInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUploadInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUploadInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ExpandGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ExpandGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExpandGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiRateLimitRulesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 限流结果

		Result []*ApiRateLimitRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApiRateLimitRulesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiRateLimitRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路由详情信息

		Result *RouteV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceConfigCluster struct {

	// 返回给前端的控制信息

	Container *DescribeResourceConfigClusterContainer `json:"Container,omitempty" name:"Container"`
}

type DescribeBillingOperationRecordsRequest struct {
	*tchttp.BaseRequest

	// 搜索词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeBillingOperationRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBillingOperationRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRatelimitResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Rule列表

		Result *RatelimitListResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRatelimitResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRatelimitResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RegisterImageUserRequest struct {
	*tchttp.BaseRequest

	// 密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// 确认密码

	ConfirmPassword *string `json:"ConfirmPassword,omitempty" name:"ConfirmPassword"`
}

func (r *RegisterImageUserRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RegisterImageUserRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateFilebeatConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateFilebeatConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateFilebeatConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReassociateBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// 原关联日志配置ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 新关联日志配置ID

	NewConfigId *string `json:"NewConfigId,omitempty" name:"NewConfigId"`
	// TSF应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// TSF部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *ReassociateBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReassociateBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowBatch struct {

	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流历史 ID

	FlowLogId *string `json:"FlowLogId,omitempty" name:"FlowLogId"`
	// 工作流批次历史 ID

	FlowBatchLogId *string `json:"FlowBatchLogId,omitempty" name:"FlowBatchLogId"`
	// 工作流批次 ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 状态

	State *string `json:"State,omitempty" name:"State"`
	// 触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 预计触发时间

	ScheduleFireTime *int64 `json:"ScheduleFireTime,omitempty" name:"ScheduleFireTime"`
	// 开始执行时间

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束执行时间

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
	// 批次历史数量

	HistoryCount *int64 `json:"HistoryCount,omitempty" name:"HistoryCount"`
	// 执行耗时

	SpanTime *int64 `json:"SpanTime,omitempty" name:"SpanTime"`
	// 工作流名称

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
	// 超时时间

	TimeOut *int64 `json:"TimeOut,omitempty" name:"TimeOut"`
}

type DeleteProgramRequest struct {
	*tchttp.BaseRequest

	// 数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
}

func (r *DeleteProgramRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteProgramRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupList struct {

	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
}

type LaneRule struct {

	// 泳道规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 泳道规则名称

	RuleName *string `json:"RuleName,omitempty" name:"RuleName"`
	// 优先级

	Priority *int64 `json:"Priority,omitempty" name:"Priority"`
	// 备注

	Remark *string `json:"Remark,omitempty" name:"Remark"`
	// 泳道规则标签列表

	RuleTagList []*LaneRuleTag `json:"RuleTagList,omitempty" name:"RuleTagList"`
	// 泳道规则标签关系

	RuleTagRelationship *string `json:"RuleTagRelationship,omitempty" name:"RuleTagRelationship"`
	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 开启状态

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type ThreadTraceGroupData struct {

	// trace ID字串

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// trace字符串（栈信息）

	TraceString *string `json:"TraceString,omitempty" name:"TraceString"`
	// trace组线程数

	Count *int64 `json:"Count,omitempty" name:"Count"`
}

type DeleteAlarmPolicyRequest struct {
	*tchttp.BaseRequest

	// PolicyId

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
}

func (r *DeleteAlarmPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteAlarmPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteMonitorStatisticsPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除结果true：删除成功；false：删除失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteMonitorStatisticsPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMonitorStatisticsPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CronSchedule struct {

	// 触发时间，小时分钟，用:分割, 例如 00:00（零点零分触发）

	StartAt *string `json:"StartAt,omitempty" name:"StartAt"`
	// 目标最小实例数, 取值为正整数

	MinReplicas *uint64 `json:"MinReplicas,omitempty" name:"MinReplicas"`
	// 目标最大实例数, 取值为正整数

	MaxReplicas *uint64 `json:"MaxReplicas,omitempty" name:"MaxReplicas"`
}

type DescribeSingleContainerGroupsV2 struct {

	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用名称

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用类型

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 分组创建时间

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 端口列表

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 更新类型

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新时间间隔

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 网络访问类型

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 子网id

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
}

type ScalableTaskResultV2 struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*ScalableTask `json:"Content,omitempty" name:"Content"`
}

type DeleteProgramResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true: 删除成功；false: 删除失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteProgramResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteProgramResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTraceInterfacesRequest struct {
	*tchttp.BaseRequest

	// 接口所属服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 接口角色："caller"调用方，"callee"被调用方

	Role *string `json:"Role,omitempty" name:"Role"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 返回调用链接口偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 返回调用链接口数目

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *GetTraceInterfacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTraceInterfacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RemoveInstanceRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 机器ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *RemoveInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RemoveInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayQQMiniProgramLoginPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGatewayQQMiniProgramLoginPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayQQMiniProgramLoginPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteViewRequest struct {
	*tchttp.BaseRequest

	// 视图id

	ViewId *string `json:"ViewId,omitempty" name:"ViewId"`
}

func (r *DeleteViewRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteViewRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeImageTagsRequest struct {
	*tchttp.BaseRequest

	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~100

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 不填和0:查询 1:不查询

	QueryImageIdFlag *int64 `json:"QueryImageIdFlag,omitempty" name:"QueryImageIdFlag"`
	// 可用于搜索的 tag 名字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 企业: tcr ；个人: personal或者不填

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
	// TcrRepoInfo值

	TcrRepoInfo *TcrRepoInfo `json:"TcrRepoInfo,omitempty" name:"TcrRepoInfo"`
}

func (r *DescribeImageTagsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImageTagsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CosCredentialsV2 struct {

	// 无

	SessionToken *string `json:"SessionToken,omitempty" name:"SessionToken"`
	// 无

	TmpAppId *string `json:"TmpAppId,omitempty" name:"TmpAppId"`
	// 无

	TmpSecretId *string `json:"TmpSecretId,omitempty" name:"TmpSecretId"`
	// 无

	TmpSecretKey *string `json:"TmpSecretKey,omitempty" name:"TmpSecretKey"`
	// 无

	ExpiredTime *int64 `json:"ExpiredTime,omitempty" name:"ExpiredTime"`
	// 无

	Domain *string `json:"Domain,omitempty" name:"Domain"`
}

type CreateLaneRequest struct {
	*tchttp.BaseRequest

	// 泳道名称

	LaneName *string `json:"LaneName,omitempty" name:"LaneName"`
	// 泳道备注

	Remark *string `json:"Remark,omitempty" name:"Remark"`
	// 泳道部署组信息

	LaneGroupList []*LaneGroup `json:"LaneGroupList,omitempty" name:"LaneGroupList"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateLaneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateLaneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteGatewayPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id数组

	PluginIdList []*string `json:"PluginIdList,omitempty" name:"PluginIdList"`
}

func (r *DeleteGatewayPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGatewayPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGlobalGroupContextUniqueRestrictRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeGlobalGroupContextUniqueRestrictRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGlobalGroupContextUniqueRestrictRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageRegisterRequest struct {
	*tchttp.BaseRequest

	// 密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// 确认密码

	ConfirmPassword *string `json:"ConfirmPassword,omitempty" name:"ConfirmPassword"`
}

func (r *ImageRegisterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageRegisterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BillingOperationRecord struct {

	// 资源ID

	ResourceId *string `json:"ResourceId,omitempty" name:"ResourceId"`
	// 类别ID

	CategoryId *int64 `json:"CategoryId,omitempty" name:"CategoryId"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 租户ID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 账号ID

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 用户昵称

	Nickname *string `json:"Nickname,omitempty" name:"Nickname"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 操作详情

	OperationDetail *string `json:"OperationDetail,omitempty" name:"OperationDetail"`
}

type ContainerTasks struct {

	// taskId

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务开始时间

	TaskTime *string `json:"TaskTime,omitempty" name:"TaskTime"`
	// 任务类型字段，0：没有任务（在此接口中，不用出现0），1：发布程序包；2.部署操作；3.扩容操作；4.启动操作；5.停止操作；6.缩容操作；7.发布日志配置,8.删除销毁操作

	Type *int64 `json:"Type,omitempty" name:"Type"`
	// 变更状态，0：成功 1:失败 2：执行中

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 分组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 镜像名称

	ImageName *string `json:"ImageName,omitempty" name:"ImageName"`
	// 镜像版本

	ImageVersion *string `json:"ImageVersion,omitempty" name:"ImageVersion"`
	// 任务详情描述

	TaskDesc *string `json:"TaskDesc,omitempty" name:"TaskDesc"`
	// 任务总个数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 成功任务个数

	SuccessCount *int64 `json:"SuccessCount,omitempty" name:"SuccessCount"`
	// 失败任务个数

	FailCount *int64 `json:"FailCount,omitempty" name:"FailCount"`
}

type ResourceFieldRef struct {

	// k8s 的 Resource

	Resource *string `json:"Resource,omitempty" name:"Resource"`
}

type UpdateApiTimeoutsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateApiTimeoutsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApiTimeoutsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteUnitNamespacesRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 单元化命名空间ID数组

	UnitNamespaceList []*string `json:"UnitNamespaceList,omitempty" name:"UnitNamespaceList"`
}

func (r *DeleteUnitNamespacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteUnitNamespacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLaneRulesRequest struct {
	*tchttp.BaseRequest

	// 每页展示的条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 搜索关键词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 泳道规则ID（用于精确搜索）

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 无

	RuleIdList []*string `json:"RuleIdList,omitempty" name:"RuleIdList"`
}

func (r *DescribeLaneRulesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneRulesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableFallbackRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 停用微服务路由保护策略操作是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableFallbackRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableFallbackRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Interface struct {

	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 路径模版

	Path *string `json:"Path,omitempty" name:"Path"`
	// http请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
}

type FileConfig struct {

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 配置项版本描述

	ConfigVersionDesc *string `json:"ConfigVersionDesc,omitempty" name:"ConfigVersionDesc"`
	// 配置项文件名

	ConfigFileName *string `json:"ConfigFileName,omitempty" name:"ConfigFileName"`
	// 配置项文件内容

	ConfigFileValue *string `json:"ConfigFileValue,omitempty" name:"ConfigFileValue"`
	// 配置项文件编码

	ConfigFileCode *string `json:"ConfigFileCode,omitempty" name:"ConfigFileCode"`
	// 创建时间

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 配置项归属应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 删除标识

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 配置项版本数量

	ConfigVersionCount *int64 `json:"ConfigVersionCount,omitempty" name:"ConfigVersionCount"`
	// 配置项最后更新时间

	LastUpdateTime *string `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 发布路径

	ConfigFilePath *string `json:"ConfigFilePath,omitempty" name:"ConfigFilePath"`
	// 后置命令

	ConfigPostCmd *string `json:"ConfigPostCmd,omitempty" name:"ConfigPostCmd"`
	// 配置项文件长度

	ConfigFileValueLength *uint64 `json:"ConfigFileValueLength,omitempty" name:"ConfigFileValueLength"`
}

type SetReleasePipelineRunTaskRollbackResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 设置是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SetReleasePipelineRunTaskRollbackResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetReleasePipelineRunTaskRollbackResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiResponseDescr struct {

	// 参数描述

	Name *string `json:"Name,omitempty" name:"Name"`
	// 参数类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 参数描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

type TsfPageFileConfigReleaseLog struct {

	// 数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表

	Content []*FileConfigReleaseLog `json:"Content,omitempty" name:"Content"`
}

type DescribeContainerGroupDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 容器部署组详情

		Result *ContainerGroupDetail `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerGroupDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageVmTask struct {

	// 任务总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 任务详情列表

	Content []*VmTask `json:"Content,omitempty" name:"Content"`
}

type ModifyContainerReplicasRequest struct {
	*tchttp.BaseRequest

	// 部署组ID，部署组唯一标识

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 实例数量

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
}

func (r *ModifyContainerReplicasRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyContainerReplicasRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchSpanRequest struct {
	*tchttp.BaseRequest

	// 调用方服务名

	CallerServiceName *string `json:"CallerServiceName,omitempty" name:"CallerServiceName"`
	// 被调方服务名

	CalleeServiceName *string `json:"CalleeServiceName,omitempty" name:"CalleeServiceName"`
	// 调用方接口名

	CallerInterfaceName *string `json:"CallerInterfaceName,omitempty" name:"CallerInterfaceName"`
	// 被调方接口名

	CalleeInterfaceName *string `json:"CalleeInterfaceName,omitempty" name:"CalleeInterfaceName"`
	// 错误码

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// 调用方IP

	CallerIp *string `json:"CallerIp,omitempty" name:"CallerIp"`
	// 被调方IP

	CalleeIp *string `json:"CalleeIp,omitempty" name:"CalleeIp"`
	// 最小耗时

	MinDuration *uint64 `json:"MinDuration,omitempty" name:"MinDuration"`
	// 最长耗时

	MaxDuration *uint64 `json:"MaxDuration,omitempty" name:"MaxDuration"`
	// 排序方式，支持"timestamp"和"duration"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方向，支持"asc"和"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 返回span数目，取值范围[0, 100]，默认值20

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 搜索开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 搜索结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TSF命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 查询trace偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 用户自定义标签

	Tags *string `json:"Tags,omitempty" name:"Tags"`
	// 调用链traceid

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 调用链spanid

	SpanId *string `json:"SpanId,omitempty" name:"SpanId"`
	// 是否仅展示错误调用链

	ErrorTrace *bool `json:"ErrorTrace,omitempty" name:"ErrorTrace"`
}

func (r *SearchSpanRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchSpanRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMeshSidecarVersionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// sidecar 版本

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMeshSidecarVersionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMeshSidecarVersionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TemplateResultV2 struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*TemplateProject `json:"Content,omitempty" name:"Content"`
}

type DescribeLanesRequest struct {
	*tchttp.BaseRequest

	// 每页展示的条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 无

	LaneIdList []*string `json:"LaneIdList,omitempty" name:"LaneIdList"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
}

func (r *DescribeLanesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLanesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 业务日志列表

		Result *TsfPageBusinessLogV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageRecordV2 struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 操作记录列表

	Content []*RecordV2 `json:"Content,omitempty" name:"Content"`
}

type DescribeServerlessGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果

		Result *ServerlessGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeServerlessGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServerlessGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSimpleClustersRequest struct {
	*tchttp.BaseRequest

	// 需要查询的集群ID列表，不填或不传入时查询所有内容

	ClusterIdList []*string `json:"ClusterIdList,omitempty" name:"ClusterIdList"`
	// 需要查询的集群类型，不填或不传入时查询所有内容

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 查询偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 对id和name进行关键词过滤

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
}

func (r *DescribeSimpleClustersRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleClustersRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ExecuteTaskFlowRequest struct {
	*tchttp.BaseRequest

	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
}

func (r *ExecuteTaskFlowRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExecuteTaskFlowRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyContainerGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新部署组是否成功。
		// true：成功。
		// false：失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyContainerGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyContainerGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteApiAccessResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteApiAccessResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteApiAccessResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageZipkinSpanInfo struct {

	// 总条目数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 调用链Span列表

	Content []*ZipkinSpanInfo `json:"Content,omitempty" name:"Content"`
}

type GetDockerForUseRequest struct {
	*tchttp.BaseRequest
}

func (r *GetDockerForUseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetDockerForUseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetPkgInfoRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 包ID

	PkgId []*string `json:"PkgId,omitempty" name:"PkgId"`
}

func (r *GetPkgInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetPkgInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupPodResultV2 struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表信息

	Content []*GroupPod `json:"Content,omitempty" name:"Content"`
}

type HealthCheckSetting struct {

	// 健康检查方法。HTTP：通过 HTTP 接口检查；CMD：通过执行命令检查；TCP：通过建立 TCP 连接检查。

	ActionType *string `json:"ActionType,omitempty" name:"ActionType"`
	// 容器延时启动健康检查的时间。

	InitialDelaySeconds *uint64 `json:"InitialDelaySeconds,omitempty" name:"InitialDelaySeconds"`
	// 每次健康检查响应的最大超时时间。

	TimeoutSeconds *uint64 `json:"TimeoutSeconds,omitempty" name:"TimeoutSeconds"`
	// 进行健康检查的时间间隔。

	PeriodSeconds *uint64 `json:"PeriodSeconds,omitempty" name:"PeriodSeconds"`
	// 表示后端容器从失败到成功的连续健康检查成功次数。

	SuccessThreshold *uint64 `json:"SuccessThreshold,omitempty" name:"SuccessThreshold"`
	// 表示后端容器从成功到失败的连续健康检查成功次数。

	FailureThreshold *uint64 `json:"FailureThreshold,omitempty" name:"FailureThreshold"`
	// HTTP 健康检查方法使用的检查协议。支持HTTP、HTTPS。

	Scheme *string `json:"Scheme,omitempty" name:"Scheme"`
	// 健康检查端口，范围 1~65535 。

	Port *uint64 `json:"Port,omitempty" name:"Port"`
	// HTTP 健康检查接口的请求路径。

	Path *string `json:"Path,omitempty" name:"Path"`
	// 执行命令检查方式，执行的命令。

	Command []*string `json:"Command,omitempty" name:"Command"`
	// TSF_DEFAULT：tsf 默认就绪探针。K8S_NATIVE：k8s 原生探针。不填默认为 k8s 原生探针。

	Type *string `json:"Type,omitempty" name:"Type"`
}

type DeployGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeployGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerGroupAttributeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署组列表-其它字段

		Result *ContainerGroupOther `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerGroupAttributeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupAttributeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApplicationsOtherResultV2 struct {

	// 总实例个数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 运行实例个数

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
}

type ReleasePublicConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：发布成功；false：发布失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleasePublicConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleasePublicConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskBatchRecordRequest struct {
	*tchttp.BaseRequest

	// 批次 ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 批次历史 ID

	BatchLogId *string `json:"BatchLogId,omitempty" name:"BatchLogId"`
}

func (r *DescribeTaskBatchRecordRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskBatchRecordRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageGetTagListRequest struct {
	*tchttp.BaseRequest

	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~100

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ImageGetTagListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageGetTagListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFilebeatConfigPageRequest struct {
	*tchttp.BaseRequest

	// 搜索关键字 支持配置名和配置id

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 配置类型
	// common - 通用配置
	// business - 日志配置项
	// delivery - 日志投递项

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
	// 偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeFilebeatConfigPageRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFilebeatConfigPageRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StatisticsCoord struct {

	// 指标横坐标值

	CoordX *string `json:"CoordX,omitempty" name:"CoordX"`
	// 指标纵坐标值

	CoordY *string `json:"CoordY,omitempty" name:"CoordY"`
	// 指标标签，用于标识附加信息

	CoordTag *string `json:"CoordTag,omitempty" name:"CoordTag"`
}

type TsfPageSimpleGroupV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 简单部署组列表

	Content []*SimpleGroup `json:"Content,omitempty" name:"Content"`
}

type ChangeSecretStatusRequest struct {
	*tchttp.BaseRequest

	// 秘钥ID

	GwSecretId *string `json:"GwSecretId,omitempty" name:"GwSecretId"`
	// 启用: enabled/ 禁用: disabled

	Status *string `json:"Status,omitempty" name:"Status"`
}

func (r *ChangeSecretStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ChangeSecretStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployGroup struct {

	// 部署组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 部署组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 部署组创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 部署组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 部署组实例数目

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 部署组运行实例数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 部署组停止实例数目

	OffInstanceCount *int64 `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
	// 部署组状态

	GroupStatus *string `json:"GroupStatus,omitempty" name:"GroupStatus"`
	// 部署组启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 部署组程序包Id

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 部署组程序包名称

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 部署组程序包版本

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 最大分配cpu 核数，如0.6

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配内存M数

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 端口数组对象

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// 环境变量数组对象

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// pod错误信息描述

	Message *string `json:"Message,omitempty" name:"Message"`
	// NodePort端口，只有公网和NodePort访问方式才有值

	NodePort *int64 `json:"NodePort,omitempty" name:"NodePort"`
	// 部署组状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 应用微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type DescribeAddibleInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 可添加实例列表

		Result *TsfPageInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAddibleInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAddibleInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ScalableSubRule struct {

	// 监控指标的阈值。如指标为 CPU 利用率或内存利用率，则为百分比 0-100；如指标为响应时间或请求个数，则为 0-99999999

	Indicators *uint64 `json:"Indicators,omitempty" name:"Indicators"`
	// 规则指标类型: 1: CPU 利用率, 2: 内存利用率, 3: 请求响应时间, 4: 请求个数

	IndicatorType *uint64 `json:"IndicatorType,omitempty" name:"IndicatorType"`
}

type BillingOperationRenewRequest struct {
	*tchttp.BaseRequest

	// 计费租户ID

	BillingAppId *string `json:"BillingAppId,omitempty" name:"BillingAppId"`
	// 计费账号ID

	BillingUin *string `json:"BillingUin,omitempty" name:"BillingUin"`
	// 时间间隔

	TimeSpan *int64 `json:"TimeSpan,omitempty" name:"TimeSpan"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

func (r *BillingOperationRenewRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationRenewRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRatelimitResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功与否

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateRatelimitResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRatelimitResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFilebeatConfigEnableResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true 开启 false 关闭

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFilebeatConfigEnableResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFilebeatConfigEnableResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyReleaseTemplateRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 模板类型batch ，bluegreen

	TemplateType *string `json:"TemplateType,omitempty" name:"TemplateType"`
	// 分批发布模板 (根据模板类型决定是否填写)

	BatchTemplate *BatchTemplate `json:"BatchTemplate,omitempty" name:"BatchTemplate"`
	// 蓝绿发布模板 (根据模板类型决定是否填写)

	BlueGreenTemplate *BlueGreenTemplate `json:"BlueGreenTemplate,omitempty" name:"BlueGreenTemplate"`
}

func (r *ModifyReleaseTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyReleaseTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateLaneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 泳道ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateLaneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateLaneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopContainerGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *StopContainerGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopContainerGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ThreadDetailInfo struct {

	// 线程名

	ThreadName *string `json:"ThreadName,omitempty" name:"ThreadName"`
	// 线程状态

	ThreadState *string `json:"ThreadState,omitempty" name:"ThreadState"`
	// 线程堆栈信息

	ThreadInfos *string `json:"ThreadInfos,omitempty" name:"ThreadInfos"`
	// CPU利用率

	ThreadCpuUtil *float64 `json:"ThreadCpuUtil,omitempty" name:"ThreadCpuUtil"`
	// 堆内存大小

	ThreadAllocatedBytes *int64 `json:"ThreadAllocatedBytes,omitempty" name:"ThreadAllocatedBytes"`
	// CPU 运行时间

	ThreadCpuTime *int64 `json:"ThreadCpuTime,omitempty" name:"ThreadCpuTime"`
	// 线程阻塞个数

	ThreadBlockCount *int64 `json:"ThreadBlockCount,omitempty" name:"ThreadBlockCount"`
	// 如果为"true"代表相关数据是压缩后的

	Compression *bool `json:"Compression,omitempty" name:"Compression"`
}

type ListMonitorStatisticsPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result *MonitorStatisticsPolicyResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListMonitorStatisticsPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListMonitorStatisticsPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BillingDeal struct {

	// 订单号

	DealName *string `json:"DealName,omitempty" name:"DealName"`
	// 资源ID

	ResourceId *string `json:"ResourceId,omitempty" name:"ResourceId"`
	// 种类ID

	CategoryId *int64 `json:"CategoryId,omitempty" name:"CategoryId"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 租户ID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 账号ID

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 子账号ID

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// 币种

	Currency *string `json:"Currency,omitempty" name:"Currency"`
	// 原价（单位分）

	TotalCost *int64 `json:"TotalCost,omitempty" name:"TotalCost"`
	// 折后价（单位分）

	RealTotalCost *int64 `json:"RealTotalCost,omitempty" name:"RealTotalCost"`
	// 总折扣

	TotalPolicy *int64 `json:"TotalPolicy,omitempty" name:"TotalPolicy"`
	// 官网折扣

	CommonPolicy *int64 `json:"CommonPolicy,omitempty" name:"CommonPolicy"`
	// 用户折扣

	UserPolicy *int64 `json:"UserPolicy,omitempty" name:"UserPolicy"`
	// 订单详情

	DealDetail *string `json:"DealDetail,omitempty" name:"DealDetail"`
}

type TsfPageMicroServiceMetas struct {

	// 条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 元数据

	Content []*MicroServiceMetas `json:"Content,omitempty" name:"Content"`
}

type DescribeGroupReleaseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署组发布的相关信息

		Result *GroupRelease `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupReleaseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupReleaseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRoleRequest struct {
	*tchttp.BaseRequest

	// 角色名称

	RoleName *string `json:"RoleName,omitempty" name:"RoleName"`
	// 角色描述

	RoleDesc *string `json:"RoleDesc,omitempty" name:"RoleDesc"`
	// 角色拥有的权限组ID列表，不传入或为null时不创建

	PermCatIdList []*string `json:"PermCatIdList,omitempty" name:"PermCatIdList"`
}

func (r *CreateRoleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRoleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 总大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型 0 降序，1 升序

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 发布单状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 发布单类型

	ReleaseType *string `json:"ReleaseType,omitempty" name:"ReleaseType"`
	// 模板类型

	TemplateType *string `json:"TemplateType,omitempty" name:"TemplateType"`
}

func (r *DescribeReleasesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PkgListV2 struct {

	// 包总量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 报信息列表

	Content []*PkgInfo `json:"Content,omitempty" name:"Content"`
}

type ImageUserIsExistsV2 struct {

	// 子账号是否存在,true：存在；false：不存在

	IsExist *bool `json:"IsExist,omitempty" name:"IsExist"`
	// 主账号是否存在，true：存在；false：不存在

	MainIsExist *bool `json:"MainIsExist,omitempty" name:"MainIsExist"`
}

type CreateMicroserviceWithDetailRespResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateMicroserviceWithDetailRespResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMicroserviceWithDetailRespResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFileConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 文件配置项

		Result *FileConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFileConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetBuildTaskFailedResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SetBuildTaskFailedResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetBuildTaskFailedResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeletePkgRequest struct {
	*tchttp.BaseRequest

	// 无

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 无

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 程序包仓库类型

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
	// 程序包仓库id

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
}

func (r *DeletePkgRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePkgRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssSpanBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 调用链ID

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 调用链SpanID

	SpanId *string `json:"SpanId,omitempty" name:"SpanId"`
	// 请求偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 单页请求配置数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 这个spanId属于那个服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
}

func (r *SearchOssSpanBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssSpanBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LicenseDuration struct {

	// 开始时间，utc秒数

	ActiveTime *uint64 `json:"ActiveTime,omitempty" name:"ActiveTime"`
	// 有效时长，单位秒

	Period *uint64 `json:"Period,omitempty" name:"Period"`
}

type GetTraceSpansResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 调用链Span列表

		Result *TsfPageZipkinSpanInfoV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTraceSpansResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTraceSpansResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CleanAndDisableUnitRouteRequest struct {
	*tchttp.BaseRequest

	// Id

	Id *string `json:"Id,omitempty" name:"Id"`
	// Type

	Type *string `json:"Type,omitempty" name:"Type"`
	// Seed

	Seed *string `json:"Seed,omitempty" name:"Seed"`
}

func (r *CleanAndDisableUnitRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CleanAndDisableUnitRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetDefaultValueRequest struct {
	*tchttp.BaseRequest

	// 解析规则类型

	SchemaType *uint64 `json:"SchemaType,omitempty" name:"SchemaType"`
}

func (r *GetDefaultValueRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetDefaultValueRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteClusterRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 是否只解绑，不删除容器集群，默认不传则删除容器集群。

	Unbind *bool `json:"Unbind,omitempty" name:"Unbind"`
}

func (r *DeleteClusterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteClusterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DownloadMultipartPkgRequest struct {
	*tchttp.BaseRequest

	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 当前分片 (从1开始)

	FileSeg *uint64 `json:"FileSeg,omitempty" name:"FileSeg"`
}

func (r *DownloadMultipartPkgRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DownloadMultipartPkgRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShrinkinstanceScriptsRequest struct {
	*tchttp.BaseRequest

	// 集群 ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *ShrinkinstanceScriptsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShrinkinstanceScriptsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AlarmInfo struct {

	// 指标名

	MetricName *string `json:"MetricName,omitempty" name:"MetricName"`
	// 已恢复的告警条数

	RestoredCount *int64 `json:"RestoredCount,omitempty" name:"RestoredCount"`
	// 未恢复的告警条数

	UnRestoredCount *int64 `json:"UnRestoredCount,omitempty" name:"UnRestoredCount"`
	// 告警总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 日环比

	DailyPercent *float64 `json:"DailyPercent,omitempty" name:"DailyPercent"`
}

type DescribeInstanceRequestRequest struct {
	*tchttp.BaseRequest

	// 命名空间名字

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 起始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 偏移

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 搜索条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeInstanceRequestRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceRequestRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateApiGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，true: 成功, false: 失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateApiGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApiGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListContainerTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 总记录数

		TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
		// 列表信息

		Content []*string `json:"Content,omitempty" name:"Content"`
		// 任务ID

		TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
		// 任务开始时间

		TaskTime *string `json:"TaskTime,omitempty" name:"TaskTime"`
		// 任务类型字段，0：没有任务（在此接口中，不用出现0），1：发布程序包；2.部署操作；3.扩容操作；4.启动操作；5.停止操作；6.缩容操作；

		Type *int64 `json:"Type,omitempty" name:"Type"`
		// 变更状态，0：成功 1:失败 2：执行中

		Status *string `json:"Status,omitempty" name:"Status"`
		// 分组id

		GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
		// 分组名称

		GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
		// 镜像名称

		ImageName *string `json:"ImageName,omitempty" name:"ImageName"`
		// 镜像版本

		ImageVersion *string `json:"ImageVersion,omitempty" name:"ImageVersion"`
		// 任务详情描述

		TaskDesc *string `json:"TaskDesc,omitempty" name:"TaskDesc"`
		// 成功任务个数

		SuccessCount *int64 `json:"SuccessCount,omitempty" name:"SuccessCount"`
		// 失败任务个数

		FailCount *int64 `json:"FailCount,omitempty" name:"FailCount"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListContainerTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListContainerTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ThreadStateData struct {

	// 线程总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 新创建线程数

	NewCount *int64 `json:"NewCount,omitempty" name:"NewCount"`
	// 运行中线程数

	RunnableCount *int64 `json:"RunnableCount,omitempty" name:"RunnableCount"`
	// 阻塞线程数

	BlockedCount *int64 `json:"BlockedCount,omitempty" name:"BlockedCount"`
	// 等待线程数

	WaitingCount *int64 `json:"WaitingCount,omitempty" name:"WaitingCount"`
	// 计时等待线程数

	TimedWaitingCount *int64 `json:"TimedWaitingCount,omitempty" name:"TimedWaitingCount"`
	// 终止线程数

	TerminatedCount *int64 `json:"TerminatedCount,omitempty" name:"TerminatedCount"`
}

type AnalyzeLogSchemaResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 解析结果

		Result *BusinessLogPatternAnalysis `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AnalyzeLogSchemaResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AnalyzeLogSchemaResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EventPolicyResult struct {

	// TriggerCondition

	TriggerCondition *int64 `json:"TriggerCondition,omitempty" name:"TriggerCondition"`
	// Frequency

	Frequency *int64 `json:"Frequency,omitempty" name:"Frequency"`
	// EventPolicyId

	EventPolicyId *string `json:"EventPolicyId,omitempty" name:"EventPolicyId"`
	// PolicyId

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
}

type ZipkinBinaryAnnotation struct {

	// 注解键

	Key *string `json:"Key,omitempty" name:"Key"`
	// 注解值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 注解端点信息

	Endpoint *ZipkinEndPoint `json:"Endpoint,omitempty" name:"Endpoint"`
}

type ModifyMachinesRequest struct {
	*tchttp.BaseRequest

	// 机器列表

	MachineList []*MachineList `json:"MachineList,omitempty" name:"MachineList"`
}

func (r *ModifyMachinesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyMachinesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApplicationForPageV2 struct {

	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用描述

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 编程语言

	ProgLang *string `json:"ProgLang,omitempty" name:"ProgLang"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type GetTraceSpansRequest struct {
	*tchttp.BaseRequest

	// 调用链ID

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 是否查询多套 TSF

	EnableMultiTsf *bool `json:"EnableMultiTsf,omitempty" name:"EnableMultiTsf"`
}

func (r *GetTraceSpansRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTraceSpansRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TriggerReleasePipelineRunActionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 设置是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *TriggerReleasePipelineRunActionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *TriggerReleasePipelineRunActionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainGroupResultV2 struct {

	// 部署组列表

	Content []*ContainGroup `json:"Content,omitempty" name:"Content"`
	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
}

type SidecarFilter struct {

	// 过滤器Id

	FilterId *string `json:"FilterId,omitempty" name:"FilterId"`
	// 过滤器名称

	FilterName *string `json:"FilterName,omitempty" name:"FilterName"`
	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 作用位置

	WorkPosition *string `json:"WorkPosition,omitempty" name:"WorkPosition"`
	// 被调服务名

	TargetServiceNames *string `json:"TargetServiceNames,omitempty" name:"TargetServiceNames"`
	// lua脚本值

	LuaValue *string `json:"LuaValue,omitempty" name:"LuaValue"`
	// 发布状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 末次发布时间

	ReleasedTime *string `json:"ReleasedTime,omitempty" name:"ReleasedTime"`
	// APPID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// subAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// 部署组列表

	FilterGroupList []*SidecarFilterGroup `json:"FilterGroupList,omitempty" name:"FilterGroupList"`
}

type DescribeReleaseTemplateRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 执行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
}

func (r *DescribeReleaseTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleaseTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyReleaseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 修改是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyReleaseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyReleaseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShirkNamespaceRequest struct {
	*tchttp.BaseRequest

	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 机器id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *ShirkNamespaceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShirkNamespaceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskRecordsRequest struct {
	*tchttp.BaseRequest

	// 翻页偏移量。

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询单页数量。

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 模糊查询关键字，支持任务ID和任务名称。

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 任务启用状态。enabled/disabled

	TaskState *string `json:"TaskState,omitempty" name:"TaskState"`
	// 分组ID。

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 任务类型。

	TaskType *string `json:"TaskType,omitempty" name:"TaskType"`
	// 任务触发类型，UNICAST、BROADCAST。

	ExecuteType *string `json:"ExecuteType,omitempty" name:"ExecuteType"`
	// 无

	Ids []*string `json:"Ids,omitempty" name:"Ids"`
}

func (r *DescribeTaskRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyNamespaceRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 命名空间备注

	NamespaceDesc *string `json:"NamespaceDesc,omitempty" name:"NamespaceDesc"`
	// 是否开启高可用

	IsHaEnable *string `json:"IsHaEnable,omitempty" name:"IsHaEnable"`
}

func (r *ModifyNamespaceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyNamespaceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RollbackConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：回滚成功；false：回滚失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RollbackConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RollbackConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetContainGroupOtherResult struct {

	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// 服务状态，请参考后面的的状态定义

	Status *string `json:"Status,omitempty" name:"Status"`
	// 异常信息,服务状态为Abnormal时才有

	Message *string `json:"Message,omitempty" name:"Message"`
}

type GroupApiUseStatistics struct {

	// 总调用数

	TopStatusCode []*ApiUseStatisticsEntity `json:"TopStatusCode,omitempty" name:"TopStatusCode"`
	// 平均错误率

	TopTimeCost []*ApiUseStatisticsEntity `json:"TopTimeCost,omitempty" name:"TopTimeCost"`
	// 分位值对象

	Quantile *QuantileEntity `json:"Quantile,omitempty" name:"Quantile"`
}

type DescribeAssociateRelationRequest struct {
	*tchttp.BaseRequest

	// 配置项id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DescribeAssociateRelationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAssociateRelationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowBatchHistoryRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 翻页查询的记录

		Result *TaskFlowBatchPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFlowBatchHistoryRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowBatchHistoryRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRatelimitRequest struct {
	*tchttp.BaseRequest

	// 名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 限流所作用的目标微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 列表偏移位置

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 列表最大长度

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 检索规则id或搜索规则名

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *DescribeRatelimitRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRatelimitRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CircuitBreakerRules struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 路由规则

	Content []*CircuitBreakerRule `json:"Content,omitempty" name:"Content"`
}

type DescribeBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 日志配置项

		Result *BusinessLogConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RatelimitRuleV2 struct {

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 规则名字，在一个微服务下唯一

	Name *string `json:"Name,omitempty" name:"Name"`
	// 状态 0表示启用 1表示停用

	Status *uint64 `json:"Status,omitempty" name:"Status"`
	// 限流规则区分的来源微服务名

	SourceService *string `json:"SourceService,omitempty" name:"SourceService"`
	// 限流周期，单位秒

	DurationSecond *uint64 `json:"DurationSecond,omitempty" name:"DurationSecond"`
	// 每周期内的限流配额

	DurationQuota *uint64 `json:"DurationQuota,omitempty" name:"DurationQuota"`
	// 最近一次修改规则时间，UTC秒数

	ModifyTime *uint64 `json:"ModifyTime,omitempty" name:"ModifyTime"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 限制条件列表

	Dimensions []*RatelimitDimension `json:"Dimensions,omitempty" name:"Dimensions"`
	// 限流类型：集群或者单机

	LimitMode *string `json:"LimitMode,omitempty" name:"LimitMode"`
	// 降级自定义返回结果

	LimitedResponse *string `json:"LimitedResponse,omitempty" name:"LimitedResponse"`
	// 限流类型：线程池、qps

	ConditionModel *string `json:"ConditionModel,omitempty" name:"ConditionModel"`
	// 线程池限流阈值

	ConcurrentThreads *int64 `json:"ConcurrentThreads,omitempty" name:"ConcurrentThreads"`
}

type DescribeFlowBatchRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 翻页数据

		Result *TaskFlowBatchPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFlowBatchRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowBatchRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePodInstancesRequest struct {
	*tchttp.BaseRequest

	// 实例所属groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 过滤字段

	PodNameList []*string `json:"PodNameList,omitempty" name:"PodNameList"`
}

func (r *DescribePodInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePodInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstanceRequest struct {

	// trace id

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 产生时间

	Timestamp *int64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 耗时

	Duration *int64 `json:"Duration,omitempty" name:"Duration"`
	// 状态

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// 错误

	ResultError *string `json:"ResultError,omitempty" name:"ResultError"`
	// 接口信息

	InterfaceInfo *Interface `json:"InterfaceInfo,omitempty" name:"InterfaceInfo"`
}

type InstanceRequests struct {

	// 内容

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 总条数

	Content []*InstanceRequest `json:"Content,omitempty" name:"Content"`
}

type DescribeOverviweServiceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 概览页微服务信息

		Result *OverviewMsResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeOverviweServiceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeOverviweServiceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListApplicationServersRequest struct {
	*tchttp.BaseRequest

	// ServerId

	ServerId *string `json:"ServerId,omitempty" name:"ServerId"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// Limit

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// Offset

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// AgentVersion

	AgentVersion *string `json:"AgentVersion,omitempty" name:"AgentVersion"`
}

func (r *ListApplicationServersRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListApplicationServersRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateDeliveryConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateDeliveryConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateDeliveryConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type IssueLicenseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 证书正文

		LicenseContent *string `json:"LicenseContent,omitempty" name:"LicenseContent"`
		// 操作成功

		OperateResult *bool `json:"OperateResult,omitempty" name:"OperateResult"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *IssueLicenseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *IssueLicenseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListManagerJobInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 无

		Result *ManagerJobInfoPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListManagerJobInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListManagerJobInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageConfigRelease struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置项发布信息数组

	Content []*ConfigRelease `json:"Content,omitempty" name:"Content"`
}

type ResetMeshSidecarMonitorRequest struct {
	*tchttp.BaseRequest

	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *ResetMeshSidecarMonitorRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ResetMeshSidecarMonitorRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiRequestDescr struct {

	// 参数名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 参数类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 参数位置

	In *string `json:"In,omitempty" name:"In"`
	// 参数描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 参数是否必须

	Required *bool `json:"Required,omitempty" name:"Required"`
	// 参数的默认值

	DefaultValue *string `json:"DefaultValue,omitempty" name:"DefaultValue"`
}

type FindServiceMonitorObjectResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *Result `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *FindServiceMonitorObjectResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindServiceMonitorObjectResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGlobalGroupContextUniqueRestrictResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGlobalGroupContextUniqueRestrictResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGlobalGroupContextUniqueRestrictResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceServiceOverviewRequest struct {
	*tchttp.BaseRequest

	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeNamespaceServiceOverviewRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceServiceOverviewRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeServicesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 产品分页列表

		Result *PagedService `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeServicesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServicesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGCLogRequest struct {
	*tchttp.BaseRequest

	// 查询的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// GC日志路径

	GcLogFile *string `json:"GcLogFile,omitempty" name:"GcLogFile"`
}

func (r *DescribeGCLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGCLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DownloadMsApiResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 导出内容，base64 编码的 zip 包

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DownloadMsApiResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DownloadMsApiResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindDeployModuleLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *FindDeployModuleLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindDeployModuleLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfZone struct {

	// TSF可用区ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// TSF可用区名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// TSF可用区所属TSF地域ID

	TsfRegionId *string `json:"TsfRegionId,omitempty" name:"TsfRegionId"`
}

type DescribeTaskFlowsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流列表

		Result *TaskFlowPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskFlowsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskFlowsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGatewayWeChatMiniProgramLoginPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关插件

		Result *GatewayPluginId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateGatewayWeChatMiniProgramLoginPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayWeChatMiniProgramLoginPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 翻页结构体

		Result *TsfPageApiGroupInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApiGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableAuthorizationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：更新成功；false：更新失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableAuthorizationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableAuthorizationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetClusterLimitResourceRequest struct {
	*tchttp.BaseRequest

	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *GetClusterLimitResourceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetClusterLimitResourceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AutoRetryTransactionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 事务重试结果

		Result *TxRetry `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AutoRetryTransactionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AutoRetryTransactionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupSecretsRequest struct {
	*tchttp.BaseRequest

	// Api 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeGroupSecretsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupSecretsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateUnitRuleRequest struct {
	*tchttp.BaseRequest

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 规则名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 规则描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 规则项列表

	UnitRuleItemList []*UnitRuleItem `json:"UnitRuleItemList,omitempty" name:"UnitRuleItemList"`
}

func (r *UpdateUnitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateUnitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UnitRuleTag struct {

	// 单元化规则项ID

	UnitRuleItemId *string `json:"UnitRuleItemId,omitempty" name:"UnitRuleItemId"`
	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 标签类型 : U(用户标签)

	TagType *string `json:"TagType,omitempty" name:"TagType"`
	// 标签名

	TagField *string `json:"TagField,omitempty" name:"TagField"`
	// 操作符:IN/NOT_IN/EQUAL/NOT_EQUAL/REGEX

	TagOperator *string `json:"TagOperator,omitempty" name:"TagOperator"`
	// 标签值

	TagValue *string `json:"TagValue,omitempty" name:"TagValue"`
}

type DescribeFileConfigsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 文件配置项列表

		Result *TsfPageFileConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFileConfigsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMsRouteFallbackRequest struct {
	*tchttp.BaseRequest

	// 路由所属微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeMsRouteFallbackRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMsRouteFallbackRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageInstanceMetrics struct {

	// 记录总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*InstanceMetrics `json:"Content,omitempty" name:"Content"`
}

type ContainerGroupResourceConfig struct {

	// 不同类型的应用的容器部署组，部署时的额外资源要求

	AdditionalResourceRequirement *ContainerAdditionalResourceRequirementMap `json:"AdditionalResourceRequirement,omitempty" name:"AdditionalResourceRequirement"`
}

type DescribeBillingDealRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 计费订单分页信息

		Result *TsfPageBillingDeal `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeBillingDealRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBillingDealRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCreateGatewayApiStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否已完成导入任务

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeCreateGatewayApiStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCreateGatewayApiStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRepositoriesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 符合查询仓库信息列表

		Result *RepositoryList `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRepositoriesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRepositoriesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateScalableRuleWithDetailRespResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateScalableRuleWithDetailRespResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateScalableRuleWithDetailRespResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteAuthorizationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除结果true：删除成功；false：删除失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteAuthorizationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteAuthorizationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInvocationMetricDataDimensionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 维度

		Result *TsfPageDimension `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInvocationMetricDataDimensionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationMetricDataDimensionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayMonitorOverviewRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
}

func (r *DescribeGatewayMonitorOverviewRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayMonitorOverviewRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageMicroserviceSummary struct {

	// TotalCount值

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content值

	Content []*MicroserviceSummary `json:"Content,omitempty" name:"Content"`
}

type DescribeTemplateResult struct {

	// ProjectId

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
	// ProjectName

	ProjectName *string `json:"ProjectName,omitempty" name:"ProjectName"`
	// BasePackage

	BasePackage *string `json:"BasePackage,omitempty" name:"BasePackage"`
	// PomGroupId

	PomGroupId *string `json:"PomGroupId,omitempty" name:"PomGroupId"`
	// PomArtifactId

	PomArtifactId *string `json:"PomArtifactId,omitempty" name:"PomArtifactId"`
	// PomVersion

	PomVersion *string `json:"PomVersion,omitempty" name:"PomVersion"`
	// PomName

	PomName *string `json:"PomName,omitempty" name:"PomName"`
	// PomDesc

	PomDesc *string `json:"PomDesc,omitempty" name:"PomDesc"`
	// GetMethod

	GetMethod *string `json:"GetMethod,omitempty" name:"GetMethod"`
	// Ms

	Ms []*Ms `json:"Ms,omitempty" name:"Ms"`
	// action

	Action *string `json:"Action,omitempty" name:"Action"`
	// appId

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// SubAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type DescribeRouteRulesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路由规则分页对象

		Result *TsfPageRouteRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRouteRulesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRouteRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListMonitorStatisticsPolicyRequest struct {
	*tchttp.BaseRequest

	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 关键字搜索

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 默认为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 默认为20

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// clusterId值

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
	// 无

	IdList *string `json:"IdList,omitempty" name:"IdList"`
}

func (r *ListMonitorStatisticsPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListMonitorStatisticsPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetClusterLimitResourceResultV2 struct {

	// 最大分配cpu 核数

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配mem内存数，单位M

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
}

type DeleteLicenseApplicationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteLicenseApplicationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteLicenseApplicationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MonitorStatisticsPolicyV2 struct {

	// 监控统计策略id

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// 关键词

	KeyWords *string `json:"KeyWords,omitempty" name:"KeyWords"`
	// 部署组列表信息

	GroupList []*MonitorStatisticsPolicyGroup `json:"GroupList,omitempty" name:"GroupList"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type TsfPageClusterV3 struct {

	// 集群总数目

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 集群列表

	Content *ClusterV3 `json:"Content,omitempty" name:"Content"`
}

type TsfPageBusinessLogConfig struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 业务日志配置项列表

	Content []*BusinessLogConfig `json:"Content,omitempty" name:"Content"`
}

type DescribeUploadInfoRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 程序包名

	PkgName *string `json:"PkgName,omitempty" name:"PkgName"`
	// 程序包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 程序包类型

	PkgType *string `json:"PkgType,omitempty" name:"PkgType"`
	// 程序包介绍

	PkgDesc *string `json:"PkgDesc,omitempty" name:"PkgDesc"`
	// 程序包仓库类型

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
	// 程序包仓库id

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
}

func (r *DescribeUploadInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUploadInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfZoneResult struct {

	// tZoneId

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
	// tZoneName

	TZoneName *string `json:"TZoneName,omitempty" name:"TZoneName"`
	// tRemark

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
	// tRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
}

type DescribeFileConfigsRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项ID列表

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 按时间排序：creation_time；按版本号排序：config_version

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序传 0，降序传 1

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
}

func (r *DescribeFileConfigsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateLogCapacityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果（true成功，false失败）

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateLogCapacityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateLogCapacityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSubTransactionResp struct {

	// 子事务列表

	Content []*SubTransaction `json:"Content,omitempty" name:"Content"`
	// 子事务个数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 错误信息

	Error *TxError `json:"Error,omitempty" name:"Error"`
}

type DescribeBasicResourceUsageRequest struct {
	*tchttp.BaseRequest

	// 是否无视权限查询全租户的，默认 true。注：无论 true 还是 false，PackageSpaceUsed 和 ConsulInstanceCount  都是全租户的

	All *bool `json:"All,omitempty" name:"All"`
}

func (r *DescribeBasicResourceUsageRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBasicResourceUsageRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetDumpRequest struct {
	*tchttp.BaseRequest

	// InstanceId

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// EndpointName

	EndpointName *string `json:"EndpointName,omitempty" name:"EndpointName"`
}

func (r *GetDumpRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetDumpRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployContainGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeployContainGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployContainGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFileConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DescribeFileConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRelatedGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 请求结果,true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteRelatedGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRelatedGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupSecretsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 秘钥返回结果

		Result []*SecretKeyInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupSecretsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupSecretsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MsApplication struct {

	// 应用 ID，如 application-qv3dkda7

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用描述

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 应用 *部署* 类型，V 表示 CVM 应用，C 表示容器应用

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 应用启动时的 JVM 参数

	ApplicationJvmArg *string `json:"ApplicationJvmArg,omitempty" name:"ApplicationJvmArg"`
	// 应用类型，M 表示 Mesh 应用，N 表示 Spring Cloud 应用

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 应用编程语言，J 表示 Java，P 表示 Python

	ProgLang *string `json:"ProgLang,omitempty" name:"ProgLang"`
	// 应用是否存在

	NotExist *bool `json:"NotExist,omitempty" name:"NotExist"`
}

type ReleaseTask struct {

	// 任务基本信息

	TaskSpec *TaskSpec `json:"TaskSpec,omitempty" name:"TaskSpec"`
	// 任务状态

	TaskStatus *string `json:"TaskStatus,omitempty" name:"TaskStatus"`
	// 任务开始时间

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 任务结束时间

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
}

type DescribeUnitNamespacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 单元化命名空间对象列表

		Result *TsfPageUnitNamespace `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUnitNamespacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitNamespacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PodContainer struct {

	// 无

	Name *string `json:"Name,omitempty" name:"Name"`
	// 无

	ContainerId *string `json:"ContainerId,omitempty" name:"ContainerId"`
	// 无

	Status *string `json:"Status,omitempty" name:"Status"`
	// 无

	Reason *string `json:"Reason,omitempty" name:"Reason"`
	// 无

	Image *string `json:"Image,omitempty" name:"Image"`
	// 无

	ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
	// 无

	ContainerRestartCount *int64 `json:"ContainerRestartCount,omitempty" name:"ContainerRestartCount"`
}

type TraceSpanDetail struct {

	// 调用链traceid

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 调用链spanid

	SpanId *string `json:"SpanId,omitempty" name:"SpanId"`
	// 调用链parentid

	ParentId *string `json:"ParentId,omitempty" name:"ParentId"`
	// 调用链类型

	Kind *string `json:"Kind,omitempty" name:"Kind"`
	// 调用链name

	Name *string `json:"Name,omitempty" name:"Name"`
	// 时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 耗时

	Duration *float64 `json:"Duration,omitempty" name:"Duration"`
	// 状态

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// 组件

	LocalComponent *string `json:"LocalComponent,omitempty" name:"LocalComponent"`
	// local端点信息

	LocalEndpoint *ZipkinEndpointV2 `json:"LocalEndpoint,omitempty" name:"LocalEndpoint"`
	// remote端点信息

	RemoteEndpoint *ZipkinEndpointV2 `json:"RemoteEndpoint,omitempty" name:"RemoteEndpoint"`
	// tags列表

	TagList []*SpanLabel `json:"TagList,omitempty" name:"TagList"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 状态码

	ResultCode *string `json:"ResultCode,omitempty" name:"ResultCode"`
	// 泳道id

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 泳道名称

	LaneName *string `json:"LaneName,omitempty" name:"LaneName"`
	// 用户自定义metadata列表

	CustomTagList []*SpanLabel `json:"CustomTagList,omitempty" name:"CustomTagList"`
	// 服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 服务Id

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// TsfId

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// Tsf 名

	TsfName *string `json:"TsfName,omitempty" name:"TsfName"`
	// 单元 ID

	TsfUnitId *string `json:"TsfUnitId,omitempty" name:"TsfUnitId"`
	// 单元名

	TsfUnitName *string `json:"TsfUnitName,omitempty" name:"TsfUnitName"`
}

type DescribeInvocationStatisticsRatioRequest struct {
	*tchttp.BaseRequest

	// 维度

	Dimension *string `json:"Dimension,omitempty" name:"Dimension"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 目标开始时间

	TargetStartTime *string `json:"TargetStartTime,omitempty" name:"TargetStartTime"`
	// 目标结束时间

	TargetEndTime *string `json:"TargetEndTime,omitempty" name:"TargetEndTime"`
	// 服务角色

	Role *string `json:"Role,omitempty" name:"Role"`
	// 时间粒度

	Period *string `json:"Period,omitempty" name:"Period"`
	// 微服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 目标服务名，用于对比

	TargetServiceName *string `json:"TargetServiceName,omitempty" name:"TargetServiceName"`
	// 目标接口名，用于对比

	TargetInterfaceName *string `json:"TargetInterfaceName,omitempty" name:"TargetInterfaceName"`
}

func (r *DescribeInvocationStatisticsRatioRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationStatisticsRatioRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeOverviewEventResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 事件概览结果

		Result []*EventCategoryResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeOverviewEventResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeOverviewEventResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeScalableRuleAttributeByGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 规则信息

		Result *GroupsByScalableRuleId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeScalableRuleAttributeByGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeScalableRuleAttributeByGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetDockerForUseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 仓库中心地址

		Server *string `json:"Server,omitempty" name:"Server"`
		// 用户名

		Username *string `json:"Username,omitempty" name:"Username"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetDockerForUseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetDockerForUseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RollbackFileConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 回滚结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RollbackFileConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RollbackFileConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageTag struct {

	// 仓库名

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 版本ID

	TagId *string `json:"TagId,omitempty" name:"TagId"`
	// 镜像ID

	ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
	// 大小

	Size *string `json:"Size,omitempty" name:"Size"`
	// 创建时间

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 镜像制作者

	Author *string `json:"Author,omitempty" name:"Author"`
	// CPU架构

	Architecture *string `json:"Architecture,omitempty" name:"Architecture"`
	// Docker客户端版本

	DockerVersion *string `json:"DockerVersion,omitempty" name:"DockerVersion"`
	// 操作系统

	Os *string `json:"Os,omitempty" name:"Os"`
	// push时间

	PushTime *string `json:"PushTime,omitempty" name:"PushTime"`
	// 单位为字节

	SizeByte *int64 `json:"SizeByte,omitempty" name:"SizeByte"`
	// TcrRepoInfo值

	TcrRepoInfo *TcrRepoInfo `json:"TcrRepoInfo,omitempty" name:"TcrRepoInfo"`
}

type LaneGroup struct {

	// 泳道部署组ID

	LaneGroupId *string `json:"LaneGroupId,omitempty" name:"LaneGroupId"`
	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 是否入口应用

	Entrance *bool `json:"Entrance,omitempty" name:"Entrance"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
}

type ZipkinTraceInfoV2 struct {

	// 调用链ID

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 调用链时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 调用链时耗

	Duration *uint64 `json:"Duration,omitempty" name:"Duration"`
	// 调用链结果

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// 调用链错误标识

	ResultError *bool `json:"ResultError,omitempty" name:"ResultError"`
}

type MonitorGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 部署组描述信息

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
}

type DescribeThreadDetailListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 线程详情列表以及接口执行状态

		Result *ThreadDetailInfos `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeThreadDetailListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeThreadDetailListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RunJvmDeadLockCheckRequest struct {
	*tchttp.BaseRequest

	// 检测的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *RunJvmDeadLockCheckRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RunJvmDeadLockCheckRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateApiRateLimitRuleRequest struct {
	*tchttp.BaseRequest

	// 限流规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 开启/禁用，enabled/disabled

	UsableStatus *string `json:"UsableStatus,omitempty" name:"UsableStatus"`
	// qps值，开启限流规则时，必填

	MaxQps *int64 `json:"MaxQps,omitempty" name:"MaxQps"`
}

func (r *UpdateApiRateLimitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApiRateLimitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListMachinesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 无

		Result []*MachineList `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListMachinesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSubTransactionsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSubTransactionsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSubTransactionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AuthRule struct {

	// 规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 规则名称

	RuleName *string `json:"RuleName,omitempty" name:"RuleName"`
	// 是否启用

	IsEnabled *string `json:"IsEnabled,omitempty" name:"IsEnabled"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 标签列表

	Tags []*AuthConditionV2 `json:"Tags,omitempty" name:"Tags"`
	// 规则类型

	Type *string `json:"Type,omitempty" name:"Type"`
}

type DescribeReleasedConfigRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeReleasedConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasedConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeVisitAccountResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 体验账号

		Result *VisitAccount `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeVisitAccountResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeVisitAccountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MsInstanceWrong struct {

	// 机器实例ID信息

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 机器名称信息

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 机器运行的端口号

	InstancePort *int64 `json:"InstancePort,omitempty" name:"InstancePort"`
	// 机器实例内网IP

	LanIp *string `json:"LanIp,omitempty" name:"LanIp"`
	// 机器实例外网IP

	WanIp *string `json:"WanIp,omitempty" name:"WanIp"`
	// 机器实例可用状态

	InstanceAvailableStatus *string `json:"InstanceAvailableStatus,omitempty" name:"InstanceAvailableStatus"`
	// 服务运行状态

	ServiceInstanceStatus *string `json:"ServiceInstanceStatus,omitempty" name:"ServiceInstanceStatus"`
	// 程序包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 机器TSF可用状态

	InstanceStatus *string `json:"InstanceStatus,omitempty" name:"InstanceStatus"`
	// 容器pod名

	PodName *string `json:"PodName,omitempty" name:"PodName"`
	// 容器pod ID

	PodId *string `json:"PodId,omitempty" name:"PodId"`
	// 容器状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 容器node IP

	NodeIp *string `json:"NodeIp,omitempty" name:"NodeIp"`
	// 容器IP

	Ip *string `json:"Ip,omitempty" name:"Ip"`
	// 容器仓库名

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 容器tag

	TagName *string `json:"TagName,omitempty" name:"TagName"`
}

type TemplateProject struct {

	// 工程id

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
	// 工程名

	ProjectName *string `json:"ProjectName,omitempty" name:"ProjectName"`
	// 包路径

	BasePackage *string `json:"BasePackage,omitempty" name:"BasePackage"`
	// 修改时间

	LastTime *int64 `json:"LastTime,omitempty" name:"LastTime"`
	// Data

	Data *string `json:"Data,omitempty" name:"Data"`
	// AppId

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// SubAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type ValidateDeletePublicConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *ValidateDeletePublicConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ValidateDeletePublicConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type NativeThreadCountData struct {

	// java线程数

	JavaThreadCount *int64 `json:"JavaThreadCount,omitempty" name:"JavaThreadCount"`
	// 非java线程数

	NonJavaCount *int64 `json:"NonJavaCount,omitempty" name:"NonJavaCount"`
}

type ResultV2 struct {

	// KeyWordsName 和 GroupName

	ObjName *string `json:"ObjName,omitempty" name:"ObjName"`
}

type DescribeLicenseInfoRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeLicenseInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLicenseInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePathRewritesRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayGroupId *string `json:"GatewayGroupId,omitempty" name:"GatewayGroupId"`
	// 根据正则表达式或替换的内容模糊查询

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 每页数量

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribePathRewritesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePathRewritesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableRouteRequest struct {
	*tchttp.BaseRequest

	// 停用的服务路由ID

	RouteId *string `json:"RouteId,omitempty" name:"RouteId"`
}

func (r *DisableRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiDefinitionDescr struct {

	// 对象名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 对象属性列表

	Properties []*PropertyField `json:"Properties,omitempty" name:"Properties"`
}

type CreateBuildTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 构建任务id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateBuildTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateBuildTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteZoneRequest struct {
	*tchttp.BaseRequest

	// tZoneId

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
}

func (r *DeleteZoneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteZoneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayWithPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件绑定网关

		Result *TsfPageGatewayPluginModel `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayWithPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayWithPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApplicationV2 struct {

	// 应用 ID，如 application-qv3dkda7

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用描述

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 应用 *部署* 类型，V 表示 CVM 应用，C 表示容器应用

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 应用启动时的 JVM 参数

	ApplicationJvmArg *string `json:"ApplicationJvmArg,omitempty" name:"ApplicationJvmArg"`
	// 应用类型，M 表示 Mesh 应用，N 表示 Spring Cloud 应用

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 应用编程语言，J 表示 Java，P 表示 Python

	ProgLang *string `json:"ProgLang,omitempty" name:"ProgLang"`
	// 应用创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 应用修改时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 应用实例数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 应用当前运行实例数

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
}

type DescribePublicConfigReleaseLogsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页后的公共配置项发布历史列表

		Result *TsfPageConfigReleaseLog `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePublicConfigReleaseLogsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigReleaseLogsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PathRewritePage struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 路径重写规则列表

	Content []*PathRewrite `json:"Content,omitempty" name:"Content"`
}

type DescribeMsRouteFallbackResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true： 保护策略开启状态； false：保护策略停用状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMsRouteFallbackResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMsRouteFallbackResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PageRegionRegister struct {

	// RegionRegisters

	RegionRegisters []*RegionRegisterManager `json:"RegionRegisters,omitempty" name:"RegionRegisters"`
}

type CheckFlowGraphValidityRequest struct {
	*tchttp.BaseRequest

	// N

	FlowEdges []*TaskFlowEdge `json:"FlowEdges,omitempty" name:"FlowEdges"`
}

func (r *CheckFlowGraphValidityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckFlowGraphValidityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VmGroupOtherV2 struct {

	// 分组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 程序包Id

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 程序包名称

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 程序包版本

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 分组实例数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 分组运行中实例数

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 分组中停止实例数

	OffInstanceCount *int64 `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
	// 分组状态

	GroupStatus *string `json:"GroupStatus,omitempty" name:"GroupStatus"`
}

type PageMultiCloudUnitEntity struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*MultiCloudUnitEntity `json:"Content,omitempty" name:"Content"`
}

type ContainerTasksV2 struct {

	// taskId

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务开始时间

	TaskTime *string `json:"TaskTime,omitempty" name:"TaskTime"`
	// 任务类型字段，0：没有任务（在此接口中，不用出现0），1：发布程序包；2.部署操作；3.扩容操作；4.启动操作；5.停止操作；6.缩容操作；7.发布日志配置,8.删除销毁操作

	Type *int64 `json:"Type,omitempty" name:"Type"`
	// 变更状态，0：成功 1:失败 2：执行中

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 分组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 镜像名称

	ImageName *string `json:"ImageName,omitempty" name:"ImageName"`
	// 镜像版本

	ImageVersion *string `json:"ImageVersion,omitempty" name:"ImageVersion"`
	// 任务详情描述

	TaskDesc *string `json:"TaskDesc,omitempty" name:"TaskDesc"`
	// 任务总个数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 成功任务个数

	SuccessCount *int64 `json:"SuccessCount,omitempty" name:"SuccessCount"`
	// 失败任务个数

	FailCount *int64 `json:"FailCount,omitempty" name:"FailCount"`
}

type DeleteLaneRuleRequest struct {
	*tchttp.BaseRequest

	// 泳道规则Id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DeleteLaneRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteLaneRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInovcationIndicatorsRequest struct {
	*tchttp.BaseRequest

	// 维度

	Dimension *string `json:"Dimension,omitempty" name:"Dimension"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 调用方服务名

	CallerServiceName *string `json:"CallerServiceName,omitempty" name:"CallerServiceName"`
	// 被调方服务名

	CalleeServiceName *string `json:"CalleeServiceName,omitempty" name:"CalleeServiceName"`
	// 调用方接口名

	CallerInterfaceName *string `json:"CallerInterfaceName,omitempty" name:"CallerInterfaceName"`
	// 被调方接口名

	CalleeInterfaceName *string `json:"CalleeInterfaceName,omitempty" name:"CalleeInterfaceName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeInovcationIndicatorsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInovcationIndicatorsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLaneRuleRequest struct {
	*tchttp.BaseRequest

	// 泳道规则Id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DescribeLaneRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUnitApiUseDetailRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 网关分组Api ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// 查询的日期,格式：yyyy-MM-dd HH:mm:ss

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询的日期,格式：yyyy-MM-dd HH:mm:ss

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 网关实例ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 网关分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 监控统计数据粒度

	Period *int64 `json:"Period,omitempty" name:"Period"`
	// 翻页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeUnitApiUseDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitApiUseDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateLaneRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 泳道规则Id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateLaneRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateLaneRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteTaskFlowResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否删除成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteTaskFlowResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteTaskFlowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableRatelimitRequest struct {
	*tchttp.BaseRequest

	// 名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 限流所作用的目标微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 规则列表，其中Id必填

	Rules []*RatelimitRuleForUpdate `json:"Rules,omitempty" name:"Rules"`
}

func (r *EnableRatelimitRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableRatelimitRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetJvmMonitorMethodProfileRequest struct {
	*tchttp.BaseRequest

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 采样数，0~10，0表示不采样

	SamplingCount *uint64 `json:"SamplingCount,omitempty" name:"SamplingCount"`
	// 采样类名

	SamplingClass *string `json:"SamplingClass,omitempty" name:"SamplingClass"`
	// 采样方法名，为空时表示该类下的所有方法

	SamplingMethod *string `json:"SamplingMethod,omitempty" name:"SamplingMethod"`
}

func (r *SetJvmMonitorMethodProfileRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetJvmMonitorMethodProfileRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLaneGroupsRequest struct {
	*tchttp.BaseRequest

	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 每页展示的条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 搜索关键词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *DescribeLaneGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUnitRuleCreateTypeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 单元化规则创建类型：控制台常规创建(DEFAULT)/超云创建(MULTI_CLOUD)

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUnitRuleCreateTypeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitRuleCreateTypeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstancesResult struct {

	// Ip值

	Ip *string `json:"Ip,omitempty" name:"Ip"`
	// Status值

	Status *string `json:"Status,omitempty" name:"Status"`
	// Ports值

	Ports []*PortsResult `json:"Ports,omitempty" name:"Ports"`
	// InstanceId值

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// ModuleId值

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// ModuleName值

	ModuleName *string `json:"ModuleName,omitempty" name:"ModuleName"`
	// ModuleType值

	ModuleType *string `json:"ModuleType,omitempty" name:"ModuleType"`
	// UserName值

	UserName *string `json:"UserName,omitempty" name:"UserName"`
	// Password值

	Password *string `json:"Password,omitempty" name:"Password"`
	// ModuleCommon值

	ModuleCommon *int64 `json:"ModuleCommon,omitempty" name:"ModuleCommon"`
	// UpdateTime值

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// DeployTime值

	DeployTime *string `json:"DeployTime,omitempty" name:"DeployTime"`
	// MachineId值

	MachineId *string `json:"MachineId,omitempty" name:"MachineId"`
	// ZoneId值

	ZoneId *string `json:"ZoneId,omitempty" name:"ZoneId"`
	// ZoneName值

	ZoneName *string `json:"ZoneName,omitempty" name:"ZoneName"`
	// ModuleRole值

	ModuleRole *string `json:"ModuleRole,omitempty" name:"ModuleRole"`
	// SshPort值

	SshPort *int64 `json:"SshPort,omitempty" name:"SshPort"`
}

type DescribeSimpleGroupsRequest struct {
	*tchttp.BaseRequest

	// 部署组ID列表，不填写时查询全量

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
	// 应用ID，不填写时查询全量

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 集群ID，不填写时查询全量

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 命名空间ID，不填写时查询全量

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 部署组ID，不填写时查询全量

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 模糊查询，部署组名称，不填写时查询全量

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 部署组类型，精确过滤字段，M：service mesh, P：原生应用， G：网关应用

	AppMicroServiceType *string `json:"AppMicroServiceType,omitempty" name:"AppMicroServiceType"`
}

func (r *DescribeSimpleGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageImageInfo struct {

	// TotalCount

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// TsfPageImageInfo详情

	Content []*ImageInfo `json:"Content,omitempty" name:"Content"`
}

type GetOssTraceSpansResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 调用链Span列表

		Result *TsfPageZipkinSpanInfoV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetOssTraceSpansResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetOssTraceSpansResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageTraceService struct {

	// 符合条件的总调用链服务名数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 调用链服务名列表

	Content []*string `json:"Content,omitempty" name:"Content"`
}

type DescribeBuildTasksRequest struct {
	*tchttp.BaseRequest

	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 返回数量，默认为20，最大值为100。

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 偏移量，默认为0。

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 通过构建任务id过滤

	BuildTaskIds []*string `json:"BuildTaskIds,omitempty" name:"BuildTaskIds"`
	// 模糊匹配

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *DescribeBuildTasksRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBuildTasksRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListColudMonitorStatisticsPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// CloudMonitorPolicyresult

		Result *CloudMonitorPolicyResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListColudMonitorStatisticsPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListColudMonitorStatisticsPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageZipkinSpanInfoV2 struct {

	// 总条目数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 调用链Span列表

	Content []*ZipkinSpanInfoV2 `json:"Content,omitempty" name:"Content"`
}

type CloudMonitorPolicyResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*CloudMonitorPolicies `json:"Content,omitempty" name:"Content"`
}

type GatewayDeployGroup struct {

	// 网关部署组ID

	DeployGroupId *string `json:"DeployGroupId,omitempty" name:"DeployGroupId"`
	// 网关部署组名称

	DeployGroupName *string `json:"DeployGroupName,omitempty" name:"DeployGroupName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用分类：V：虚拟机应用，C：容器应用

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 部署组应用状态,取值: Running、Waiting、Paused、Updating、RollingBack、Abnormal、Unknown

	GroupStatus *string `json:"GroupStatus,omitempty" name:"GroupStatus"`
	// 集群类型，C ：容器，V：虚拟机

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
}

type TsfPageRouteRule struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 路由规则数组

	Content []*RouteRule `json:"Content,omitempty" name:"Content"`
}

type ListGroupsByScalableRuleIdRequest struct {
	*tchttp.BaseRequest

	// 规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 偏移量，从0开始

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// limit量

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// applicationId和groupId为参数查询

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *ListGroupsByScalableRuleIdRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListGroupsByScalableRuleIdRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ClusterLimitResourceV2 struct {

	// 最大分配 CPU 核数

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配内存 MiB 数

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 初始分配 CPU 核数

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 初始分配内存 MiB 数

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
}

type CreateTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiAccessResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 输出结果

		Result *ApplicationApiAccess `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApiAccessResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiAccessResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInstancesRequest struct {
	*tchttp.BaseRequest

	// 过滤条件

	Filters []*Filter `json:"Filters,omitempty" name:"Filters"`
	// 偏移量，默认为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20，最大100

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopReqAmountServicesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TopN条目列表

		Result []*StatisticsEntry `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTopReqAmountServicesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopReqAmountServicesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUnitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 单元化规则对象

		Result *UnitRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUnitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListScalableRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果列表

		Result *ListScalableRuleResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListScalableRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListScalableRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterMonitorResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群监控详情

		Result *ClusterMonitor `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterMonitorResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterMonitorResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskBatchHistoryRecordsRequest struct {
	*tchttp.BaseRequest

	// 批次 ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 批次历史ID

	BatchLogId *string `json:"BatchLogId,omitempty" name:"BatchLogId"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *DescribeTaskBatchHistoryRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskBatchHistoryRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CheckExecuteStatusRequest struct {
	*tchttp.BaseRequest

	// 检查状态名称

	StatusName *string `json:"StatusName,omitempty" name:"StatusName"`
	// 模块ID

	RelevanceId *string `json:"RelevanceId,omitempty" name:"RelevanceId"`
}

func (r *CheckExecuteStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckExecuteStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCurrentAppIdResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 获取当前登录用户的AppId

		Result *TsfPageAppIdEntity `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeCurrentAppIdResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCurrentAppIdResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetUpKubeInjectRequest struct {
	*tchttp.BaseRequest

	// ClusterId值

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *SetUpKubeInjectRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetUpKubeInjectRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FilebeatConfigPage struct {

	// 总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置列表

	Content []*FilebeatConfig `json:"Content,omitempty" name:"Content"`
}

type DescribeRatelimitCommitConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 已有全局规则数量

		GlobalRuleCount *uint64 `json:"GlobalRuleCount,omitempty" name:"GlobalRuleCount"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRatelimitCommitConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRatelimitCommitConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssTraceRequest struct {
	*tchttp.BaseRequest

	// 搜索开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 搜索结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 是否仅展示错误调用链

	ErrorTrace *bool `json:"ErrorTrace,omitempty" name:"ErrorTrace"`
	// 错误码

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// 错误信息

	ErrMsg *string `json:"ErrMsg,omitempty" name:"ErrMsg"`
	// 最小耗时

	MinDuration *uint64 `json:"MinDuration,omitempty" name:"MinDuration"`
	// 最长耗时

	MaxDuration *uint64 `json:"MaxDuration,omitempty" name:"MaxDuration"`
	// 排序方式，支持"timestamp"和"duration"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方向，支持"asc"和"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 返回trace数目，取值范围[0, 100]，默认值20

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 查询trace偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 用户自定义标签

	Tags *string `json:"Tags,omitempty" name:"Tags"`
	// 调用方服务名

	CallerServiceName *string `json:"CallerServiceName,omitempty" name:"CallerServiceName"`
	// 被调方服务名

	CalleeServiceName *string `json:"CalleeServiceName,omitempty" name:"CalleeServiceName"`
	// 调用方接口名

	CallerInterfaceName *string `json:"CallerInterfaceName,omitempty" name:"CallerInterfaceName"`
	// 被调方接口名

	CalleeInterfaceName *string `json:"CalleeInterfaceName,omitempty" name:"CalleeInterfaceName"`
	// 调用方IP

	CallerIp *string `json:"CallerIp,omitempty" name:"CallerIp"`
	// 被调方IP

	CalleeIp *string `json:"CalleeIp,omitempty" name:"CalleeIp"`
}

func (r *SearchOssTraceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssTraceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreatePathRewritesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreatePathRewritesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreatePathRewritesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteConfigTemplateRequest struct {
	*tchttp.BaseRequest

	// 无

	ConfigTemplateId *string `json:"ConfigTemplateId,omitempty" name:"ConfigTemplateId"`
}

func (r *DeleteConfigTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteConfigTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OverviewBasicResourceUsage struct {

	// 应用总数

	ApplicationCount *int64 `json:"ApplicationCount,omitempty" name:"ApplicationCount"`
	// 命名空间总数

	NamespaceCount *int64 `json:"NamespaceCount,omitempty" name:"NamespaceCount"`
	// 部署组个数

	GroupCount *int64 `json:"GroupCount,omitempty" name:"GroupCount"`
	// 程序包存储空间用量，单位字节

	PackageSpaceUsed *int64 `json:"PackageSpaceUsed,omitempty" name:"PackageSpaceUsed"`
	// 已注册实例数

	ConsulInstanceCount *int64 `json:"ConsulInstanceCount,omitempty" name:"ConsulInstanceCount"`
}

type VmGroupSimple struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 部署组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 部署组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 部署组启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 部署组创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 部署组资源类型

	GroupResourceType *string `json:"GroupResourceType,omitempty" name:"GroupResourceType"`
	// 部署组更新时间戳

	UpdatedTime *int64 `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 部署应用描述信息

	DeployDesc *string `json:"DeployDesc,omitempty" name:"DeployDesc"`
	// 部署组备注

	Alias *string `json:"Alias,omitempty" name:"Alias"`
	// 无

	JdkName *string `json:"JdkName,omitempty" name:"JdkName"`
	// 无

	JdkVersion *string `json:"JdkVersion,omitempty" name:"JdkVersion"`
	// 无

	ServiceAgentVersion *string `json:"ServiceAgentVersion,omitempty" name:"ServiceAgentVersion"`
	// 无

	StartScript *string `json:"StartScript,omitempty" name:"StartScript"`
	// 无

	AgentProfileList []*AgentProfile `json:"AgentProfileList,omitempty" name:"AgentProfileList"`
	// 无

	GatewayConfig *GatewayConfig `json:"GatewayConfig,omitempty" name:"GatewayConfig"`
	// 无

	Status *string `json:"Status,omitempty" name:"Status"`
	// 无

	WarmupSetting *WarmupSetting `json:"WarmupSetting,omitempty" name:"WarmupSetting"`
	// 无

	ForceStart *bool `json:"ForceStart,omitempty" name:"ForceStart"`
	// 无

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 无

	ServiceSpecEncode *string `json:"ServiceSpecEncode,omitempty" name:"ServiceSpecEncode"`
	// 无

	StopScript *string `json:"StopScript,omitempty" name:"StopScript"`
	// 无

	OtAgentVersion *string `json:"OtAgentVersion,omitempty" name:"OtAgentVersion"`
}

type GetServiceStatisticsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务运行统计指标

		Result *ServiceStatistics `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetServiceStatisticsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetServiceStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ChangeContainerReplicasResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ChangeContainerReplicasResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ChangeContainerReplicasResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFunctionStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 功能状态

		Result *FunctionStatusResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFunctionStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFunctionStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiVersionsRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// API 请求路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
}

func (r *DescribeApiVersionsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiVersionsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyAuthorizationInfoRequest struct {
	*tchttp.BaseRequest

	// 被调用服务 ID

	TargetServiceId *string `json:"TargetServiceId,omitempty" name:"TargetServiceId"`
	// 命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 是否启用鉴权功能

	IsEnabled *bool `json:"IsEnabled,omitempty" name:"IsEnabled"`
	// 鉴权条件

	Conditions []*AuthCondition `json:"Conditions,omitempty" name:"Conditions"`
}

func (r *ModifyAuthorizationInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyAuthorizationInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RedoTaskExecuteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功失败

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RedoTaskExecuteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RedoTaskExecuteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseProductNewsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleaseProductNewsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseProductNewsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作成功or失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFileConfigReleaseLogsRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeFileConfigReleaseLogsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigReleaseLogsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RouteV2 struct {

	// 路由规则ID

	RouteId *string `json:"RouteId,omitempty" name:"RouteId"`
	// 路由规则名称

	RouteName *string `json:"RouteName,omitempty" name:"RouteName"`
	// 路由规则描述信息

	RouteDesc *string `json:"RouteDesc,omitempty" name:"RouteDesc"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 路由启用状态。
	// true：路由规则为启用状态，。
	// false：路由规则为停用状态

	EnableStatus *bool `json:"EnableStatus,omitempty" name:"EnableStatus"`
	// 路由规则创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 路由规则更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 微服务所属命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 路由规则包含路由规则项列表

	RuleList []*RouteRuleV2 `json:"RuleList,omitempty" name:"RuleList"`
}

type TemplatePageResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*ProjectList `json:"Content,omitempty" name:"Content"`
}

type GroupUnitApiUseStatistics struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 查询网关API监控明细对象集合

	Content []*GroupUnitApiDailyUseStatistics `json:"Content,omitempty" name:"Content"`
}

type KubeNamespacePage struct {

	// TotalCount值

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content值`

	Content []*KubeNamespace `json:"Content,omitempty" name:"Content"`
}

type DescribeClusterInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群机器实例分页信息

		Result *TsfPageInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePkgsRequest struct {
	*tchttp.BaseRequest

	// 应用ID（只传入应用ID，返回该应用下所有软件包信息）

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 查询关键字（支持根据包ID，包名，包版本号搜索）

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序关键字（默认为"UploadTime"：上传时间）

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序：0/降序：1（默认降序）

	OrderType *uint64 `json:"OrderType,omitempty" name:"OrderType"`
	// 查询起始偏移

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 返回数量限制

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 程序包仓库类型

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
	// 程序包仓库id

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
	// 程序包类型数组支持（fatjar jar war tar.gz zip）

	PackageTypeList []*string `json:"PackageTypeList,omitempty" name:"PackageTypeList"`
}

func (r *DescribePkgsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePkgsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstallAgentScriptsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 安装agent脚本内容

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *InstallAgentScriptsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *InstallAgentScriptsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Filter struct {

	// 过滤条件名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 过滤条件匹配值，几个条件间是或关系

	Values []*string `json:"Values,omitempty" name:"Values"`
}

type DescribeUserPurchaseInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 购买信息

		Result *PurchaseInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUserPurchaseInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUserPurchaseInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyContainerGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// ProtocolPorts数组

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 部署组备注

	Alias *string `json:"Alias,omitempty" name:"Alias"`
}

func (r *ModifyContainerGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyContainerGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 部署组备注

	Alias *string `json:"Alias,omitempty" name:"Alias"`
	// KubeInjectEnable值

	KubeInjectEnable *bool `json:"KubeInjectEnable,omitempty" name:"KubeInjectEnable"`
	// 更新时间

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
}

type TaskFlowLastBatchState struct {

	// 批次ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 批次历史ID

	FlowBatchLogId *string `json:"FlowBatchLogId,omitempty" name:"FlowBatchLogId"`
	// 状态,WAITING/SUCCESS/FAILED/RUNNING/TERMINATING

	State *string `json:"State,omitempty" name:"State"`
}

type DescribeAuthorizationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务权限规则

		Result *AuthRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAuthorizationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInvocationStatisticsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 调用统计数据

		Result *TsfPageInvocationStatisticsV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInvocationStatisticsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineTaskRunRecordResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 执行日志

		RuntimeLog *string `json:"RuntimeLog,omitempty" name:"RuntimeLog"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasePipelineTaskRunRecordResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineTaskRunRecordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListMonitorStatisticsPolicyResultV2 struct {

	// 监控统计策略id

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// 关键词

	KeyWords *string `json:"KeyWords,omitempty" name:"KeyWords"`
	// 部署组列表信息

	GroupList *GroupList `json:"GroupList,omitempty" name:"GroupList"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type UploadInfo struct {

	// 上传包ID

	UploadId *string `json:"UploadId,omitempty" name:"UploadId"`
}

type DescribeMicroservicesByGroupIdsRequest struct {
	*tchttp.BaseRequest

	// 部署组ID 列表

	GroupIds []*string `json:"GroupIds,omitempty" name:"GroupIds"`
}

func (r *DescribeMicroservicesByGroupIdsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroservicesByGroupIdsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DownloadMultipartPkgResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分片下载响应详情

		Result *MultipartPkg `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DownloadMultipartPkgResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DownloadMultipartPkgResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteFileConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteFileConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteFileConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopBuildTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StopBuildTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopBuildTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DraftApiGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true: 成功, false: 失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DraftApiGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DraftApiGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MonitorStatisticsPolicyGroupV2 struct {

	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// GroupName

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// GroupDesc

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// NamespaceName

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// ApplicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// ApplicationName

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// ClusterId

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// ClusterName

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
}

type TaskExecuteHistoryRecordPage struct {

	// 分页总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 分页对象

	Content []*TaskExecuteHistoryRecord `json:"Content,omitempty" name:"Content"`
}

type DescribeContainerGroupDetailRequest struct {
	*tchttp.BaseRequest

	// 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeContainerGroupDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableTaskRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DisableTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayPluginModel struct {

	// 网关实例id

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 服务id

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 插件id

	PluginId *string `json:"PluginId,omitempty" name:"PluginId"`
}

type UpdateGatewayQQMiniProgramLoginPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件Id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件类型 "QQMiniProgramLogin"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 小程序AppId

	QqAppId *string `json:"QqAppId,omitempty" name:"QqAppId"`
	// 小程序请求code携带位置：header/cookie

	RequestCodeBaggagePosition *string `json:"RequestCodeBaggagePosition,omitempty" name:"RequestCodeBaggagePosition"`
	// 自定义登录态参数名

	SessionKeyName *string `json:"SessionKeyName,omitempty" name:"SessionKeyName"`
	// 自定义登录态过期时间，单位：秒

	SessionExpireTime *int64 `json:"SessionExpireTime,omitempty" name:"SessionExpireTime"`
	// 前台业务请求自定义登录态参数位置：header/cookie

	RequestSessionBaggagePosition *string `json:"RequestSessionBaggagePosition,omitempty" name:"RequestSessionBaggagePosition"`
	// 向业务后台传输登录态参数位置：header/cookie/query

	BusinessSessionBaggagePosition *string `json:"BusinessSessionBaggagePosition,omitempty" name:"BusinessSessionBaggagePosition"`
	// 返回自定义登录态参数位置：header

	ResponseSessionBaggagePosition *string `json:"ResponseSessionBaggagePosition,omitempty" name:"ResponseSessionBaggagePosition"`
	// 元数据转标签配置的Json串

	MetaDataTagInfoList *string `json:"MetaDataTagInfoList,omitempty" name:"MetaDataTagInfoList"`
	// 自定义标签配置的Json串

	CustomizeTagInfoList *string `json:"CustomizeTagInfoList,omitempty" name:"CustomizeTagInfoList"`
}

func (r *UpdateGatewayQQMiniProgramLoginPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayQQMiniProgramLoginPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UploadLicenseApplicationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功与否

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UploadLicenseApplicationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UploadLicenseApplicationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroServiceListRequest struct {
	*tchttp.BaseRequest

	// 命名空间名

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 分页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务名

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
}

func (r *DescribeMicroServiceListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroServiceListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetUpKubeInjectResult struct {

	// success值

	Success *bool `json:"Success,omitempty" name:"Success"`
}

type DeployGroupV2 struct {

	// 部署组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 部署组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 部署组创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 部署组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 部署组实例数目

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 部署组运行实例数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 部署组停止实例数目

	OffInstanceCount *int64 `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
	// 部署组状态

	GroupStatus *string `json:"GroupStatus,omitempty" name:"GroupStatus"`
	// 部署组启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 部署组程序包Id

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 部署组程序包名称

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 部署组程序包版本

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 最大分配cpu 核数，如0.6

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配内存M数

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 端口数组对象

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// 环境变量数组对象

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// pod错误信息描述

	Message *string `json:"Message,omitempty" name:"Message"`
	// NodePort端口，只有公网和NodePort访问方式才有值

	NodePort *int64 `json:"NodePort,omitempty" name:"NodePort"`
	// 部署组状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 应用微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type TestKuberneteNativeConnectionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// result值

		Result *SimpleResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *TestKuberneteNativeConnectionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *TestKuberneteNativeConnectionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Application struct {

	// 应用 ID，如 application-qv3dkda7

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用描述

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 应用 *部署* 类型，V 表示 CVM 应用，C 表示容器应用

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 应用启动时的 JVM 参数

	ApplicationJvmArg *string `json:"ApplicationJvmArg,omitempty" name:"ApplicationJvmArg"`
	// 应用类型，M 表示 Mesh 应用，N 表示 Spring Cloud 应用

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 应用编程语言，J 表示 Java，P 表示 Python

	ProgLang *string `json:"ProgLang,omitempty" name:"ProgLang"`
	// 应用创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 应用修改时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 应用实例数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 应用当前运行实例数

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
}

type CreateSidecarFilterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 过滤器Id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateSidecarFilterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateSidecarFilterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListScalableRuleRequest struct {
	*tchttp.BaseRequest

	// 关键字搜索，按照name和id进行模糊匹配

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量,从0开始

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// limit量

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 无

	RuleIdList []*string `json:"RuleIdList,omitempty" name:"RuleIdList"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
}

func (r *ListScalableRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListScalableRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupPodResult struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表信息

	Content []*GroupPod `json:"Content,omitempty" name:"Content"`
}

type DescribeConfigsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页后的配置项列表

		Result *TsfPageConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeConfigsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDownloadInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// COS鉴权信息

		Result *CosDownloadInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeDownloadInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDownloadInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PagedRole struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 角色列表

	Content []*Role `json:"Content,omitempty" name:"Content"`
}

type UnitRuleItem struct {

	// 规则项ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 单元化规则ID

	UnitRuleId *string `json:"UnitRuleId,omitempty" name:"UnitRuleId"`
	// 逻辑关系：AND/OR

	Relationship *string `json:"Relationship,omitempty" name:"Relationship"`
	// 目的地命名空间ID

	DestNamespaceId *string `json:"DestNamespaceId,omitempty" name:"DestNamespaceId"`
	// 目的地命名空间名称

	DestNamespaceName *string `json:"DestNamespaceName,omitempty" name:"DestNamespaceName"`
	// 规则项名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 规则顺序，越小优先级越高：默认为0

	Priority *int64 `json:"Priority,omitempty" name:"Priority"`
	// 规则描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 规则标签列表

	UnitRuleTagList []*UnitRuleTag `json:"UnitRuleTagList,omitempty" name:"UnitRuleTagList"`
	// DestTsfId

	DestTsfId *string `json:"DestTsfId,omitempty" name:"DestTsfId"`
	// DestUnitId

	DestUnitId *string `json:"DestUnitId,omitempty" name:"DestUnitId"`
	// DestUnitName

	DestUnitName *string `json:"DestUnitName,omitempty" name:"DestUnitName"`
	// DestTsfName

	DestTsfName *string `json:"DestTsfName,omitempty" name:"DestTsfName"`
	// DestConfigId

	DestConfigId *string `json:"DestConfigId,omitempty" name:"DestConfigId"`
	// DestConfigName

	DestConfigName *string `json:"DestConfigName,omitempty" name:"DestConfigName"`
}

type ModifyAuthorizationTypeRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 鉴权类型，D：未启用；B：黑名单模式；W：白名单模式

	Type *string `json:"Type,omitempty" name:"Type"`
	// 是否校验Type，新版本都需要校验，false 或不填时兼容老场景

	TypeCheck *bool `json:"TypeCheck,omitempty" name:"TypeCheck"`
}

func (r *ModifyAuthorizationTypeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyAuthorizationTypeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReassociateBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReassociateBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReassociateBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SidecarFilters struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 过滤器列表

	Content []*SidecarFilter `json:"Content,omitempty" name:"Content"`
}

type ConfigSummaryV2 struct {

	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项值

	ConfigVersionCount *int64 `json:"ConfigVersionCount,omitempty" name:"ConfigVersionCount"`
	// 配置项类型

	LastUpdateTime *string `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
}

type GatewayInstance struct {

	// 网关实体ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 微服务ID（ms-xxx）

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 网关实例类型：单元化(unit)/非单元化网关(none)

	Type *string `json:"Type,omitempty" name:"Type"`
	// 注册中心在线节点数

	ConsulInstanceCount *int64 `json:"ConsulInstanceCount,omitempty" name:"ConsulInstanceCount"`
	// 是否禁用绑定(超云)

	MultiCloudStatus *string `json:"MultiCloudStatus,omitempty" name:"MultiCloudStatus"`
	// 禁用提示信息(超云)

	MultiCloudStatusMsg *string `json:"MultiCloudStatusMsg,omitempty" name:"MultiCloudStatusMsg"`
}

type TypeCode struct {

	// 术语英文描述

	Code *string `json:"Code,omitempty" name:"Code"`
	// 术语中文描述

	Name *string `json:"Name,omitempty" name:"Name"`
}

type DeleteDeliveryConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteDeliveryConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteDeliveryConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterInstanceCountResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群信息

		Result *ClusterV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterInstanceCountResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterInstanceCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinesLogConfigAssociatedGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 部署组所属应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组所属应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 部署组所属应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 部署组所属命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 部署组所属命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 部署组所属集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 部署组所属集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 部署组所属集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 部署组关联日志配置时间

	AssociatedTime *string `json:"AssociatedTime,omitempty" name:"AssociatedTime"`
}

type BillingOperationRenewResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果（true成功，false失败）

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *BillingOperationRenewResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationRenewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RevokeFileConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 撤回结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RevokeFileConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RevokeFileConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TriggerReleasePipelineRunTaskActionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 设置是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *TriggerReleasePipelineRunTaskActionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *TriggerReleasePipelineRunTaskActionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInvocationMetricScatterPlotRequest struct {
	*tchttp.BaseRequest

	// 查询开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 查询时间粒度，单位秒。可选值：60、3600、86400。

	Period *int64 `json:"Period,omitempty" name:"Period"`
	// 查询指标维度

	MetricDimensions []*MetricDimension `json:"MetricDimensions,omitempty" name:"MetricDimensions"`
	// 查询指标名

	Metrics []*Metric `json:"Metrics,omitempty" name:"Metrics"`
	// 视图视角。可选值：SERVER, CLIENT。默认为SERVER

	Kind *string `json:"Kind,omitempty" name:"Kind"`
}

func (r *DescribeInvocationMetricScatterPlotRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationMetricScatterPlotRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyReleaseTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 修改模板是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyReleaseTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyReleaseTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RedoTaskBatchRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
}

func (r *RedoTaskBatchRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RedoTaskBatchRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssStaticBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 实时日志基准时间戳

	RealtimeTs *uint64 `json:"RealtimeTs,omitempty" name:"RealtimeTs"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 单页请求配置数量，取值范围[1, 200]，默认值为50

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 排序规则，默认值"time"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 请求偏移量，取值范围大于等于0，默认值为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 实例ip

	InstanceIp *string `json:"InstanceIp,omitempty" name:"InstanceIp"`
	// 模块名

	ModuleName *string `json:"ModuleName,omitempty" name:"ModuleName"`
}

func (r *SearchOssStaticBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssStaticBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployServerlessGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 所需实例内存大小，取值为 1Gi 2Gi 4Gi 8Gi 16Gi，缺省为 1Gi，不传表示维持原态

	Memory *string `json:"Memory,omitempty" name:"Memory"`
	// 要求最小实例数，取值范围 [1, 4]，缺省为 1，不传表示维持原态

	InstanceRequest *uint64 `json:"InstanceRequest,omitempty" name:"InstanceRequest"`
	// 部署组启动参数，不传表示维持原态

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
}

func (r *DeployServerlessGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployServerlessGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAllBillingLicensesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 计费许可分页信息

		Result *TsfPageBillingLicense `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAllBillingLicensesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAllBillingLicensesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInstanceResourceUsageResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 实例相关信息概览

		Result *OverviewInstanceResourceUsage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInstanceResourceUsageResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceResourceUsageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSimpleInstancesRequest struct {
	*tchttp.BaseRequest

	// 机器实例ID列表，不传入时查询全量

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
	// 集群ID，不传入时查询全量

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 每页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribeSimpleInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateTaskFlowRequest struct {
	*tchttp.BaseRequest

	// 工作流名称

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
	// 触发方式

	TriggerRule *TaskRule `json:"TriggerRule,omitempty" name:"TriggerRule"`
	// 工作流任务节点列表

	FlowEdges []*TaskFlowEdge `json:"FlowEdges,omitempty" name:"FlowEdges"`
	// 工作流执行超时时间

	TimeOut *uint64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateTaskFlowRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateTaskFlowRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetEnvoyDebugResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 设置成功为true

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SetEnvoyDebugResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetEnvoyDebugResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type JavaInstance struct {

	// 实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 服务运行时间, 单位秒

	ElapsedTime *int64 `json:"ElapsedTime,omitempty" name:"ElapsedTime"`
	// cpu消耗总时长, 单位秒

	CupConsumingTime *int64 `json:"CupConsumingTime,omitempty" name:"CupConsumingTime"`
	// 服务JIT编译时间, 单位秒

	JitCompileTime *int64 `json:"JitCompileTime,omitempty" name:"JitCompileTime"`
	// 已用堆大小,单位KB

	HeapUsed *int64 `json:"HeapUsed,omitempty" name:"HeapUsed"`
	// 可用堆大小,单位KB

	HeapFree *int64 `json:"HeapFree,omitempty" name:"HeapFree"`
	// 堆大小总量,单位KB

	HeapSize *int64 `json:"HeapSize,omitempty" name:"HeapSize"`
	// commit堆内存, 单位KB

	HeapCommitted *int64 `json:"HeapCommitted,omitempty" name:"HeapCommitted"`
	// 等待构析的对象数量

	WaitBuildObjectCount *int64 `json:"WaitBuildObjectCount,omitempty" name:"WaitBuildObjectCount"`
	// 产生Young GC总次数

	YoungGcCount *int64 `json:"YoungGcCount,omitempty" name:"YoungGcCount"`
	// 产生Full GC总次数

	FullGcCount *int64 `json:"FullGcCount,omitempty" name:"FullGcCount"`
	// Young GC总耗时长, 单位秒

	YoungGcConsumingTime *int64 `json:"YoungGcConsumingTime,omitempty" name:"YoungGcConsumingTime"`
	// Full GC总耗时长, 单位秒

	FullGcCountConsumingTime *int64 `json:"FullGcCountConsumingTime,omitempty" name:"FullGcCountConsumingTime"`
	// 活跃线程数

	ActiveThreadCount *int64 `json:"ActiveThreadCount,omitempty" name:"ActiveThreadCount"`
	// cpu使用率

	CpuPercent *int64 `json:"CpuPercent,omitempty" name:"CpuPercent"`
	// 异步执行错误时,各种错误信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// 异步执行错误时,对应的错误码

	StatusCode *int64 `json:"StatusCode,omitempty" name:"StatusCode"`
}

type TsfPageInstance struct {

	// 机器实例总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 机器实例列表

	Content []*Instance `json:"Content,omitempty" name:"Content"`
}

type VmTaskV2 struct {

	// 任务Id

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 任务类型

	TaskType *int64 `json:"TaskType,omitempty" name:"TaskType"`
	// 分组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 程序包Id

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 程序包名称

	PkgName *string `json:"PkgName,omitempty" name:"PkgName"`
	// 程序包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 任务描述

	TaskDesc *string `json:"TaskDesc,omitempty" name:"TaskDesc"`
	// 子任务数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 成功的子任务数目

	SuccessCount *int64 `json:"SuccessCount,omitempty" name:"SuccessCount"`
	// 运行中的子任务数目

	RunCount *int64 `json:"RunCount,omitempty" name:"RunCount"`
	// 失败的子任务数目

	FailCount *int64 `json:"FailCount,omitempty" name:"FailCount"`
}

type VmInstanceResourceConfig struct {

	// 实例导入方式，可多个，公有云为 ["R", "M"]，独立版的取值仅有 "M" 脚本模式

	ImportMode []*string `json:"ImportMode,omitempty" name:"ImportMode"`
}

type GatewayConfig struct {

	// 服务名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 服务端口

	Port *int64 `json:"Port,omitempty" name:"Port"`
	// 端口协议, http或https

	Protocol *string `json:"Protocol,omitempty" name:"Protocol"`
	// SSL秘钥文件路径, https类型的协议适用此参数

	KeyPath *string `json:"KeyPath,omitempty" name:"KeyPath"`
	// SSL证书文件路径, https类型的协议适用此参数

	CertPath *string `json:"CertPath,omitempty" name:"CertPath"`
}

type TaskExecuteRecord struct {

	// 批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 执行ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
	// 状态

	State *string `json:"State,omitempty" name:"State"`
	// 开始时间

	StartTime *uint64 `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *uint64 `json:"EndTime,omitempty" name:"EndTime"`
	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 重试次数

	RetryCount *uint64 `json:"RetryCount,omitempty" name:"RetryCount"`
	// 任务执行分组

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 超时时间，单位ms

	TimeOut *uint64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 执行历史数量

	HistoryCount *int64 `json:"HistoryCount,omitempty" name:"HistoryCount"`
	// 触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 分片索引参数

	ShardKey *uint64 `json:"ShardKey,omitempty" name:"ShardKey"`
	// 执行历史 ID

	ExecuteLogId *string `json:"ExecuteLogId,omitempty" name:"ExecuteLogId"`
	// 批次历史 ID

	BatchLogId *string `json:"BatchLogId,omitempty" name:"BatchLogId"`
	// 任务 ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 批次类型

	BatchType *string `json:"BatchType,omitempty" name:"BatchType"`
	// 失败重试次数

	FailRetryTime *int64 `json:"FailRetryTime,omitempty" name:"FailRetryTime"`
	// 执行日志

	ExecuteLog *string `json:"ExecuteLog,omitempty" name:"ExecuteLog"`
	// 附加数据

	ExtraData *string `json:"ExtraData,omitempty" name:"ExtraData"`
}

type PropertyField struct {

	// 属性名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 属性类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 属性描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

type DeleteImageTagResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteImageTagResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteImageTagResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ExpandNamespaceRequest struct {
	*tchttp.BaseRequest

	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 机器id列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
	// 容器系统重装，系统名称

	OsName *string `json:"OsName,omitempty" name:"OsName"`
	// cvm系统重装，镜像id

	ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
	// 密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// 秘钥

	KeyId *string `json:"KeyId,omitempty" name:"KeyId"`
	// 安全组

	SgId *string `json:"SgId,omitempty" name:"SgId"`
}

func (r *ExpandNamespaceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExpandNamespaceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TerminateTaskFlowBatchResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否停止成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *TerminateTaskFlowBatchResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *TerminateTaskFlowBatchResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAlarmOverviewListRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeAlarmOverviewListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAlarmOverviewListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DescribeConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ClusterMonitor struct {

	// 模块健康状态

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 总节点数

	NodeCount *int64 `json:"NodeCount,omitempty" name:"NodeCount"`
	// 存储空间

	StorageSpace *float64 `json:"StorageSpace,omitempty" name:"StorageSpace"`
	// 当前存储量

	CurrentStorage *float64 `json:"CurrentStorage,omitempty" name:"CurrentStorage"`
	// 文档数

	DocCount *int64 `json:"DocCount,omitempty" name:"DocCount"`
	// 主分片数

	MasterShardCount *int64 `json:"MasterShardCount,omitempty" name:"MasterShardCount"`
	// 索引数

	IndexCount *int64 `json:"IndexCount,omitempty" name:"IndexCount"`
	// 平均磁盘使用率

	AvgDiskUtilization []*CurvePoint `json:"AvgDiskUtilization,omitempty" name:"AvgDiskUtilization"`
	// 平均cpu使用率

	AvgCpuUtilization []*CurvePoint `json:"AvgCpuUtilization,omitempty" name:"AvgCpuUtilization"`
	// 平均jvm内存使用率

	AvgJvmUtilization []*CurvePoint `json:"AvgJvmUtilization,omitempty" name:"AvgJvmUtilization"`
	// 集群一分钟平均负载

	AvgLoad1m []*CurvePoint `json:"AvgLoad1m,omitempty" name:"AvgLoad1m"`
	// 平均写入延迟

	AvgWriteDelay []*CurvePoint `json:"AvgWriteDelay,omitempty" name:"AvgWriteDelay"`
	// 平均查询延迟

	AvgQueryDelay []*CurvePoint `json:"AvgQueryDelay,omitempty" name:"AvgQueryDelay"`
}

type DescribeApisWithPluginRequest struct {
	*tchttp.BaseRequest

	// PluginId

	PluginId *string `json:"PluginId,omitempty" name:"PluginId"`
	// API 分组ID，若传入则根据分组过滤API

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 绑定/未绑定: true / false

	Bound *string `json:"Bound,omitempty" name:"Bound"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页记录数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeApisWithPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApisWithPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTsfZonesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *TsfPageZone `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTsfZonesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTsfZonesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LicenseApplicationRecord struct {

	// 创建时间

	CreateTime *uint64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 授予对象

	Grantee *LicenseGrantee `json:"Grantee,omitempty" name:"Grantee"`
	// 所申请的产品信息列表

	Product []*LicenseProduct `json:"Product,omitempty" name:"Product"`
	// 联系电话

	Phone []*string `json:"Phone,omitempty" name:"Phone"`
	// 联系邮箱

	Email []*string `json:"Email,omitempty" name:"Email"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 授予许可时间

	IssueTime *uint64 `json:"IssueTime,omitempty" name:"IssueTime"`
	// 有效期信息

	Duration *LicenseDuration `json:"Duration,omitempty" name:"Duration"`
	// 使用场景

	UsageScenario *string `json:"UsageScenario,omitempty" name:"UsageScenario"`
	// 产品信息

	ProductInfo *string `json:"ProductInfo,omitempty" name:"ProductInfo"`
	// 申请原因

	ApplyReason *string `json:"ApplyReason,omitempty" name:"ApplyReason"`
	// 未作废0；已作废1

	Status *int64 `json:"Status,omitempty" name:"Status"`
}

type ConfigTemplateV2 struct {

	// 配置模板Id

	ConfigTemplateId *string `json:"ConfigTemplateId,omitempty" name:"ConfigTemplateId"`
	// 配置模板名称

	ConfigTemplateName *string `json:"ConfigTemplateName,omitempty" name:"ConfigTemplateName"`
	// 配置模板描述

	ConfigTemplateDesc *string `json:"ConfigTemplateDesc,omitempty" name:"ConfigTemplateDesc"`
	// 配置模板对应的微服务框架

	ConfigTemplateType *string `json:"ConfigTemplateType,omitempty" name:"ConfigTemplateType"`
	// 配置模板数据

	ConfigTemplateValue *string `json:"ConfigTemplateValue,omitempty" name:"ConfigTemplateValue"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type TsfPageBusinessLogV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 业务日志列表

	Content []*BusinessLogV2 `json:"Content,omitempty" name:"Content"`
	// 游标ID

	ScrollId *string `json:"ScrollId,omitempty" name:"ScrollId"`
	// 查询状态

	Status *string `json:"Status,omitempty" name:"Status"`
}

type VmSubTaskV2 struct {

	// 机器Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 内网IP

	LanIp *string `json:"LanIp,omitempty" name:"LanIp"`
	// 外网IP

	WanIp *string `json:"WanIp,omitempty" name:"WanIp"`
	// 机器名称

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 机器Agent状态

	AgentState *int64 `json:"AgentState,omitempty" name:"AgentState"`
	// 机器状态

	InstanceState *int64 `json:"InstanceState,omitempty" name:"InstanceState"`
	// 任务状态

	TaskStatus *int64 `json:"TaskStatus,omitempty" name:"TaskStatus"`
	// 任务记录

	TaskRecord *string `json:"TaskRecord,omitempty" name:"TaskRecord"`
}

type VpcConfig struct {

	// VpcId

	VpcId *string `json:"VpcId,omitempty" name:"VpcId"`
	// SubnetId 子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
}

type DescribeSidecarFilterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Sidecar过滤器

		Result *SidecarFilter `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSidecarFilterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSidecarFilterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSidecarMetricsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 统计开始时间

		StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
		// Downstream总请求数

		DownstreamRequestCount *int64 `json:"DownstreamRequestCount,omitempty" name:"DownstreamRequestCount"`
		// Downstream总失败数

		DownstreamFailureCount *int64 `json:"DownstreamFailureCount,omitempty" name:"DownstreamFailureCount"`
		// Upstream总请求数

		UpstreamRequestCount *int64 `json:"UpstreamRequestCount,omitempty" name:"UpstreamRequestCount"`
		// Upstream总失败数

		UpstreamFailureCount *int64 `json:"UpstreamFailureCount,omitempty" name:"UpstreamFailureCount"`
		// 当前消耗的内存

		Allocated *string `json:"Allocated,omitempty" name:"Allocated"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSidecarMetricsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSidecarMetricsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopContainerGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 停止操作是否成功。
		// true：停止成功
		// false：停止失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StopContainerGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopContainerGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroserviceGroupsRequest struct {
	*tchttp.BaseRequest

	// 查询词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 限制数目

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 是否包含服务对应的离线部署组

	WithOffline *bool `json:"WithOffline,omitempty" name:"WithOffline"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeMicroserviceGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 模块ID

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// 实时日志基准时间戳

	RealtimeTs *uint64 `json:"RealtimeTs,omitempty" name:"RealtimeTs"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 单页请求配置数量，取值范围[1, 200]，默认值为50

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 排序规则，默认值"time"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 请求偏移量，取值范围大于等于0，默认值为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 模块名称

	ModuleName *string `json:"ModuleName,omitempty" name:"ModuleName"`
	// 查询关键词类型

	SearchWordType *string `json:"SearchWordType,omitempty" name:"SearchWordType"`
}

func (r *SearchOssBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InitializeApmRequest struct {
	*tchttp.BaseRequest
}

func (r *InitializeApmRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *InitializeApmRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModuleParameterResult struct {

	// ParameterConfigType

	ParameterConfigType *string `json:"ParameterConfigType,omitempty" name:"ParameterConfigType"`
	// ParameterSubType

	ParameterSubType *string `json:"ParameterSubType,omitempty" name:"ParameterSubType"`
	// ParameterName

	ParameterName *string `json:"ParameterName,omitempty" name:"ParameterName"`
	// ParameterValue

	ParameterValue *string `json:"ParameterValue,omitempty" name:"ParameterValue"`
}

type UpdateMultiClusterDeliveryConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置名

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 采集路径

	CollectPath []*string `json:"CollectPath,omitempty" name:"CollectPath"`
	// kafka的topic

	Topic *string `json:"Topic,omitempty" name:"Topic"`
	// kafka的集群地址

	KafkaAddress *string `json:"KafkaAddress,omitempty" name:"KafkaAddress"`
	// 换行标记

	LineRule *string `json:"LineRule,omitempty" name:"LineRule"`
	// 是否需要认证

	EnableAuth *bool `json:"EnableAuth,omitempty" name:"EnableAuth"`
	// 用户名

	Username *string `json:"Username,omitempty" name:"Username"`
	// 密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// kafka投递信息

	KafkaInfos []*DeliveryKafkaInfo `json:"KafkaInfos,omitempty" name:"KafkaInfos"`
	// 是否应用单行规则

	EnableGlobalLineRule *bool `json:"EnableGlobalLineRule,omitempty" name:"EnableGlobalLineRule"`
	// 自定义分行规则

	CustomRule *string `json:"CustomRule,omitempty" name:"CustomRule"`
}

func (r *UpdateMultiClusterDeliveryConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateMultiClusterDeliveryConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteTaskRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DeleteTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API状态查询响应

		Result *ApiStatusResponse `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApiStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFileConfigReleaseLogsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置项发布历史分页

		Result *TsfPageFileConfigReleaseLog `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFileConfigReleaseLogsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigReleaseLogsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineRunsRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 查询限制，默认20，最大50

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 查询偏移

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 执行状态

	Status *string `json:"Status,omitempty" name:"Status"`
}

func (r *DescribeReleasePipelineRunsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineRunsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeConfigSummaryRequest struct {
	*tchttp.BaseRequest

	// 应用ID，不传入时查询全量

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 查询关键字，模糊查询：应用名称，配置项名称，不传入时查询全量

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数，默认为20

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 按时间排序：creation_time；按名称排序：config_name

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序传 0，降序传 1

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 无

	ConfigTagList []*string `json:"ConfigTagList,omitempty" name:"ConfigTagList"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
	// 无

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
}

func (r *DescribeConfigSummaryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigSummaryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRatelimitRequest struct {
	*tchttp.BaseRequest

	// 名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 限流所作用的目标微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// Rule列表，Rule是一个Object

	Rules []*RatelimitRuleV2 `json:"Rules,omitempty" name:"Rules"`
}

func (r *CreateRatelimitRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRatelimitRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyMachinesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyMachinesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateViewRequest struct {
	*tchttp.BaseRequest

	// 视图名称

	ViewName *string `json:"ViewName,omitempty" name:"ViewName"`
	// 命名空间信息

	NamespaceInfos []*NamespaceInfos `json:"NamespaceInfos,omitempty" name:"NamespaceInfos"`
}

func (r *CreateViewRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateViewRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateRatelimitRequest struct {
	*tchttp.BaseRequest

	// 名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 限流所作用的目标微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// Rule列表，Id必填，其他字段仅修改时填写

	Rules []*RatelimitRuleForUpdateV2 `json:"Rules,omitempty" name:"Rules"`
}

func (r *UpdateRatelimitRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateRatelimitRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateMachinesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateMachinesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteContainerGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID，分组唯一标识

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DeleteContainerGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteContainerGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstanceAdvancedSettings struct {

	// 数据盘挂载点, 默认不挂载数据盘. 已格式化的 ext3，ext4，xfs 文件系统的数据盘将直接挂载，其他文件系统或未格式化的数据盘将自动格式化为ext4 并挂载，请注意备份数据! 无数据盘或有多块数据盘的云主机此设置不生效。
	// 注意，注意，多盘场景请使用下方的DataDisks数据结构，设置对应的云盘类型、云盘大小、挂载路径、是否格式化等信息。
	// 注意：此字段可能返回 null，表示取不到有效值。

	MountTarget *string `json:"MountTarget,omitempty" name:"MountTarget"`
	// dockerd --graph 指定值, 默认为 /var/lib/docker
	// 注意：此字段可能返回 null，表示取不到有效值。

	DockerGraphPath *string `json:"DockerGraphPath,omitempty" name:"DockerGraphPath"`
}

type DescribeInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 机器列表信息

		Result *InstanceEnrichedInfoPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListTsfZoneResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*TsfZoneResult `json:"Content,omitempty" name:"Content"`
}

type DeleteLaneRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteLaneRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteLaneRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateContainerShellSessionResult struct {

	// session 的标识 id

	SessionId *string `json:"SessionId,omitempty" name:"SessionId"`
}

type DeletePublicConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：删除成功；false：删除失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeletePublicConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePublicConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeliveryConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 投递kafka配置

		Result *KafkaDeliveryConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeDeliveryConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeliveryConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyMonitorStatisticsPolicyRequest struct {
	*tchttp.BaseRequest

	// 监控统计策略id;

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// 关键词

	KeyWords *string `json:"KeyWords,omitempty" name:"KeyWords"`
	// 部署组id列表

	GroupIds []*string `json:"GroupIds,omitempty" name:"GroupIds"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
}

func (r *ModifyMonitorStatisticsPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyMonitorStatisticsPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableRatelimitResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功与否

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableRatelimitResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableRatelimitResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MicroServiceMetas struct {

	// 服务类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 元数据key

	Key *string `json:"Key,omitempty" name:"Key"`
	// 元数据value

	Value *string `json:"Value,omitempty" name:"Value"`
}

type ReRelateGroupToScalableRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 请求结果,true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReRelateGroupToScalableRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReRelateGroupToScalableRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchSpanResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// span信息

		Result *TsfPageTraceSpanInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchSpanResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchSpanResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventStatisticsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 事件统计结果

		Result *EventStatistics `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeEventStatisticsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployContainerGroupByPlainYamlResult struct {

	// 部署是否成功

	Success *bool `json:"Success,omitempty" name:"Success"`
}

type MasterApiResult struct {

	// Data

	Data *string `json:"Data,omitempty" name:"Data"`
	// ErrMsg

	ErrMsg *string `json:"ErrMsg,omitempty" name:"ErrMsg"`
}

type PagedDtsGroup struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 事务分组列表

	Content []*DtsGroup `json:"Content,omitempty" name:"Content"`
}

type DescribeInvocationStatisticsRatioResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 调用统计数据对比

		Result *InvocationStatisticsRatio `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInvocationStatisticsRatioResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationStatisticsRatioResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroservicesByGroupIdsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 微服务信息

		Result *TsfPageMicroservice `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroservicesByGroupIdsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroservicesByGroupIdsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayOAuthPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGatewayOAuthPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayOAuthPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRouteRuleRequest struct {
	*tchttp.BaseRequest

	// 路由规则id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
}

func (r *DescribeRouteRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRouteRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CircuitBreakerStrategy struct {

	// 熔断策略ID

	StrategyId *string `json:"StrategyId,omitempty" name:"StrategyId"`
	// 熔断策略所属熔断规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 最少请求数

	MinimumNumberOfCalls *int64 `json:"MinimumNumberOfCalls,omitempty" name:"MinimumNumberOfCalls"`
	// 滚动窗口统计时间

	SlidingWindowSize *int64 `json:"SlidingWindowSize,omitempty" name:"SlidingWindowSize"`
	// 熔断开启到半开间隔,单位s

	WaitDurationInOpenState *int64 `json:"WaitDurationInOpenState,omitempty" name:"WaitDurationInOpenState"`
	// 失败请求比例

	FailureRateThreshold *int64 `json:"FailureRateThreshold,omitempty" name:"FailureRateThreshold"`
	// 最大熔断实例的比例

	MaxEjectionPercent *int64 `json:"MaxEjectionPercent,omitempty" name:"MaxEjectionPercent"`
	// 慢请求阈值

	SlowCallDurationThreshold *int64 `json:"SlowCallDurationThreshold,omitempty" name:"SlowCallDurationThreshold"`
	// 慢请求比例

	SlowCallRateThreshold *int64 `json:"SlowCallRateThreshold,omitempty" name:"SlowCallRateThreshold"`
	// 熔断策略作用API

	ApiList []*CircuitBreakerApi `json:"ApiList,omitempty" name:"ApiList"`
}

type DescribeGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 虚拟机部署组详情

		Result *VmGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseProductNewsRequest struct {
	*tchttp.BaseRequest

	// 产品动态列表

	ReleaseList []*ProductNews `json:"ReleaseList,omitempty" name:"ReleaseList"`
	// 刷新上次发布时间(默认false)

	UpdateValidTime *bool `json:"UpdateValidTime,omitempty" name:"UpdateValidTime"`
	// ServiceTag值

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

func (r *ReleaseProductNewsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseProductNewsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDockerForUseRequest struct {
	*tchttp.BaseRequest

	// tcr或者不填

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
	// 创建个人仓库

	CreateImageRepository *bool `json:"CreateImageRepository,omitempty" name:"CreateImageRepository"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
}

func (r *DescribeDockerForUseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDockerForUseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopServerlessGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StopServerlessGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopServerlessGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageGatewayDeployGroup struct {

	// 记录总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*GatewayDeployGroup `json:"Content,omitempty" name:"Content"`
}

type DescribeRouteReleaseHistoryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路由规则启停记录

		Result *TsfPageRouteReleaseHistory `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRouteReleaseHistoryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRouteReleaseHistoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseProductHelpRequest struct {
	*tchttp.BaseRequest

	// 产品帮助列表

	ReleaseList []*ProductHelp `json:"ReleaseList,omitempty" name:"ReleaseList"`
	// 刷新上次发布时间(默认false)

	UpdateValidTime *bool `json:"UpdateValidTime,omitempty" name:"UpdateValidTime"`
	// ServiceTag值

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

func (r *ReleaseProductHelpRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseProductHelpRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MetricDataCurve struct {

	// 指标名称

	MetricName *string `json:"MetricName,omitempty" name:"MetricName"`
	// 指标计算方式

	MetricFunction *string `json:"MetricFunction,omitempty" name:"MetricFunction"`
	// 指标数据点集合

	MetricDataPoints []*MetricDataPoint `json:"MetricDataPoints,omitempty" name:"MetricDataPoints"`
}

type CreateAlarmReceiverRequest struct {
	*tchttp.BaseRequest

	// PolicyId

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// Name

	Name *string `json:"Name,omitempty" name:"Name"`
	// CellPhoneNumber

	CellPhoneNumber *string `json:"CellPhoneNumber,omitempty" name:"CellPhoneNumber"`
	// Email

	Email *string `json:"Email,omitempty" name:"Email"`
}

func (r *CreateAlarmReceiverRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAlarmReceiverRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstanceSummary struct {

	// 正常节点数量

	NormalInstances *uint64 `json:"NormalInstances,omitempty" name:"NormalInstances"`
	// 异常节点数量

	AbnormalInstances *uint64 `json:"AbnormalInstances,omitempty" name:"AbnormalInstances"`
	// 节点监控信息集合

	Metrics *TsfPageInstanceMetrics `json:"Metrics,omitempty" name:"Metrics"`
}

type DeleteUnitRuleRequest struct {
	*tchttp.BaseRequest

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DeleteUnitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteUnitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerMicroServiceListRequest struct {
	*tchttp.BaseRequest

	// 微服务Id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeContainerMicroServiceListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerMicroServiceListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayTagPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DescribeGatewayTagPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayTagPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PagedPermCat struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 产品列表

	Content []*PermCat `json:"Content,omitempty" name:"Content"`
}

type TaskFlow struct {

	// 工作流Id

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流名称

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
	// 状态

	State *string `json:"State,omitempty" name:"State"`
	// 任务数量

	TaskCount *int64 `json:"TaskCount,omitempty" name:"TaskCount"`
	// 触发规则

	TriggerRule *TaskRule `json:"TriggerRule,omitempty" name:"TriggerRule"`
	// 工作流超时时间

	TimeOut *int64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 工作流历史 ID

	FlowLogId *string `json:"FlowLogId,omitempty" name:"FlowLogId"`
	// 工作流图 ID

	GraphId *string `json:"GraphId,omitempty" name:"GraphId"`
}

type UnitRuleReleaseHistoryDetail struct {

	// 主键ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 规则推送历史ID

	RuleReleaseHistoryId *string `json:"RuleReleaseHistoryId,omitempty" name:"RuleReleaseHistoryId"`
	// 超云流程工单ID

	DagId *int64 `json:"DagId,omitempty" name:"DagId"`
	// 目标TSF-ID

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// 推送时间

	ReleaseTime *string `json:"ReleaseTime,omitempty" name:"ReleaseTime"`
	// 推送状态

	ReleaseStatus *string `json:"ReleaseStatus,omitempty" name:"ReleaseStatus"`
	// 创建时间

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 修改时间

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 目标TSF名称

	TsfName *string `json:"TsfName,omitempty" name:"TsfName"`
}

type ListAppPkgResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 无

		Result *AppPkgList `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListAppPkgResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListAppPkgResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateUploadInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateUploadInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateUploadInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VportTypeResult struct {

	// VportId

	VportId *string `json:"VportId,omitempty" name:"VportId"`
	// ModuleId

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// VportType

	VportType *string `json:"VportType,omitempty" name:"VportType"`
	// DefaultVport

	DefaultVport *string `json:"DefaultVport,omitempty" name:"DefaultVport"`
	// Vport

	Vport *string `json:"Vport,omitempty" name:"Vport"`
}

type DescribeAuthorizationMicroservicesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 总条数

		TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
		// 当前页的微服务数据

		Content []*string `json:"Content,omitempty" name:"Content"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAuthorizationMicroservicesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationMicroservicesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetOssTraceServicesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务名集合

		Result *TsfPageTraceService `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetOssTraceServicesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetOssTraceServicesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListPkgResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 符合查询程序包信息列表

		Result *PkgList `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListPkgResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListPkgResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceBatchOperationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 资源批次执行的描述

		Result *ResourceBatchOperationDescription `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeResourceBatchOperationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceBatchOperationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowBatchPage struct {

	// 数据总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 翻页数据

	Content []*TaskFlowBatch `json:"Content,omitempty" name:"Content"`
}

type RepositoryInfo struct {

	// 仓库ID

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
	// 仓库名称

	RepositoryName *string `json:"RepositoryName,omitempty" name:"RepositoryName"`
	// 仓库类型（默认仓库：default，私有仓库：private）

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
	// 仓库描述

	RepositoryDesc *string `json:"RepositoryDesc,omitempty" name:"RepositoryDesc"`
	// 仓库是否正在被使用

	IsUsed *bool `json:"IsUsed,omitempty" name:"IsUsed"`
	// 仓库创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 仓库桶名称

	BucketName *string `json:"BucketName,omitempty" name:"BucketName"`
	// 仓库桶所在地域

	BucketRegion *string `json:"BucketRegion,omitempty" name:"BucketRegion"`
	// 仓库目录

	Directory *string `json:"Directory,omitempty" name:"Directory"`
}

type TsfPageTraceInterface struct {

	// 符合条件的总调用链接口数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 调用链接口列表

	Content []*string `json:"Content,omitempty" name:"Content"`
}

type TsfRegionResult struct {

	// tRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
	// tRegionName

	TRegionName *string `json:"TRegionName,omitempty" name:"TRegionName"`
	// tRemark

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
}

type DescribeUnitRulesRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 根据规则名或备注内容模糊查询

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 启用状态, disabled: 未发布， enabled: 发布

	Status *string `json:"Status,omitempty" name:"Status"`
	// 翻页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeUnitRulesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitRulesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListCloudMicroServiceFindPagedListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *CloudMonitorMicroserviceResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListCloudMicroServiceFindPagedListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListCloudMicroServiceFindPagedListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRepositoryRequest struct {
	*tchttp.BaseRequest

	// 仓库名称

	RepositoryName *string `json:"RepositoryName,omitempty" name:"RepositoryName"`
	// 仓库类型（默认仓库：default，私有仓库：private）

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
	// 仓库所在桶名称

	BucketName *string `json:"BucketName,omitempty" name:"BucketName"`
	// 仓库所在桶地域

	BucketRegion *string `json:"BucketRegion,omitempty" name:"BucketRegion"`
	// 目录

	Directory *string `json:"Directory,omitempty" name:"Directory"`
	// 仓库描述

	RepositoryDesc *string `json:"RepositoryDesc,omitempty" name:"RepositoryDesc"`
}

func (r *CreateRepositoryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRepositoryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableAuthorizationRequest struct {
	*tchttp.BaseRequest

	// 规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *EnableAuthorizationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableAuthorizationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSingleContainerGroupsResult struct {

	// 列表数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 列表内容

	Content []*DescribeSingleContainerGroups `json:"Content,omitempty" name:"Content"`
}

type TsfPageNamespaceServiceOverview struct {

	// 记录总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*NamespaceServiceOverview `json:"Content,omitempty" name:"Content"`
}

type TsfPageRecordResourceTypeNameV2 struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 资源类型列表

	Content []*RecordResourceTypeNameV2 `json:"Content,omitempty" name:"Content"`
}

type DescribeApplicationAttributeRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeApplicationAttributeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationAttributeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ConfigSummary struct {

	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项值

	ConfigVersionCount *int64 `json:"ConfigVersionCount,omitempty" name:"ConfigVersionCount"`
	// 配置项类型

	LastUpdateTime *string `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
}

type ManagerHttp struct {

	// url

	Url *string `json:"Url,omitempty" name:"Url"`
	// body

	Body *string `json:"Body,omitempty" name:"Body"`
	// method

	Method *string `json:"Method,omitempty" name:"Method"`
}

type DescribeGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 虚拟机部署组分页信息

		Result *TsfPageVmGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseApiGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功/失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleaseApiGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseApiGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AssociateBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AssociateBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AssociateBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeConfigReleaseLogsRequest struct {
	*tchttp.BaseRequest

	// 部署组ID，不传入时查询全量

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数，默认为20

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 命名空间ID，不传入时查询全量

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 集群ID，不传入时查询全量

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 应用ID，不传入时查询全量

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeConfigReleaseLogsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigReleaseLogsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinessLogConfigSchema struct {

	// 解析规则类型

	SchemaType *int64 `json:"SchemaType,omitempty" name:"SchemaType"`
	// 解析规则内容

	SchemaContent *string `json:"SchemaContent,omitempty" name:"SchemaContent"`
	// 解析规则时间格式

	SchemaDateFormat *string `json:"SchemaDateFormat,omitempty" name:"SchemaDateFormat"`
	// 解析规则对应的多行匹配规则

	SchemaMultilinePattern *string `json:"SchemaMultilinePattern,omitempty" name:"SchemaMultilinePattern"`
	// 解析规则创建时间

	SchemaCreateTime *string `json:"SchemaCreateTime,omitempty" name:"SchemaCreateTime"`
	// 用户填写的解析规则

	SchemaPatternLayout *string `json:"SchemaPatternLayout,omitempty" name:"SchemaPatternLayout"`
}

type DescribeConfigReleasesRequest struct {
	*tchttp.BaseRequest

	// 配置项名称，不传入时查询全量

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 部署组ID，不传入时查询全量

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 命名空间ID，不传入时查询全量

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 集群ID，不传入时查询全量

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 配置ID，不传入时查询全量

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 应用ID，不传入时查询全量

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeConfigReleasesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigReleasesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PackageConfig struct {

	// 程序包存储空间大小，单位字节

	SpaceSize *uint64 `json:"SpaceSize,omitempty" name:"SpaceSize"`
}

type TcrRepoInfo struct {

	// 地域（填数字）

	Region *string `json:"Region,omitempty" name:"Region"`
	// 实例id

	RegistryId *string `json:"RegistryId,omitempty" name:"RegistryId"`
	// 实例名

	RegistryName *string `json:"RegistryName,omitempty" name:"RegistryName"`
	// 命名空间

	Namespace *string `json:"Namespace,omitempty" name:"Namespace"`
	// 仓库名

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
}

type MethodProfile struct {

	// 方法执行分析数据

	MethodProfileData *string `json:"MethodProfileData,omitempty" name:"MethodProfileData"`
	// 调用成功success/调用失败error

	Status *string `json:"Status,omitempty" name:"Status"`
	// 调用成功为""/调用失败为对应失败信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// 调用成功为0/调用失败为对应的错误码

	StatusCode *int64 `json:"StatusCode,omitempty" name:"StatusCode"`
}

type FunctionStatusResult struct {

	// 是否开启

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
	// 是否使用过

	Used *bool `json:"Used,omitempty" name:"Used"`
	// 关闭时需要禁用的Action列表

	ForbiddenActions []*string `json:"ForbiddenActions,omitempty" name:"ForbiddenActions"`
	// 功能名称

	FunctionName *string `json:"FunctionName,omitempty" name:"FunctionName"`
}

type ModifyGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新部署组详情是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstallLicenseRequest struct {
	*tchttp.BaseRequest

	// 证书正文

	LicenseContent *string `json:"LicenseContent,omitempty" name:"LicenseContent"`
}

func (r *InstallLicenseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *InstallLicenseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TestKuberneteNativeConnectionRequest struct {
	*tchttp.BaseRequest

	// api地址

	KuberneteApiServer *string `json:"KuberneteApiServer,omitempty" name:"KuberneteApiServer"`
	// K : kubeconfig, S : service account

	KuberneteNativeType *string `json:"KuberneteNativeType,omitempty" name:"KuberneteNativeType"`
	// native secret

	KuberneteNativeSecret *string `json:"KuberneteNativeSecret,omitempty" name:"KuberneteNativeSecret"`
}

func (r *TestKuberneteNativeConnectionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *TestKuberneteNativeConnectionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeServiceStatisticsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 统计数据列表

		Result []*ServiceStatisticsV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeServiceStatisticsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServiceStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskGroupsRequest struct {
	*tchttp.BaseRequest

	// 搜索关键字, 支持任务ID， 任务名称，分组ID

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页查询偏移量，默认0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 单页查询数量， 默认20

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeTaskGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRoutesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeRoutesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRoutesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MonitorStatisticsPolicy struct {

	// 监控统计策略id

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// 关键词

	KeyWords *string `json:"KeyWords,omitempty" name:"KeyWords"`
	// 部署组列表信息

	GroupList []*MonitorStatisticsPolicyGroup `json:"GroupList,omitempty" name:"GroupList"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
}

type CreateSidecarFilterRequest struct {
	*tchttp.BaseRequest

	// 过滤器主键

	FilterId *string `json:"FilterId,omitempty" name:"FilterId"`
	// 过滤器名称

	FilterName *string `json:"FilterName,omitempty" name:"FilterName"`
	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 作用位置

	WorkPosition *string `json:"WorkPosition,omitempty" name:"WorkPosition"`
	// 被调服务名，多个服务名时使用逗号分隔

	TargetServiceNames *string `json:"TargetServiceNames,omitempty" name:"TargetServiceNames"`
	// lua脚本值

	LuaValue *string `json:"LuaValue,omitempty" name:"LuaValue"`
}

func (r *CreateSidecarFilterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateSidecarFilterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ValidateNamespaceClusterVPCResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：一致；false：不一致

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ValidateNamespaceClusterVPCResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ValidateNamespaceClusterVPCResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageSimpleApplicationV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 简单应用列表

	Content []*SimpleApplication `json:"Content,omitempty" name:"Content"`
}

type DescribeApiGroupsRequest struct {
	*tchttp.BaseRequest

	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数，默认为20

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 分组类型。 ms： 微服务分组； external:外部Api分组

	GroupType *string `json:"GroupType,omitempty" name:"GroupType"`
	// 鉴权类型。 secret： 密钥鉴权； none:无鉴权

	AuthType *string `json:"AuthType,omitempty" name:"AuthType"`
	// 发布状态, drafted: 未发布。 released: 发布

	Status *string `json:"Status,omitempty" name:"Status"`
	// 排序字段："created_time"或"group_context"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型：0(ASC)或1(DESC)

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
}

func (r *DescribeApiGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableSidecarFilterRequest struct {
	*tchttp.BaseRequest

	// 过滤器Id

	FilterId *string `json:"FilterId,omitempty" name:"FilterId"`
}

func (r *DisableSidecarFilterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableSidecarFilterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopReqAmountServicesRequest struct {
	*tchttp.BaseRequest

	// 列表条目数量，取值范围[1, 50]，默认值10

	Count *uint64 `json:"Count,omitempty" name:"Count"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 统计开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 统计结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TSF命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *GetTopReqAmountServicesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopReqAmountServicesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageNamespace struct {

	// 命名空间总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 命名空间列表

	Content []*Namespace `json:"Content,omitempty" name:"Content"`
}

type ExpandInstanceScriptsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 接入脚本

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ExpandInstanceScriptsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExpandInstanceScriptsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ZipkinSpanInfoV2 struct {

	// Span ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 调用链ID

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 父Span ID

	ParentId *string `json:"ParentId,omitempty" name:"ParentId"`
	// Span名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// Span时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// Span耗时

	Duration *uint64 `json:"Duration,omitempty" name:"Duration"`
	// Span结果

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// Span服务名（前端展示）

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// Span注解列表

	AnnotationList []*ZipkinAnnotationV2 `json:"AnnotationList,omitempty" name:"AnnotationList"`
	// Span二进制注解列表

	BinaryAnnotationList []*ZipkinBinaryAnnotationV2 `json:"BinaryAnnotationList,omitempty" name:"BinaryAnnotationList"`
	// Span元数据列表

	MetadataList []*ZipkinMetadataV2 `json:"MetadataList,omitempty" name:"MetadataList"`
	// Span接口名（前端展示）

	InterfaceName *string `json:"InterfaceName,omitempty" name:"InterfaceName"`
	// Span本地端点

	LocalEndpoint *ZipkinEndpointV2 `json:"LocalEndpoint,omitempty" name:"LocalEndpoint"`
	// Span远程端点

	RemoteEndpoint *ZipkinEndpointV2 `json:"RemoteEndpoint,omitempty" name:"RemoteEndpoint"`
	// Span标签列表

	LabelList []*SpanLabel `json:"LabelList,omitempty" name:"LabelList"`
	// 跨集群状态

	IsMultiTsf *bool `json:"IsMultiTsf,omitempty" name:"IsMultiTsf"`
	// 单元化状态

	UnitType *string `json:"UnitType,omitempty" name:"UnitType"`
}

type RegionRegisterManager struct {

	// TsfId

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// TsfName

	TsfName *string `json:"TsfName,omitempty" name:"TsfName"`
	// RegionId

	RegionId *string `json:"RegionId,omitempty" name:"RegionId"`
	// CloudId

	CloudId *string `json:"CloudId,omitempty" name:"CloudId"`
	// CloudName

	CloudName *string `json:"CloudName,omitempty" name:"CloudName"`
}

type DescribeImageRepositoryRequest struct {
	*tchttp.BaseRequest

	// 仓库名，搜索关键字,不带命名空间的

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~100

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 企业: tcr ；个人: personal或者不填

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// TcrRepoInfo值

	TcrRepoInfo *TcrRepoInfo `json:"TcrRepoInfo,omitempty" name:"TcrRepoInfo"`
}

func (r *DescribeImageRepositoryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImageRepositoryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ThreadGroupData struct {

	// 线程组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 线程个数

	Count *int64 `json:"Count,omitempty" name:"Count"`
}

type ShirkGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *ShirkGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShirkGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Ports struct {

	// 服务端口

	TargetPort *uint64 `json:"TargetPort,omitempty" name:"TargetPort"`
	// 端口协议

	Protocol *string `json:"Protocol,omitempty" name:"Protocol"`
}

type LaneInfos struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 泳道信息列表

	Content []*LaneInfo `json:"Content,omitempty" name:"Content"`
}

type RecordActionTypeNameV2 struct {

	// 操作记录操作类型

	ActionType *string `json:"ActionType,omitempty" name:"ActionType"`
	// 操作记录操作类型名称

	ActionTypeName *string `json:"ActionTypeName,omitempty" name:"ActionTypeName"`
}

type ServiceStatisticsV2 struct {

	// 服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 总请求量

	ReqTotalQty *uint64 `json:"ReqTotalQty,omitempty" name:"ReqTotalQty"`
	// 请求成功率

	ReqSuccessRate *float64 `json:"ReqSuccessRate,omitempty" name:"ReqSuccessRate"`
	// 请求平均耗时

	ReqAvgDuration *float64 `json:"ReqAvgDuration,omitempty" name:"ReqAvgDuration"`
}

type SearchSurroundBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 日志列表

		Result *TsfPageBusinessLogV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchSurroundBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchSurroundBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type IndicesPageInfo struct {

	// 文档总量

	DocsCount *int64 `json:"DocsCount,omitempty" name:"DocsCount"`
	// 是否有模版

	HasTemplate *bool `json:"HasTemplate,omitempty" name:"HasTemplate"`
	// 健康状态

	Health *string `json:"Health,omitempty" name:"Health"`
	// 索引名称

	IndexName *string `json:"IndexName,omitempty" name:"IndexName"`
	// 索引大小

	PriStoreSize *string `json:"PriStoreSize,omitempty" name:"PriStoreSize"`
	// 查询时间

	QueryTime *int64 `json:"QueryTime,omitempty" name:"QueryTime"`
	// 副本数

	ReplicaCount *int64 `json:"ReplicaCount,omitempty" name:"ReplicaCount"`
	// 分片数

	ShardCount *int64 `json:"ShardCount,omitempty" name:"ShardCount"`
	// 状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 存储大小

	StoreSize *string `json:"StoreSize,omitempty" name:"StoreSize"`
	// 建议分片数

	SuggestShardCount *int64 `json:"SuggestShardCount,omitempty" name:"SuggestShardCount"`
	// 写入失败率

	WriteFailedRate *float64 `json:"WriteFailedRate,omitempty" name:"WriteFailedRate"`
	// 写入耗时

	WriteTime *float64 `json:"WriteTime,omitempty" name:"WriteTime"`
}

type DeleteScalableRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 请求结果,true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteScalableRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteScalableRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskExecuteHistoryRecordsRequest struct {
	*tchttp.BaseRequest

	// 执行 ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
}

func (r *DescribeTaskExecuteHistoryRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteHistoryRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartContainerGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *StartContainerGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartContainerGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerGroupV2 struct {

	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用名称

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用类型

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 分组创建时间

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 分组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type GatewayPluginInstance struct {

	// 插件实例ID

	PluginInstanceId *string `json:"PluginInstanceId,omitempty" name:"PluginInstanceId"`
	// 插件ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 插件ID

	PluginId *string `json:"PluginId,omitempty" name:"PluginId"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件创建时间 如:2019-06-20 15:51:28

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 插件更新时间 如:2019-06-20 15:51:28

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
}

type SecretKeyInfo struct {

	// secret 名称

	SecretName *string `json:"SecretName,omitempty" name:"SecretName"`
	// secret Id

	SecretId *string `json:"SecretId,omitempty" name:"SecretId"`
	// secret key

	SecretKey *string `json:"SecretKey,omitempty" name:"SecretKey"`
	// 创建时间，格式 yyyy-MM-dd HH:mm:ss

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// enabled: 启用状态。disabled: 禁用状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 密钥ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// secret Id

	GwSecretId *string `json:"GwSecretId,omitempty" name:"GwSecretId"`
	// 过期时间，格式 yyyy-MM-dd HH:mm:ss

	ExpiredTime *string `json:"ExpiredTime,omitempty" name:"ExpiredTime"`
	// 更新时间，格式 yyyy-MM-dd HH:mm:ss

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// API分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

type DescribeApplicationsAttributeRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeApplicationsAttributeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationsAttributeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApplicatoinServerLogRequest struct {
	*tchttp.BaseRequest

	// 日志搜索的开始时间，格式："YYYY-MM-DD"

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 日志搜索的结束时间，格式："YYYY-MM-DD"

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 应用服务器的id

	ApplicationServerID *string `json:"ApplicationServerID,omitempty" name:"ApplicationServerID"`
	// 日志类型, "tsf-agent", "pilot-agent", "mesh-dns", "envoy"

	LogType *string `json:"LogType,omitempty" name:"LogType"`
	// 用来过滤日志内容的关键词

	Keyword *string `json:"Keyword,omitempty" name:"Keyword"`
	// 查询起始偏移

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 返回数量限制

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeApplicatoinServerLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicatoinServerLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务记录列表

		Result *TaskRecordPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeliveryKafkaInfo struct {

	// 投递kafka的topic

	Topic *string `json:"Topic,omitempty" name:"Topic"`
	// 采集日志的path

	Path []*string `json:"Path,omitempty" name:"Path"`
	// default，默认换行符分行
	// time，按时间分行
	// custom, 选了custom那么CustomRule就要填入具体的自定义值

	LineRule *string `json:"LineRule,omitempty" name:"LineRule"`
	// 自定义的分行值

	CustomRule *string `json:"CustomRule,omitempty" name:"CustomRule"`
}

type ListAppRequest struct {
	*tchttp.BaseRequest

	// 无

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 无

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ListAppRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListAppRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StartGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartInstanceRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 机器实例ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
}

func (r *StartInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OverviewMsResultV2 struct {

	// 概览页微服务数目

	RunMicroserviceCount *int64 `json:"RunMicroserviceCount,omitempty" name:"RunMicroserviceCount"`
}

type DeleteFilebeatConfigRequest struct {
	*tchttp.BaseRequest

	// 配置 id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DeleteFilebeatConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteFilebeatConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteScalableRuleRequest struct {
	*tchttp.BaseRequest

	// 规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DeleteScalableRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteScalableRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiDetailInfo struct {

	// API ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// API 请求路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// Api 映射路径

	PathMapping *string `json:"PathMapping,omitempty" name:"PathMapping"`
	// 请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 所属分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 是否禁用

	UsableStatus *string `json:"UsableStatus,omitempty" name:"UsableStatus"`
	// 发布状态

	ReleaseStatus *string `json:"ReleaseStatus,omitempty" name:"ReleaseStatus"`
	// 开启限流

	RateLimitStatus *string `json:"RateLimitStatus,omitempty" name:"RateLimitStatus"`
	// 是否开启mock

	MockStatus *string `json:"MockStatus,omitempty" name:"MockStatus"`
	// 创建时间

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 更新时间

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 发布时间

	ReleasedTime *string `json:"ReleasedTime,omitempty" name:"ReleasedTime"`
	// 所属分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// API 超时，单位毫秒

	Timeout *int64 `json:"Timeout,omitempty" name:"Timeout"`
	// Api所在服务host

	Host *string `json:"Host,omitempty" name:"Host"`
	// API类型。 ms ： 微服务API； external :外部服务Api

	ApiType *string `json:"ApiType,omitempty" name:"ApiType"`
	// Api描述信息

	Description *string `json:"Description,omitempty" name:"Description"`
	// API路径匹配类型。normal：普通API；wildcard：通配API。

	ApiMatchType *string `json:"ApiMatchType,omitempty" name:"ApiMatchType"`
	// RPC 额外信息

	RpcExt *string `json:"RpcExt,omitempty" name:"RpcExt"`
	// 部署组id

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// md5

	Md5 *string `json:"Md5,omitempty" name:"Md5"`
	// RPC 类型

	RpcType *string `json:"RpcType,omitempty" name:"RpcType"`
}

type DescribeResourceBatchOperationRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DescribeResourceBatchOperationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceBatchOperationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableCircuitBreakerRuleRequest struct {
	*tchttp.BaseRequest

	// 熔断规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *EnableCircuitBreakerRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableCircuitBreakerRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListPkgRequest struct {
	*tchttp.BaseRequest

	// 应用ID（只传入应用ID，返回该应用下所有软件包信息）

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 查询关键字（支持根据包ID，包名，包版本号搜索）

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序关键字（默认为"UploadTime"：上传时间）

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序：0/降序：1（默认降序）

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 查询起始偏移

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 返回数量限制

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ListPkgRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListPkgRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageDeleteTagRequest struct {
	*tchttp.BaseRequest

	// 仓库名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 版本号:如V1

	TagName *string `json:"TagName,omitempty" name:"TagName"`
}

func (r *ImageDeleteTagRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageDeleteTagRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteLaneRequest struct {
	*tchttp.BaseRequest

	// 泳道Idl

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
}

func (r *DeleteLaneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteLaneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableLaneGroupEntranceRequest struct {
	*tchttp.BaseRequest

	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 泳道部署组列表

	LaneGroupList []*LaneGroup `json:"LaneGroupList,omitempty" name:"LaneGroupList"`
}

func (r *EnableLaneGroupEntranceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableLaneGroupEntranceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetConfigpropsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetConfigpropsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetConfigpropsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInovcationIndicatorsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务调用监控指标

		Result *InvocationIndicator `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInovcationIndicatorsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInovcationIndicatorsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateTsfZoneRequest struct {
	*tchttp.BaseRequest

	// tZoneId

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
	// tZoneName

	TZoneName *string `json:"TZoneName,omitempty" name:"TZoneName"`
	// tRemark

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
	// tRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
}

func (r *CreateTsfZoneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateTsfZoneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FileConfigRelease struct {

	// 配置项发布ID

	ConfigReleaseId *string `json:"ConfigReleaseId,omitempty" name:"ConfigReleaseId"`
	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
	// 发布时间

	ReleaseTime *string `json:"ReleaseTime,omitempty" name:"ReleaseTime"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// ApplicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

type DeleteReleasesRequest struct {
	*tchttp.BaseRequest

	// 发布单ID列表

	ReleaseIdList []*string `json:"ReleaseIdList,omitempty" name:"ReleaseIdList"`
}

func (r *DeleteReleasesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteReleasesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateLogCapacityRequest struct {
	*tchttp.BaseRequest

	// 计费租户ID

	BillingAppId *string `json:"BillingAppId,omitempty" name:"BillingAppId"`
	// 计费账号ID

	BillingUin *string `json:"BillingUin,omitempty" name:"BillingUin"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 日志使用量

	LogCapacity *int64 `json:"LogCapacity,omitempty" name:"LogCapacity"`
}

func (r *UpdateLogCapacityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateLogCapacityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageApplication struct {

	// 应用总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 应用信息列表

	Content []*ApplicationForPage `json:"Content,omitempty" name:"Content"`
}

type DescribeApplicationsAttributeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 应用列表其它字段返回参数

		Result *ApplicationAttribute `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicationsAttributeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationsAttributeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableUnitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableUnitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableUnitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteSidecarFilterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true  false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteSidecarFilterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteSidecarFilterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteUnitNamespacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteUnitNamespacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteUnitNamespacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInstanceMonitorDetailsRequest struct {
	*tchttp.BaseRequest

	// 节点Id列表

	InstanceIds []*string `json:"InstanceIds,omitempty" name:"InstanceIds"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 查询指标信息

	Metrics []*Metric `json:"Metrics,omitempty" name:"Metrics"`
	// 网关部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 节点详情列表

	Instances []*Instance `json:"Instances,omitempty" name:"Instances"`
	// 区分虚机、容器

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
}

func (r *DescribeInstanceMonitorDetailsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceMonitorDetailsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUsableUnitNamespacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 单元化命名空间对象列表

		Result *TsfPageUnitNamespace `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUsableUnitNamespacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUsableUnitNamespacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EventDataPointResult struct {

	// 时间戳

	Key *string `json:"Key,omitempty" name:"Key"`
	// 值

	Value *string `json:"Value,omitempty" name:"Value"`
}

type ReleaseFileConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 发布结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleaseFileConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseFileConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartBuildTaskRequest struct {
	*tchttp.BaseRequest

	// 构建任务id

	BuildTaskId *string `json:"BuildTaskId,omitempty" name:"BuildTaskId"`
	// 包id

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
}

func (r *StartBuildTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartBuildTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartContainerGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 启动操作是否成功。
		// true：启动成功
		// false：启动失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StartContainerGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartContainerGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AuthMicroservice struct {

	// 服务 ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 服务名

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 服务是否存在

	IsNotExist *bool `json:"IsNotExist,omitempty" name:"IsNotExist"`
	// 帐号 appid

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 账号 uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 子账号 uin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type CreatePolicyDocumentRequest struct {
	*tchttp.BaseRequest

	// 策略项列表

	PolicyItemList []*PolicyItem `json:"PolicyItemList,omitempty" name:"PolicyItemList"`
}

func (r *CreatePolicyDocumentRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreatePolicyDocumentRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayAllGroupApisResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关分组和API列表信息

		Result *GatewayVo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayAllGroupApisResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayAllGroupApisResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSimpleGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 简单部署组列表

		Result *TsfPageSimpleGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSimpleGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 部署组启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 部署应用描述信息

	DeployDesc *string `json:"DeployDesc,omitempty" name:"DeployDesc"`
	// 是否允许强制启动

	ForceStart *bool `json:"ForceStart,omitempty" name:"ForceStart"`
	// 是否开启健康检查

	EnableHealthCheck *bool `json:"EnableHealthCheck,omitempty" name:"EnableHealthCheck"`
	// 开启健康检查时，配置健康检查

	HealthCheckSettings *HealthCheckSettings `json:"HealthCheckSettings,omitempty" name:"HealthCheckSettings"`
	// 部署方式，0表示快速更新，1表示滚动更新

	UpdateType *uint64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 是否启用beta批次

	DeployBetaEnable *bool `json:"DeployBetaEnable,omitempty" name:"DeployBetaEnable"`
	// 滚动发布每个批次参与的实例比率

	DeployBatch []*float64 `json:"DeployBatch,omitempty" name:"DeployBatch"`
	// 滚动发布的执行方式

	DeployExeMode *string `json:"DeployExeMode,omitempty" name:"DeployExeMode"`
	// 滚动发布每个批次的时间间隔

	DeployWaitTime *uint64 `json:"DeployWaitTime,omitempty" name:"DeployWaitTime"`
	// 启动脚本 base64编码

	StartScript *string `json:"StartScript,omitempty" name:"StartScript"`
	// 停止脚本 base64编码

	StopScript *string `json:"StopScript,omitempty" name:"StopScript"`
	// 是否进行增量部署，默认为false，全量更新

	IncrementalDeployment *bool `json:"IncrementalDeployment,omitempty" name:"IncrementalDeployment"`
	// JDK名称: konaJDK或openJDK

	JdkName *string `json:"JdkName,omitempty" name:"JdkName"`
	// JDK版本: 8或11 (openJDK只支持8)

	JdkVersion *string `json:"JdkVersion,omitempty" name:"JdkVersion"`
	// 部署agent的类型、版本

	AgentProfileList []*AgentProfile `json:"AgentProfileList,omitempty" name:"AgentProfileList"`
	// 预热参数配置

	WarmupSetting *WarmupSetting `json:"WarmupSetting,omitempty" name:"WarmupSetting"`
	// Envoy网关服务配置

	GatewayConfig *GatewayConfig `json:"GatewayConfig,omitempty" name:"GatewayConfig"`
}

func (r *DeployGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUsableApisRequest struct {
	*tchttp.BaseRequest

	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 分组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页记录数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeUsableApisRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUsableApisRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableSidecarFilterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableSidecarFilterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableSidecarFilterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroserviceTotalInstanceCountRequest struct {
	*tchttp.BaseRequest

	// 微服务ID（ms-xxx）

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeMicroserviceTotalInstanceCountRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceTotalInstanceCountRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyProgramRequest struct {
	*tchttp.BaseRequest

	// 数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// 数据集名称，不传入时不更新

	ProgramName *string `json:"ProgramName,omitempty" name:"ProgramName"`
	// 数据集描述，不传入时不更新

	ProgramDesc *string `json:"ProgramDesc,omitempty" name:"ProgramDesc"`
	// 数据项列表，传入null不更新，传入空数组全量删除

	ProgramItemList []*ProgramItem `json:"ProgramItemList,omitempty" name:"ProgramItemList"`
	// ProgramItemList是否是空数组

	EmptyProgramItemList *bool `json:"EmptyProgramItemList,omitempty" name:"EmptyProgramItemList"`
}

func (r *ModifyProgramRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyProgramRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *StopGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskExecuteRecordsRequest struct {
	*tchttp.BaseRequest

	// 任务批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 翻页查询便宜量，默认 0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询单页数量, 默认 20

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 搜索关键字，执行ID，实例ID

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 批次历史ID

	BatchLogId *string `json:"BatchLogId,omitempty" name:"BatchLogId"`
	// 状态

	State *string `json:"State,omitempty" name:"State"`
	// 触发类型; N:正常触发;M: 手动触发; MR: 手动重试;FR:失败重试

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 分片索引参数

	ShardKey *string `json:"ShardKey,omitempty" name:"ShardKey"`
	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 任务执行ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
}

func (r *DescribeTaskExecuteRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetCkafkaToContainerClusterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SetCkafkaToContainerClusterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetCkafkaToContainerClusterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageBillingLicense struct {

	// 记录总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*BillingLicense `json:"Content,omitempty" name:"Content"`
}

type DescribeCircuitBreakerRuleRequest struct {
	*tchttp.BaseRequest

	// 熔断规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DescribeCircuitBreakerRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCircuitBreakerRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateFileConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 配置项版本描述

	ConfigVersionDesc *string `json:"ConfigVersionDesc,omitempty" name:"ConfigVersionDesc"`
	// 配置项文件名

	ConfigFileName *string `json:"ConfigFileName,omitempty" name:"ConfigFileName"`
	// 配置项文件内容（原始内容编码需要 utf-8 格式，如果 ConfigFileCode 为 gbk，后台会进行转换）

	ConfigFileValue *string `json:"ConfigFileValue,omitempty" name:"ConfigFileValue"`
	// 配置项文件编码，utf-8 或 gbk。注：如果选择 gbk，需要新版本 tsf-consul-template （公有云虚拟机需要使用 1.32 tsf-agent，容器需要从文档中获取最新的 tsf-consul-template-docker.tar.gz）的支持

	ConfigFileCode *string `json:"ConfigFileCode,omitempty" name:"ConfigFileCode"`
	// 配置项关联应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 发布路径

	ConfigFilePath *string `json:"ConfigFilePath,omitempty" name:"ConfigFilePath"`
	// 后置命令

	ConfigPostCmd *string `json:"ConfigPostCmd,omitempty" name:"ConfigPostCmd"`
	// Base64编码的配置项

	EncodeWithBase64 *bool `json:"EncodeWithBase64,omitempty" name:"EncodeWithBase64"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateFileConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateFileConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCloudMonitorGroupsRequest struct {
	*tchttp.BaseRequest

	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 过滤GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeCloudMonitorGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCloudMonitorGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayWeChatMiniProgramLoginPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DescribeGatewayWeChatMiniProgramLoginPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayWeChatMiniProgramLoginPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RetryTransactionRequest struct {
	*tchttp.BaseRequest

	// 重试的事务ID列表

	TransactionId []*string `json:"TransactionId,omitempty" name:"TransactionId"`
}

func (r *RetryTransactionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RetryTransactionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateApiRateLimitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateApiRateLimitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateApiRateLimitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlameGraphResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 火焰图数据以及相关信息

		Result *JavaFlameGraph `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFlameGraphResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlameGraphResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyAuthorizationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：更新成功；false：更新失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyAuthorizationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyAuthorizationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupLaneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 泳道列表

		Result []*LaneInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupLaneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupLaneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeProductNewsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 产品动态列表

		Result *PagedProductNews `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeProductNewsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeProductNewsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerGroupAttributeRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeContainerGroupAttributeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupAttributeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListTsfModulesDetailRequest struct {
	*tchttp.BaseRequest

	// ModuleType值

	ModuleType *string `json:"ModuleType,omitempty" name:"ModuleType"`
	// Status值

	Status *string `json:"Status,omitempty" name:"Status"`
	// Limit值

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// Offset值

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 无

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
}

func (r *ListTsfModulesDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListTsfModulesDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type Controller struct {

	// ControllerName

	ControllerName *string `json:"ControllerName,omitempty" name:"ControllerName"`
}

type UnbindPluginRequest struct {
	*tchttp.BaseRequest

	// 分组/API解绑插件列表

	PluginInstanceList []*GatewayPluginBoundParam `json:"PluginInstanceList,omitempty" name:"PluginInstanceList"`
}

func (r *UnbindPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UnbindPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateConfigTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：创建成功；false：创建失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateConfigTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateConfigTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 停用服务路由操作是否成功。
		// true：停用操作成功。
		// false：停用操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API分组信息

		Result *ApiGroupInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApiGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupsWithPluginRequest struct {
	*tchttp.BaseRequest

	// 插件ID

	PluginId *string `json:"PluginId,omitempty" name:"PluginId"`
	// 绑定/未绑定: true / false

	Bound *bool `json:"Bound,omitempty" name:"Bound"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页记录数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
}

func (r *DescribeGroupsWithPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupsWithPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageUserIsExistsResult struct {

	// 用户是否存在

	Data *ImageUserIsExists `json:"Data,omitempty" name:"Data"`
}

type DescribeJvmLogsRequest struct {
	*tchttp.BaseRequest

	// 查询的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 查询的实例所属的应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 查询数据起始时间格式(yyyy-MM-dd HH:mm:ss) ,scrollId为空时必传

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询数据结束时间格式(yyyy-MM-dd HH:mm:ss) ,scrollId为空时必传

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 排序类型 默认DESC,可选ASC

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 排序字段 默认根据时间排序

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 查询数量 默认50行,不可大于500行

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 游标ID,初次查询不需要传

	ScrollId *string `json:"ScrollId,omitempty" name:"ScrollId"`
}

func (r *DescribeJvmLogsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeJvmLogsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateProductHelpRequest struct {
	*tchttp.BaseRequest

	// 内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 链接

	Link *string `json:"Link,omitempty" name:"Link"`
	// 排序

	Order *int64 `json:"Order,omitempty" name:"Order"`
	// 样式Flag

	StyleFlag *string `json:"StyleFlag,omitempty" name:"StyleFlag"`
	// 是否有效

	Valid *int64 `json:"Valid,omitempty" name:"Valid"`
	// 标题

	Title *string `json:"Title,omitempty" name:"Title"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

func (r *CreateProductHelpRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateProductHelpRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageGatewayPlugin struct {

	// 记录总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*GatewayPlugin `json:"Content,omitempty" name:"Content"`
}

type DescribeGatewayInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关实体分页列表

		Result *TsfPageGatewayInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type WarmupSetting struct {

	// 是否开启预热

	Enabled *bool `json:"Enabled,omitempty" name:"Enabled"`
	// 预热时间

	WarmupTime *uint64 `json:"WarmupTime,omitempty" name:"WarmupTime"`
	// 预热曲率，取值 1~5

	Curvature *uint64 `json:"Curvature,omitempty" name:"Curvature"`
	// 是否开启预热保护，在开启保护的情况下，超过 50% 的节点处于预热中，则会中止预热

	EnabledProtection *bool `json:"EnabledProtection,omitempty" name:"EnabledProtection"`
}

type BillingOperationPurchaseRequest struct {
	*tchttp.BaseRequest

	// 计费租户ID

	BillingAppId *string `json:"BillingAppId,omitempty" name:"BillingAppId"`
	// 计费账号ID

	BillingUin *string `json:"BillingUin,omitempty" name:"BillingUin"`
	// 规格

	Spec *string `json:"Spec,omitempty" name:"Spec"`
	// 节点数

	NodeSize *int64 `json:"NodeSize,omitempty" name:"NodeSize"`
	// 时间间隔

	TimeSpan *int64 `json:"TimeSpan,omitempty" name:"TimeSpan"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

func (r *BillingOperationPurchaseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationPurchaseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TxMainTransaction struct {

	// 事务Id

	TransactionId *string `json:"TransactionId,omitempty" name:"TransactionId"`
	// 服务器Ip

	ServerIp *string `json:"ServerIp,omitempty" name:"ServerIp"`
	// 服务名称

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 方法名

	MethodName *string `json:"MethodName,omitempty" name:"MethodName"`
	// 子事务数量

	SubCount *int64 `json:"SubCount,omitempty" name:"SubCount"`
	// 创建时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 更新时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 事务状态

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 超时时间

	TimeoutMs *int64 `json:"TimeoutMs,omitempty" name:"TimeoutMs"`
	// 重试次数

	RetryTimes *int64 `json:"RetryTimes,omitempty" name:"RetryTimes"`
	// 是否开启自动重试

	AutoRetry *bool `json:"AutoRetry,omitempty" name:"AutoRetry"`
}

type GroupPod struct {

	// 实例名称(对应到kubernetes的pod名称)

	PodName *string `json:"PodName,omitempty" name:"PodName"`
	// 实例ID(对应到kubernetes的pod id)

	PodId *string `json:"PodId,omitempty" name:"PodId"`
	// 实例状态，请参考后面的实例以及容器的状态定义。启动中（pod 未 ready）：Starting；运行中：Running；异常：Abnormal；停止：Stopped；

	Status *string `json:"Status,omitempty" name:"Status"`
	// 实例处于当前状态的原因，例如容器下载镜像失败

	Reason *string `json:"Reason,omitempty" name:"Reason"`
	// 主机IP

	NodeIp *string `json:"NodeIp,omitempty" name:"NodeIp"`
	// 实例IP

	Ip *string `json:"Ip,omitempty" name:"Ip"`
	// 实例中容器的重启次数

	RestartCount *int64 `json:"RestartCount,omitempty" name:"RestartCount"`
	// 实例中已就绪容器的个数

	ReadyCount *int64 `json:"ReadyCount,omitempty" name:"ReadyCount"`
	// 运行时长

	Runtime *string `json:"Runtime,omitempty" name:"Runtime"`
	// 实例启动时间

	CreatedAt *string `json:"CreatedAt,omitempty" name:"CreatedAt"`
	// 服务实例状态

	ServiceInstanceStatus *string `json:"ServiceInstanceStatus,omitempty" name:"ServiceInstanceStatus"`
	// 机器实例可使用状态

	InstanceAvailableStatus *string `json:"InstanceAvailableStatus,omitempty" name:"InstanceAvailableStatus"`
	// 机器实例状态

	InstanceStatus *string `json:"InstanceStatus,omitempty" name:"InstanceStatus"`
	// 节点实例id

	NodeInstanceId *string `json:"NodeInstanceId,omitempty" name:"NodeInstanceId"`
	// Containers

	Containers []*PodContainer `json:"Containers,omitempty" name:"Containers"`
}

type PagedService struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 产品列表

	Content []*Service `json:"Content,omitempty" name:"Content"`
}

type DumpResultV2 struct {

	// Name

	Name *string `json:"Name,omitempty" name:"Name"`
	// State

	State *string `json:"State,omitempty" name:"State"`
	// Detail

	Detail *string `json:"Detail,omitempty" name:"Detail"`
}

type DescribeGatewayInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关实例

		Result *GatewayInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayWithPluginRequest struct {
	*tchttp.BaseRequest

	// 插件id

	PluginId *string `json:"PluginId,omitempty" name:"PluginId"`
	// limit

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// offset

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// searchWord

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *DescribeGatewayWithPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayWithPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetOssTraceSpansRequest struct {
	*tchttp.BaseRequest

	// 调用链ID

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
}

func (r *GetOssTraceSpansRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetOssTraceSpansRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainGroupV2 struct {

	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
}

type TaskGroupPage struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 分组ID数组

	Content []*string `json:"Content,omitempty" name:"Content"`
}

type TaskRecordPage struct {

	// 总数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 任务记录列表

	Content []*TaskRecord `json:"Content,omitempty" name:"Content"`
}

type DescribeSimpleNamespacesRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID列表，不传入时查询全量

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
	// 集群ID，不传入时查询全量

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 命名空间ID，不传入时查询全量

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 查询资源类型列表

	NamespaceResourceTypeList []*string `json:"NamespaceResourceTypeList,omitempty" name:"NamespaceResourceTypeList"`
	// 通过id和name进行过滤

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 查询的命名空间类型列表

	NamespaceTypeList []*string `json:"NamespaceTypeList,omitempty" name:"NamespaceTypeList"`
	// 通过命名空间名精确过滤

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 通过是否是默认命名空间过滤，不传表示拉取全部命名空间。0：默认，命名空间。1：非默认命名空间

	IsDefault *string `json:"IsDefault,omitempty" name:"IsDefault"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
}

func (r *DescribeSimpleNamespacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleNamespacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableRouteRuleRequest struct {
	*tchttp.BaseRequest

	// 路由规则Id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
	// 路由规则启用描述

	ReleaseLog *string `json:"ReleaseLog,omitempty" name:"ReleaseLog"`
}

func (r *EnableRouteRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableRouteRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RedoTaskFlowBatchResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流批次历史 ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RedoTaskFlowBatchResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RedoTaskFlowBatchResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MetricDataPoint struct {

	// 数据点键

	Key *string `json:"Key,omitempty" name:"Key"`
	// 数据点值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 数据点标签

	Tag *string `json:"Tag,omitempty" name:"Tag"`
}

type EnableCreateMoreTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否可以创建任务true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableCreateMoreTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableCreateMoreTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableCreateMoreTaskRequest struct {
	*tchttp.BaseRequest
}

func (r *EnableCreateMoreTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableCreateMoreTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyResourceMultiCloudTsfConfigRequest struct {
	*tchttp.BaseRequest

	// 本TSF ID标识

	LocalTsfId *string `json:"LocalTsfId,omitempty" name:"LocalTsfId"`
	// 多云TSF配置

	TsfConfigList []*TsfConfig `json:"TsfConfigList,omitempty" name:"TsfConfigList"`
}

func (r *ModifyResourceMultiCloudTsfConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyResourceMultiCloudTsfConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeletePkgResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeletePkgResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePkgResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InterruptResourceBatchOperationRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *InterruptResourceBatchOperationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *InterruptResourceBatchOperationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ZipkinEndpointV2 struct {

	// 端点服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 端点IP地址（v4）

	Ipv4 *string `json:"Ipv4,omitempty" name:"Ipv4"`
	// 端点IP地址（v6）

	Ipv6 *string `json:"Ipv6,omitempty" name:"Ipv6"`
	// 端点端口号

	Port *int64 `json:"Port,omitempty" name:"Port"`
}

type DescribeTsfZonesRequest struct {
	*tchttp.BaseRequest

	// TSF地域ID

	TsfRegionId *string `json:"TsfRegionId,omitempty" name:"TsfRegionId"`
}

func (r *DescribeTsfZonesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTsfZonesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MachineList struct {

	// 机器id

	MachineId *string `json:"MachineId,omitempty" name:"MachineId"`
	// ip值

	Ip *string `json:"Ip,omitempty" name:"Ip"`
	// UserName值

	UserName *string `json:"UserName,omitempty" name:"UserName"`
	// Password值

	Password *string `json:"Password,omitempty" name:"Password"`
	// ModuleNames值

	ModuleNames []*string `json:"ModuleNames,omitempty" name:"ModuleNames"`
	// ZoneId值

	ZoneId *string `json:"ZoneId,omitempty" name:"ZoneId"`
	// ZoneName值

	ZoneName *string `json:"ZoneName,omitempty" name:"ZoneName"`
	// SshPort值

	SshPort *int64 `json:"SshPort,omitempty" name:"SshPort"`
}

type DescribeFilebeatConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置信息

		Result *FilebeatConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFilebeatConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFilebeatConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CheckFlowGraphValidityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// True 有效，false 无效

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CheckFlowGraphValidityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CheckFlowGraphValidityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ExpandNamespaceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ExpandNamespaceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExpandNamespaceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RedoTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作成功or失败

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RedoTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RedoTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskId struct {

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

type CreateGatewayOAuthPluginRequest struct {
	*tchttp.BaseRequest

	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
	// 插件类型 "OAuth"

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件名称

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 验证token路径

	TokenAuthUrl *string `json:"TokenAuthUrl,omitempty" name:"TokenAuthUrl"`
	// 验证token请求方法:get/post

	TokenAuthMethod *string `json:"TokenAuthMethod,omitempty" name:"TokenAuthMethod"`
	// 认证请求超时时间,单位:秒 范围:0~30

	ExpireTime *int64 `json:"ExpireTime,omitempty" name:"ExpireTime"`
	// 重定向地址

	RedirectUrl *string `json:"RedirectUrl,omitempty" name:"RedirectUrl"`
	// token携带位置，网关取token位置与发送认证请求时token位置一致,值:query/header

	TokenBaggagePosition *string `json:"TokenBaggagePosition,omitempty" name:"TokenBaggagePosition"`
	// token的key值

	TokenKeyName *string `json:"TokenKeyName,omitempty" name:"TokenKeyName"`
	// payload的映射参数名称

	PayloadMappingName *string `json:"PayloadMappingName,omitempty" name:"PayloadMappingName"`
	// payload映射到后端服务的携带位置,值:query/header

	PayloadMappingPosition *string `json:"PayloadMappingPosition,omitempty" name:"PayloadMappingPosition"`
	// 验证token微服务名（包含命名空间）

	TokenAuthServiceName *string `json:"TokenAuthServiceName,omitempty" name:"TokenAuthServiceName"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateGatewayOAuthPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayOAuthPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployServerlessGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeployServerlessGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployServerlessGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskRecordSimpleInfoPage struct {

	// 总数量

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 基本任务信息数组

	Content []*TaskRecordSimpleInfo `json:"Content,omitempty" name:"Content"`
}

type TsfPageUnitRuleV2 struct {

	// 记录总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*UnitRule `json:"Content,omitempty" name:"Content"`
}

type CreateAllGatewayApiAsyncResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateAllGatewayApiAsyncResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAllGatewayApiAsyncResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：发布成功；false：发布失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleaseConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TxMainTransactionV2 struct {

	// 事务Id

	TransactionId *string `json:"TransactionId,omitempty" name:"TransactionId"`
	// 服务器Ip

	ServerIp *string `json:"ServerIp,omitempty" name:"ServerIp"`
	// 服务名称

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 方法名

	MethodName *string `json:"MethodName,omitempty" name:"MethodName"`
	// 子事务数量

	SubCount *int64 `json:"SubCount,omitempty" name:"SubCount"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 事务状态

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 超时时间

	TimeoutMs *int64 `json:"TimeoutMs,omitempty" name:"TimeoutMs"`
	// 重试次数

	RetryTimes *int64 `json:"RetryTimes,omitempty" name:"RetryTimes"`
	// 是否开启自动重试

	AutoRetry *bool `json:"AutoRetry,omitempty" name:"AutoRetry"`
}

type DescribeApplicationInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicationInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayTagPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGatewayTagPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayTagPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ScalableRuleAttributeV2 struct {

	// RuleId

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// Name

	Name *string `json:"Name,omitempty" name:"Name"`
	// EnableShrink

	EnableShrink *int64 `json:"EnableShrink,omitempty" name:"EnableShrink"`
	// EnableExpand

	EnableExpand *int64 `json:"EnableExpand,omitempty" name:"EnableExpand"`
	// ExpandPeriod

	ExpandPeriod *int64 `json:"ExpandPeriod,omitempty" name:"ExpandPeriod"`
	// ShrinkPeriod

	ShrinkPeriod *int64 `json:"ShrinkPeriod,omitempty" name:"ShrinkPeriod"`
	// ExpandVmCount

	ExpandVmCount *int64 `json:"ExpandVmCount,omitempty" name:"ExpandVmCount"`
	// ShrinkVmCount

	ShrinkVmCount *int64 `json:"ShrinkVmCount,omitempty" name:"ShrinkVmCount"`
	// CoolTime

	CoolTime *int64 `json:"CoolTime,omitempty" name:"CoolTime"`
	// ExpandVmCountLimit

	ExpandVmCountLimit *int64 `json:"ExpandVmCountLimit,omitempty" name:"ExpandVmCountLimit"`
	// ShrinkVmCountLimit

	ShrinkVmCountLimit *int64 `json:"ShrinkVmCountLimit,omitempty" name:"ShrinkVmCountLimit"`
	// ExpandSubruleList

	ExpandSubruleList []*ExpandSubrule `json:"ExpandSubruleList,omitempty" name:"ExpandSubruleList"`
	// ShrinkSubruleList

	ShrinkSubruleList []*ExpandSubrule `json:"ShrinkSubruleList,omitempty" name:"ShrinkSubruleList"`
	// CreateTime

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// UpdateTime

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type UnbindApiGroupRequest struct {
	*tchttp.BaseRequest

	// 分组网关id列表

	GroupGatewayList []*GatewayGroupIds `json:"GroupGatewayList,omitempty" name:"GroupGatewayList"`
}

func (r *UnbindApiGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UnbindApiGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageConfigV2 struct {

	// TsfPageConfig

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置项列表

	Content []*Config `json:"Content,omitempty" name:"Content"`
}

type TsfPageMsInstance struct {

	// 微服务实例总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 微服务实例列表内容

	Content []*MsInstance `json:"Content,omitempty" name:"Content"`
}

type CreateNamespaceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功时为命名空间ID，失败为null

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateNamespaceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateNamespaceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeOverviewInvocationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 监控统计数据列表

		Result []*MetricDataPoint `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeOverviewInvocationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeOverviewInvocationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageFeature struct {

	// 特征ID

	FeatureId *string `json:"FeatureId,omitempty" name:"FeatureId"`
	// 特征类型

	FeatureType *string `json:"FeatureType,omitempty" name:"FeatureType"`
	// 名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 版本

	Version *string `json:"Version,omitempty" name:"Version"`
}

type DisableLaneGroupEntranceRequest struct {
	*tchttp.BaseRequest

	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 泳道部署组列表

	LaneGroupList []*LaneInfo `json:"LaneGroupList,omitempty" name:"LaneGroupList"`
}

func (r *DisableLaneGroupEntranceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableLaneGroupEntranceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopFailureRateInterfacesRequest struct {
	*tchttp.BaseRequest

	// 列表条目数量，取值范围[1, 50]，默认值10

	Count *uint64 `json:"Count,omitempty" name:"Count"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 统计开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 统计结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TSF命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// TSF微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
}

func (r *GetTopFailureRateInterfacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopFailureRateInterfacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteMicroserviceMetasRequest struct {
	*tchttp.BaseRequest

	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 元数据keys

	Keys []*string `json:"Keys,omitempty" name:"Keys"`
}

func (r *DeleteMicroserviceMetasRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMicroserviceMetasRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateSecretResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateSecretResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateSecretResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetDumpResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result []*DumpResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetDumpResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetDumpResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupsByScalableRuleIdList struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*GroupsByScalableRuleId `json:"Content,omitempty" name:"Content"`
}

type DescribeZonesRequest struct {
	*tchttp.BaseRequest

	// TZoneId

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
	// TZoneName

	TZoneName *string `json:"TZoneName,omitempty" name:"TZoneName"`
	// TRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
}

func (r *DescribeZonesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeZonesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AssociateFilebeatConfigRequest struct {
	*tchttp.BaseRequest

	// 配置id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组id列表

	GroupIdList []*GroupInfo `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *AssociateFilebeatConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AssociateFilebeatConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DescribeBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageRouteAffinity struct {

	// TSF就近策略总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// TSF就近策略列表

	Content []*RouteAffinity `json:"Content,omitempty" name:"Content"`
}

type DescribeContainerNamespacesRequest struct {
	*tchttp.BaseRequest

	// ClusterId值

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *DescribeContainerNamespacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerNamespacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupGatewaysResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API分组信息

		Result *TsfPageApiGroupInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupGatewaysResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupGatewaysResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteAlarmReceiversResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteAlarmReceiversResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteAlarmReceiversResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageTagsV2 struct {

	// 仓库名

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 版本ID

	TagId *string `json:"TagId,omitempty" name:"TagId"`
	// 镜像ID

	ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
	// 大小

	Size *string `json:"Size,omitempty" name:"Size"`
	// 创建时间

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 镜像制作者

	Author *string `json:"Author,omitempty" name:"Author"`
	// CPU架构

	Architecture *string `json:"Architecture,omitempty" name:"Architecture"`
	// Docker客户端版本

	DockerVersion *string `json:"DockerVersion,omitempty" name:"DockerVersion"`
	// 操作系统

	Os *string `json:"Os,omitempty" name:"Os"`
	// push时间

	PushTime *string `json:"PushTime,omitempty" name:"PushTime"`
	// 单位为字节

	SizeByte *int64 `json:"SizeByte,omitempty" name:"SizeByte"`
}

type DisableAuthorizationRequest struct {
	*tchttp.BaseRequest

	// 规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DisableAuthorizationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableAuthorizationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyClusterRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群描述信息

	ClusterDesc *string `json:"ClusterDesc,omitempty" name:"ClusterDesc"`
	// 备注名

	ClusterRemarkName *string `json:"ClusterRemarkName,omitempty" name:"ClusterRemarkName"`
}

func (r *ModifyClusterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyClusterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type JvmLog struct {

	// 日志内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 实例ip

	InstanceIp *string `json:"InstanceIp,omitempty" name:"InstanceIp"`
	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 日志产生的时间戳

	Timestamp *string `json:"Timestamp,omitempty" name:"Timestamp"`
	// 部署组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

type OverviewConfig struct {

	// 集群显示阈值

	ClusterThreshold *uint64 `json:"ClusterThreshold,omitempty" name:"ClusterThreshold"`
}

type DescribeSecretNamesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// secret列表

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSecretNamesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSecretNamesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableTaskFlowRequest struct {
	*tchttp.BaseRequest

	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
}

func (r *EnableTaskFlowRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableTaskFlowRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiInfo struct {

	// 命名空间Id，若为外部API,为固定值："namespace-external"

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 服务Id，若为外部API,为固定值："ms-external"

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// API path

	Path *string `json:"Path,omitempty" name:"Path"`
	// Api 请求

	Method *string `json:"Method,omitempty" name:"Method"`
	// 请求映射

	PathMapping *string `json:"PathMapping,omitempty" name:"PathMapping"`
	// api所在服务host,限定外部Api填写。格式: `http://127.0.0.1:8080`

	Host *string `json:"Host,omitempty" name:"Host"`
	// api描述信息

	Description *string `json:"Description,omitempty" name:"Description"`
	// RPC信息

	RpcExt *string `json:"RpcExt,omitempty" name:"RpcExt"`
	// RPC类型

	RpcType *string `json:"RpcType,omitempty" name:"RpcType"`
	// MD5值

	Md5 *string `json:"Md5,omitempty" name:"Md5"`
}

type SetCkafkaToContainerClusterRequest struct {
	*tchttp.BaseRequest

	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// ckafka instanceid

	CkafkaInstanceid *string `json:"CkafkaInstanceid,omitempty" name:"CkafkaInstanceid"`
	// ckafka topicid

	CkafkaTopicid *string `json:"CkafkaTopicid,omitempty" name:"CkafkaTopicid"`
}

func (r *SetCkafkaToContainerClusterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetCkafkaToContainerClusterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMeshSidecarServiceInfoRequest struct {
	*tchttp.BaseRequest

	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeMeshSidecarServiceInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMeshSidecarServiceInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeProgramsRequest struct {
	*tchttp.BaseRequest

	// 模糊查询数据集ID，数据集名称，不传入时查询全量

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 每页数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// ResourceCode

	ResourceCode *string `json:"ResourceCode,omitempty" name:"ResourceCode"`
}

func (r *DescribeProgramsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeProgramsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceTaskStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 资源任务执行状态结果

		Result *ResourceTaskStatusResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeResourceTaskStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceTaskStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyProductNewsRequest struct {
	*tchttp.BaseRequest

	// id

	NewsId *string `json:"NewsId,omitempty" name:"NewsId"`
	// 内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 链接

	Link *string `json:"Link,omitempty" name:"Link"`
	// 排序

	Order *int64 `json:"Order,omitempty" name:"Order"`
	// 样式Flag

	StyleFlag *string `json:"StyleFlag,omitempty" name:"StyleFlag"`
	// 是否有效

	Valid *int64 `json:"Valid,omitempty" name:"Valid"`
	// 标题

	Title *string `json:"Title,omitempty" name:"Title"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
	// 页面位置。多个可以逗号隔开aa,bb

	Page *string `json:"Page,omitempty" name:"Page"`
}

func (r *ModifyProductNewsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyProductNewsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchMeshLogRequest struct {
	*tchttp.BaseRequest

	// 机器实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 单页请求配置数量，取值范围[1, 500]，默认值为100

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 查询起始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 查询结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 请求偏移量，取值范围大于等于0，默认值为
	// 0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 排序规则，默认值"time"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，取值"asc"或"desc"，默认
	// 值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 检索类型，取值"LUCENE", "REGEXP",
	// "NORMAL"

	SearchWordType *string `json:"SearchWordType,omitempty" name:"SearchWordType"`
	// 批量请求类型，取值"page"或"scroll"，默认
	// 值"page"

	BatchType *string `json:"BatchType,omitempty" name:"BatchType"`
	// 游标ID

	ScrollId *string `json:"ScrollId,omitempty" name:"ScrollId"`
	// mesh 组件类型

	Type *int64 `json:"Type,omitempty" name:"Type"`
}

func (r *SearchMeshLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchMeshLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigSummaryRequest struct {
	*tchttp.BaseRequest

	// 查询关键字，模糊查询：配置项名称，不传入时查询全量

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数，默认为20

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 按时间排序：creation_time；按名称排序：config_name

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序传 0，降序传 1

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 无

	ConfigTagList []*string `json:"ConfigTagList,omitempty" name:"ConfigTagList"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
	// 无

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
}

func (r *DescribePublicConfigSummaryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigSummaryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisassociateBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisassociateBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisassociateBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShirkInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务ID

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ShirkInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShirkInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeletePkgsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeletePkgsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePkgsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ResourceStatus struct {

	// 该模块多个节点的总的资源使用量

	Used *uint64 `json:"Used,omitempty" name:"Used"`
	// 该模块的多个节点的总的资源量

	Total *uint64 `json:"Total,omitempty" name:"Total"`
	// 各个节点的资源的情况

	NodesStatus []*ResourceNodeStatus `json:"NodesStatus,omitempty" name:"NodesStatus"`
}

type SchedulingStrategy struct {

	// NONE：不使用调度策略；CROSS_AZ：跨可用区部署

	Type *string `json:"Type,omitempty" name:"Type"`
}

type ListTsfModulesDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result []*ModulesResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListTsfModulesDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListTsfModulesDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FilebeatConfig struct {

	// 配置id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置描述

	ConfigDesc *string `json:"ConfigDesc,omitempty" name:"ConfigDesc"`
	// 配置内容

	ConfigYaml *string `json:"ConfigYaml,omitempty" name:"ConfigYaml"`
	// 配置类型
	// common - 通用配置
	// business - 日志配置项
	// delivery - 日志投递项

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
	// 配置创建时间

	ConfigCreateTime *string `json:"ConfigCreateTime,omitempty" name:"ConfigCreateTime"`
	// 配置最近一次更新时间

	ConfigUpdateTime *string `json:"ConfigUpdateTime,omitempty" name:"ConfigUpdateTime"`
}

type ThreadDump struct {

	// 线程分析结果

	Data []*ThreadDumpData `json:"Data,omitempty" name:"Data"`
	// 接口执行状态success/error

	Status *string `json:"Status,omitempty" name:"Status"`
	// success时为"", error时为错误信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// success时为, error时为错误码

	StatusCode *int64 `json:"StatusCode,omitempty" name:"StatusCode"`
}

type VmGroupV2 struct {

	// 分组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 分组状态

	GroupStatus *string `json:"GroupStatus,omitempty" name:"GroupStatus"`
	// 程序包Id

	PackageId *string `json:"PackageId,omitempty" name:"PackageId"`
	// 程序包名称

	PackageName *string `json:"PackageName,omitempty" name:"PackageName"`
	// 程序包版本号

	PackageVersion *string `json:"PackageVersion,omitempty" name:"PackageVersion"`
	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 分组机器数目

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 分组运行中机器数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 部署组启动参数信息

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 分组创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 分组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 分组停止机器数目

	OffInstanceCount *string `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
	// 分组描述信息

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type EnableNamespaceAffinityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 启用命名空间就近访问策略操作是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableNamespaceAffinityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableNamespaceAffinityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayJwtPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGatewayJwtPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayJwtPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateRepositoryRequest struct {
	*tchttp.BaseRequest

	// 仓库ID

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
	// 仓库描述

	RepositoryDesc *string `json:"RepositoryDesc,omitempty" name:"RepositoryDesc"`
}

func (r *UpdateRepositoryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateRepositoryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RatelimitRuleForUpdateV2 struct {

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 规则名字，在一个微服务下唯一

	Name *string `json:"Name,omitempty" name:"Name"`
	// 状态 0表示启用 1表示停用

	Status *uint64 `json:"Status,omitempty" name:"Status"`
	// 限流周期，单位秒

	DurationSecond *uint64 `json:"DurationSecond,omitempty" name:"DurationSecond"`
	// 每周期内的限流配额

	DurationQuota *uint64 `json:"DurationQuota,omitempty" name:"DurationQuota"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 标签规则

	Dimensions []*RatelimitDimension `json:"Dimensions,omitempty" name:"Dimensions"`
	// 线程数

	ConcurrentThreads *string `json:"ConcurrentThreads,omitempty" name:"ConcurrentThreads"`
	// 限流模式

	LimitMode *string `json:"LimitMode,omitempty" name:"LimitMode"`
	// 限流自定义返回文本

	LimitedResponse *string `json:"LimitedResponse,omitempty" name:"LimitedResponse"`
	// 限流阈值类型

	ConditionModel *string `json:"ConditionModel,omitempty" name:"ConditionModel"`
}

type TsfPageFileConfig struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 文件配置数组

	Content []*FileConfig `json:"Content,omitempty" name:"Content"`
}

type DescribeClustersResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Cluster分页信息

		Result *TsfPageClusterV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClustersResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClustersResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AgentProfile struct {

	// Agent类型

	AgentType *string `json:"AgentType,omitempty" name:"AgentType"`
	// Agent版本号

	AgentVersion *string `json:"AgentVersion,omitempty" name:"AgentVersion"`
}

type CreateMonitorStatisticsPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 保存结果true：保存成功；false：保存失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateMonitorStatisticsPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMonitorStatisticsPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSimpleApplicationsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 简单应用分页对象

		Result *TsfPageSimpleApplication `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSimpleApplicationsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleApplicationsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SaveDeployModuleParamsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SaveDeployModuleParamsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SaveDeployModuleParamsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceUsageRateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 资源使用情况的返回结果

		Result *ResourceStatus `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeResourceUsageRateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceUsageRateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageRecordActionTypeNameV2 struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 操作类型名称列表

	Content []*RecordActionTypeNameV2 `json:"Content,omitempty" name:"Content"`
}

type DescribeProductHelpResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 产品帮助列表

		Result *PagedProductHelp `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeProductHelpResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeProductHelpResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ResourceTaskStatusResult struct {

	// 任务的执行状态

	TaskStatus *uint64 `json:"TaskStatus,omitempty" name:"TaskStatus"`
}

type EnableRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 启用路由操作是否成功。
		// true：启用路由成功。
		// false：启用路由失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperationInfo struct {

	// 初始化按钮的控制信息

	Init *OperationInfoDetail `json:"Init,omitempty" name:"Init"`
	// 添加实例按钮的控制信息

	AddInstance *OperationInfoDetail `json:"AddInstance,omitempty" name:"AddInstance"`
	// 销毁机器的控制信息

	Destroy *OperationInfoDetail `json:"Destroy,omitempty" name:"Destroy"`
}

type ReleaseGroup struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
}

type DescribeGeneralMetricDataDimensionRequest struct {
	*tchttp.BaseRequest

	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 开始 index

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 聚合维度

	DimensionName *string `json:"DimensionName,omitempty" name:"DimensionName"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 维度

	MetricDimensionValues *MetricDimensionValue `json:"MetricDimensionValues,omitempty" name:"MetricDimensionValues"`
}

func (r *DescribeGeneralMetricDataDimensionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGeneralMetricDataDimensionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInvocationMetricDataPointRequest struct {
	*tchttp.BaseRequest

	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 维度

	MetricDimensionValues []*MetricDimensionValue `json:"MetricDimensionValues,omitempty" name:"MetricDimensionValues"`
	// 指标

	Metrics []*Metric `json:"Metrics,omitempty" name:"Metrics"`
	// 调用视角。可选值：SERVER, CLIENT。默认为SERVER

	Kind *string `json:"Kind,omitempty" name:"Kind"`
}

func (r *DescribeInvocationMetricDataPointRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationMetricDataPointRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchContainerStdoutLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 容器日志输出结果

		Result *TsfBusinessLog `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchContainerStdoutLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchContainerStdoutLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopAvgTimeCostServicesRequest struct {
	*tchttp.BaseRequest

	// 列表条目数量，取值范围[1, 50]，默认值10

	Count *uint64 `json:"Count,omitempty" name:"Count"`
	// 排序方式，取值"asc"或"desc"，默认值"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 统计开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 统计结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TSF命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

func (r *GetTopAvgTimeCostServicesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopAvgTimeCostServicesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RetryTransactionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 重试事务接口结果

		Result *TxRetry `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RetryTransactionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RetryTransactionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApplicationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 应用信息

		Result *ApplicationForPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayInstanceProgramsRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DescribeGatewayInstanceProgramsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayInstanceProgramsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VmGroupForPage struct {

	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 分组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 分组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 分组创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 分组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 部署组启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 程序包Id

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
}

type StopTaskBatchRequest struct {
	*tchttp.BaseRequest

	// 批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 参数ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *StopTaskBatchRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopTaskBatchRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateHealthCheckSettingsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新健康检查配置操作是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateHealthCheckSettingsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateHealthCheckSettingsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeliveryConfigRequest struct {
	*tchttp.BaseRequest

	// 投递配置id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DescribeDeliveryConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeliveryConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiDetailResponse struct {

	// API 请求参数

	Request []*ApiRequestDescr `json:"Request,omitempty" name:"Request"`
	// API 响应参数

	Response []*ApiResponseDescr `json:"Response,omitempty" name:"Response"`
	// API 复杂结构定义

	Definitions []*ApiDefinitionDescr `json:"Definitions,omitempty" name:"Definitions"`
	// API 的 content type

	RequestContentType *string `json:"RequestContentType,omitempty" name:"RequestContentType"`
	// API  能否调试

	CanRun *bool `json:"CanRun,omitempty" name:"CanRun"`
	// API 状态 0:离线 1:在线，默认0

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// API 描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// MsgwApiType

	MsgwApiType *string `json:"MsgwApiType,omitempty" name:"MsgwApiType"`
}

type GatewayApiGroupVo struct {

	// 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 分组下API个数

	GroupApiCount *uint64 `json:"GroupApiCount,omitempty" name:"GroupApiCount"`
	// 分组API列表

	GroupApis []*GatewayGroupApiVo `json:"GroupApis,omitempty" name:"GroupApis"`
	// 网关实例的类型

	GatewayInstanceType *string `json:"GatewayInstanceType,omitempty" name:"GatewayInstanceType"`
	// 网关实例ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
}

type DeletePkgsRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 需要删除的程序包ID列表

	PkgIds []*string `json:"PkgIds,omitempty" name:"PkgIds"`
	// 程序包仓库类型

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
	// 程序包仓库id

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
}

func (r *DeletePkgsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePkgsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInterfaceStatisticResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 接口统计

		Result *InterfaceStatistic `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInterfaceStatisticResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInterfaceStatisticResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeServerlessGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeServerlessGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServerlessGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssSpanBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 业务日志列表

		Result *TsfPageBusinessLogV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchOssSpanBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssSpanBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListTsfRegionResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*TsfRegionResult `json:"Content,omitempty" name:"Content"`
}

type NamespaceWrong struct {

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间编码

	NamespaceCode *string `json:"NamespaceCode,omitempty" name:"NamespaceCode"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 命名空间描述

	NamespaceDesc *string `json:"NamespaceDesc,omitempty" name:"NamespaceDesc"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 默认命名空间

	IsDefault *string `json:"IsDefault,omitempty" name:"IsDefault"`
	// 命名空间状态

	NamespaceStatus *string `json:"NamespaceStatus,omitempty" name:"NamespaceStatus"`
	// 删除标识

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type DescribeServiceNamesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务名列表

		Result *TsfPageMicroservice `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeServiceNamesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServiceNamesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchSpanBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 业务日志列表

		Result *TsfPageBusinessLogV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchSpanBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchSpanBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageBillingDeal struct {

	// 记录总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*BillingDeal `json:"Content,omitempty" name:"Content"`
}

type CancelHideInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CancelHideInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CancelHideInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstanceResourceConfig struct {

	// 容器实例相关的参数配置

	Container *ContainerInstanceResourceConfig `json:"Container,omitempty" name:"Container"`
	// 虚拟机实例相关的参数配置

	Vm *VmInstanceResourceConfig `json:"Vm,omitempty" name:"Vm"`
}

type TsfPageNamespaceWrong struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 命名空间列表

	Content []*NamespaceWrong `json:"Content,omitempty" name:"Content"`
}

type DeleteGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除部署组操作是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableRouteRuleRequest struct {
	*tchttp.BaseRequest

	// 路由规则id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
}

func (r *DisableRouteRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableRouteRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageConfigReleaseLogV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置项发布日志数组

	Content []*ConfigReleaseLog `json:"Content,omitempty" name:"Content"`
}

type DescribeAuthNamespacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 命名空间列表

		Result []*GatewayNamespace `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAuthNamespacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthNamespacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeImagesRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeImagesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImagesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageRegisterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ImageRegisterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageRegisterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CosUploadInfoV2 struct {

	// 无

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 无

	Bucket *string `json:"Bucket,omitempty" name:"Bucket"`
	// 无

	Region *string `json:"Region,omitempty" name:"Region"`
	// 无

	Path *string `json:"Path,omitempty" name:"Path"`
	// 无

	Credentials *CosCredentials `json:"Credentials,omitempty" name:"Credentials"`
}

type DescribeApplicationMicroserviceTypesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 应用微服务类型列表

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicationMicroserviceTypesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationMicroserviceTypesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeJvmMonitorMethodProfileRequest struct {
	*tchttp.BaseRequest

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeJvmMonitorMethodProfileRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeJvmMonitorMethodProfileRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyResourceMultiCloudTsfConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 设置成功true

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyResourceMultiCloudTsfConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyResourceMultiCloudTsfConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ScalableTask struct {

	// 任务id

	Taskid *string `json:"Taskid,omitempty" name:"Taskid"`
	// 任务描述

	Desc *string `json:"Desc,omitempty" name:"Desc"`
	// CreateTime

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// EndTime

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TaskInstanceList

	TaskInstanceList []*TaskInstance `json:"TaskInstanceList,omitempty" name:"TaskInstanceList"`
}

type GetDownloadInfoRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
}

func (r *GetDownloadInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetDownloadInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPrice struct {

	// 总费用，不包含优惠，单位：分

	TotalCost *int64 `json:"TotalCost,omitempty" name:"TotalCost"`
	// 优惠后总价, 单位: 分

	RealTotalCost *int64 `json:"RealTotalCost,omitempty" name:"RealTotalCost"`
	// 计费项标签 key

	Label *string `json:"Label,omitempty" name:"Label"`
	// 计费项标签值，也是询价月份信息

	TimeSpan *int64 `json:"TimeSpan,omitempty" name:"TimeSpan"`
	// 计费项标签 value

	LabelValue *int64 `json:"LabelValue,omitempty" name:"LabelValue"`
	// 公式

	Formula *string `json:"Formula,omitempty" name:"Formula"`
}

type DeleteRegionRequest struct {
	*tchttp.BaseRequest

	// tRegionId

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
}

func (r *DeleteRegionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRegionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeConfigsRequest struct {
	*tchttp.BaseRequest

	// 应用ID，不传入时查询全量

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 配置项ID，不传入时查询全量，高优先级

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 配置项ID列表，不传入时查询全量，低优先级

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
	// 配置项名称，精确查询，不传入时查询全量

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本，精确查询，不传入时查询全量

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 按时间排序：creation_time；按版本号排序：config_version

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序传 0，降序传 1

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
}

func (r *DescribeConfigsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRepositoryRequest struct {
	*tchttp.BaseRequest

	// 仓库ID

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
}

func (r *DescribeRepositoryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRepositoryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateScalableRuleRequest struct {
	*tchttp.BaseRequest

	// 弹性扩缩容规则名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 包含缩容规则, 默认0, 0:否 1:是

	EnableShrink *uint64 `json:"EnableShrink,omitempty" name:"EnableShrink"`
	// 包含扩容规则，默认0, 0否 1是

	EnableExpand *uint64 `json:"EnableExpand,omitempty" name:"EnableExpand"`
	// 扩容规则持续时间,0-9999s

	ExpandPeriod *uint64 `json:"ExpandPeriod,omitempty" name:"ExpandPeriod"`
	// 缩容规则持续时间，0-9999s

	ShrinkPeriod *uint64 `json:"ShrinkPeriod,omitempty" name:"ShrinkPeriod"`
	// 单次扩容机器数量, 0-9999

	ExpandVmCount *uint64 `json:"ExpandVmCount,omitempty" name:"ExpandVmCount"`
	// 单次缩容机器数量, 0-9999

	ShrinkVmCount *uint64 `json:"ShrinkVmCount,omitempty" name:"ShrinkVmCount"`
	// 冷却时间, s为单位, 0-9999

	CoolTime *uint64 `json:"CoolTime,omitempty" name:"CoolTime"`
	// 扩容之后，最大实例数目,0-9999

	ExpandVmCountLimit *uint64 `json:"ExpandVmCountLimit,omitempty" name:"ExpandVmCountLimit"`
	// 缩容之后，最小实例数目, 0-9999

	ShrinkVmCountLimit *uint64 `json:"ShrinkVmCountLimit,omitempty" name:"ShrinkVmCountLimit"`
	// 扩容规则数组

	ExpandSubruleList []*ScalableSubRule `json:"ExpandSubruleList,omitempty" name:"ExpandSubruleList"`
	// 缩容规则数组

	ShrinkSubruleList []*ScalableSubRule `json:"ShrinkSubruleList,omitempty" name:"ShrinkSubruleList"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 开启定时伸缩规则, 默认0, 0:关闭定时伸缩 1:开启定时伸缩

	EnableCronAS *uint64 `json:"EnableCronAS,omitempty" name:"EnableCronAS"`
	// 是否关闭指标伸缩, 默认0, 0:打开指标伸缩 1:关闭指标伸缩

	DisableMetricAS *uint64 `json:"DisableMetricAS,omitempty" name:"DisableMetricAS"`
	// 定时伸缩规则列表

	CronRuleList []*CronRule `json:"CronRuleList,omitempty" name:"CronRuleList"`
}

func (r *CreateScalableRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateScalableRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartServerlessGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StartServerlessGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartServerlessGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageContainerEvent struct {

	// 返回个数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// events 数组

	Content []*ContainerEvent `json:"Content,omitempty" name:"Content"`
}

type DescribeClusterMonitorRequest struct {
	*tchttp.BaseRequest

	// 查询的模块id

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// 时间粒度

	TimeGranularity *string `json:"TimeGranularity,omitempty" name:"TimeGranularity"`
	// 查询数据起始时间

	From *string `json:"From,omitempty" name:"From"`
	// 查询数据结束时间

	To *string `json:"To,omitempty" name:"To"`
}

func (r *DescribeClusterMonitorRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterMonitorRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupBindedGatewaysResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 翻页结构体

		Result *TsfPageGatewayDeployGroup `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupBindedGatewaysResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupBindedGatewaysResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyProductHelpResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyProductHelpResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyProductHelpResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRepositoryRequest struct {
	*tchttp.BaseRequest

	// 仓库ID

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
}

func (r *DeleteRepositoryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRepositoryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInstanceReleasedConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，具体看 InstanceReleaseConfig 定义

		Result *InstanceReleasedConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInstanceReleasedConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceReleasedConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerGroupOtherV2 struct {

	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// 服务状态，请参考后面的的状态定义

	Status *string `json:"Status,omitempty" name:"Status"`
	// 服务状态，请参考后面的的状态定义

	Message *string `json:"Message,omitempty" name:"Message"`
	// 环境变量

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
}

type ModifyGroupLaneRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 泳道部署组列表

	LaneList []*LaneGroup `json:"LaneList,omitempty" name:"LaneList"`
}

func (r *ModifyGroupLaneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyGroupLaneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyTaskFlowRequest struct {
	*tchttp.BaseRequest

	// 工作流ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流名称

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
	// 触发规则

	TriggerRule *TaskRule `json:"TriggerRule,omitempty" name:"TriggerRule"`
	// 工作流边

	FlowEdges []*TaskFlowEdge `json:"FlowEdges,omitempty" name:"FlowEdges"`
	// 超时时间

	TimeOut *int64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *ModifyTaskFlowRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyTaskFlowRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApplicationsOtherRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeApplicationsOtherRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationsOtherRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMeshSidecarServiceInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 注册信息

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMeshSidecarServiceInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMeshSidecarServiceInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowBatchHistoryPage struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 分页数据

	Content []*TaskFlowBatch `json:"Content,omitempty" name:"Content"`
}

type DescribeResourceTsfConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TSF配置信息

		Result *TsfConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeResourceTsfConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceTsfConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InterfaceRequests struct {

	// interfaceRequest数组

	Content []*InterfaceRequest `json:"Content,omitempty" name:"Content"`
	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
}

type ModifyReleaseRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 触发类型

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
	// 触发配置

	TriggerConfig *string `json:"TriggerConfig,omitempty" name:"TriggerConfig"`
	// 是否启用

	EnableStatus *bool `json:"EnableStatus,omitempty" name:"EnableStatus"`
}

func (r *ModifyReleaseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyReleaseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTsfmanagerZonesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ListTsfZoneResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTsfmanagerZonesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTsfmanagerZonesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLicensesRequest struct {
	*tchttp.BaseRequest

	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeLicensesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLicensesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroservicesByAssociateApplicationRequest struct {
	*tchttp.BaseRequest

	// 服务所关联的应用 ID

	AssociateApplicationId *string `json:"AssociateApplicationId,omitempty" name:"AssociateApplicationId"`
}

func (r *DescribeMicroservicesByAssociateApplicationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroservicesByAssociateApplicationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyProgramResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true: 更新成功；false: 更新失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyProgramResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyProgramResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseSidecarFilterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true、false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleaseSidecarFilterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseSidecarFilterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayPluginTypesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件类型列表

		Result []*GatewayPluginDefinition `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayPluginTypesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayPluginTypesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSpanDetailRequest struct {
	*tchttp.BaseRequest

	// 调用链spanId

	SpanId *string `json:"SpanId,omitempty" name:"SpanId"`
	// 是否为跨 TSF 查询

	IsMultiTsf *bool `json:"IsMultiTsf,omitempty" name:"IsMultiTsf"`
}

func (r *DescribeSpanDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSpanDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyAuthorizationRequest struct {
	*tchttp.BaseRequest

	// 规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 规则名称，为null时不更新

	RuleName *string `json:"RuleName,omitempty" name:"RuleName"`
	// 是否启用，为null时不更新

	IsEnabled *string `json:"IsEnabled,omitempty" name:"IsEnabled"`
	// 标签列表，为null时不更新

	Tags []*AuthConditionV2 `json:"Tags,omitempty" name:"Tags"`
	// 过滤鉴权规则类型，B 为黑名单，W 为白名单

	Type *string `json:"Type,omitempty" name:"Type"`
}

func (r *ModifyAuthorizationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyAuthorizationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyMicroserviceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 修改微服务详情是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyMicroserviceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyMicroserviceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyUploadInfoRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 调用DescribeUploadInfo接口时返回的软件包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// COS返回上传结果（默认为0：成功，其他值表示失败）

	Result *int64 `json:"Result,omitempty" name:"Result"`
	// 程序包MD5

	Md5 *string `json:"Md5,omitempty" name:"Md5"`
	// 程序包大小（单位字节）

	Size *uint64 `json:"Size,omitempty" name:"Size"`
	// 程序包仓库类型

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
	// 程序包仓库id

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
}

func (r *ModifyUploadInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyUploadInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayPluginBoundParam struct {

	// 插件id

	PluginId *string `json:"PluginId,omitempty" name:"PluginId"`
	// 插件绑定到的对象类型:group/api

	ScopeType *string `json:"ScopeType,omitempty" name:"ScopeType"`
	// 插件绑定到的对象主键值，例如分组的ID/API的ID

	ScopeValue *string `json:"ScopeValue,omitempty" name:"ScopeValue"`
	// 创建关联的服务id，关联envoy网关时使用

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 网关id

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
}

type GraphEdgeV2 struct {

	// 来源服务名

	SourceName *string `json:"SourceName,omitempty" name:"SourceName"`
	// 目标服务名

	TargetName *string `json:"TargetName,omitempty" name:"TargetName"`
	// 来源服务类型

	SourceType *string `json:"SourceType,omitempty" name:"SourceType"`
	// 目标服务类型

	TargetType *string `json:"TargetType,omitempty" name:"TargetType"`
	// 服务间总请求量

	ReqTotalQty *uint64 `json:"ReqTotalQty,omitempty" name:"ReqTotalQty"`
	// 请求平均数，次每分钟，两位小数

	ReqAvgQty *float64 `json:"ReqAvgQty,omitempty" name:"ReqAvgQty"`
	// 请求成功率，两位小数

	ReqSuccessRate *float64 `json:"ReqSuccessRate,omitempty" name:"ReqSuccessRate"`
	// 请求平均耗时，单位毫秒，两位小数

	ReqAvgDuration *float64 `json:"ReqAvgDuration,omitempty" name:"ReqAvgDuration"`
	// 健康度指标

	Apdex *float64 `json:"Apdex,omitempty" name:"Apdex"`
	// 来源节点标识

	SourceId *string `json:"SourceId,omitempty" name:"SourceId"`
	// 目标节点标识

	TargetId *string `json:"TargetId,omitempty" name:"TargetId"`
	// 来源命名空间ID

	SourceNamespaceId *string `json:"SourceNamespaceId,omitempty" name:"SourceNamespaceId"`
	// 目标命名空间ID

	TargetNamespaceId *string `json:"TargetNamespaceId,omitempty" name:"TargetNamespaceId"`
}

type ContainerGroupDetail struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// NodePort端口，只有公网和NodePort访问方式才有值

	NodePort *int64 `json:"NodePort,omitempty" name:"NodePort"`
	// 最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *uint64 `json:"AccessType,omitempty" name:"AccessType"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 端口数组对象

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 环境变量数组对象

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// pod错误信息描述

	Message *string `json:"Message,omitempty" name:"Message"`
	// 部署组状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 子网id

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 部署组资源类型

	GroupResourceType *string `json:"GroupResourceType,omitempty" name:"GroupResourceType"`
	// 部署组实例个数

	InstanceCount *uint64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 部署组更新时间戳

	UpdatedTime *int64 `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// kubernetes滚动更新策略的MaxSurge参数

	MaxSurge *string `json:"MaxSurge,omitempty" name:"MaxSurge"`
	// kubernetes滚动更新策略的MaxUnavailable参数

	MaxUnavailable *string `json:"MaxUnavailable,omitempty" name:"MaxUnavailable"`
	// 部署组健康检查设置

	HealthCheckSettings *HealthCheckSettings `json:"HealthCheckSettings,omitempty" name:"HealthCheckSettings"`
	// 允许PlainYamlDeploy

	AllowPlainYamlDeploy *bool `json:"AllowPlainYamlDeploy,omitempty" name:"AllowPlainYamlDeploy"`
	// 是否不等于ServiceConfig

	IsNotEqualServiceConfig *bool `json:"IsNotEqualServiceConfig,omitempty" name:"IsNotEqualServiceConfig"`
	// 仓库名

	RepoName *string `json:"RepoName,omitempty" name:"RepoName"`
	// 别名

	Alias *string `json:"Alias,omitempty" name:"Alias"`
}

type DailyUseStatistics struct {

	// 总调用数

	TotalRequestCount *DailyUseStatisticsEntity `json:"TotalRequestCount,omitempty" name:"TotalRequestCount"`
	// 平均错误率

	AvgErrorRate *DailyUseStatisticsEntity `json:"AvgErrorRate,omitempty" name:"AvgErrorRate"`
	// 平均响应耗时

	AvgResponseCost *DailyUseStatisticsEntity `json:"AvgResponseCost,omitempty" name:"AvgResponseCost"`
}

type DescribeGatewayMonitorDetailsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 指标监控数据

		Result *MetricSummary `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayMonitorDetailsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayMonitorDetailsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BillingOperationDestroyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果（true成功，false失败）

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *BillingOperationDestroyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationDestroyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeServerlessGroupsRequest struct {
	*tchttp.BaseRequest

	// 搜索字段，模糊搜索groupName字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 分组所属应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 排序字段，默认为 createTime字段，支持id， name， createTime

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，默认为1：倒序排序，0：正序，1：倒序

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量，取值从0开始

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 分组所属名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 分组所属集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 无

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *DescribeServerlessGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServerlessGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyTsfZoneRequest struct {
	*tchttp.BaseRequest

	// TZoneId值

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
	// TZoneName值

	TZoneName *string `json:"TZoneName,omitempty" name:"TZoneName"`
	// TRemark值

	TRemark *string `json:"TRemark,omitempty" name:"TRemark"`
	// TRegionId值

	TRegionId *string `json:"TRegionId,omitempty" name:"TRegionId"`
	// TZoneEngName值

	TZoneEngName *string `json:"TZoneEngName,omitempty" name:"TZoneEngName"`
}

func (r *ModifyTsfZoneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyTsfZoneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAbnormalMetricsConfigRequest struct {
	*tchttp.BaseRequest

	// 命名空间id

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
}

func (r *DescribeAbnormalMetricsConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAbnormalMetricsConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InterruptResourceBatchOperationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作执行结果描述

		Result *ResourceOperationStatusResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *InterruptResourceBatchOperationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *InterruptResourceBatchOperationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowBatchRecordsRequest struct {
	*tchttp.BaseRequest

	// 工作流 ID，精确过滤字段

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 开始时间

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 截止时间

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
	// 查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 单页查询数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 状态

	State *string `json:"State,omitempty" name:"State"`
	// 工作流名称，精确过滤字段

	FlowName *string `json:"FlowName,omitempty" name:"FlowName"`
	// 工作流批次ID，精确过滤字段

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 触发类型, N: 正常触发/ M:手工触发/ MR: 手动重试/ FR:失败重试

	TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
}

func (r *DescribeFlowBatchRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowBatchRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type JvmMonitorData struct {

	// 堆内存监控图,三条线

	HeapMemory *MemoryPicture `json:"HeapMemory,omitempty" name:"HeapMemory"`
	// 非堆内存监控图,三条线

	NonHeapMemory *MemoryPicture `json:"NonHeapMemory,omitempty" name:"NonHeapMemory"`
	// 伊甸园区监控图,三条线

	EdenSpace *MemoryPicture `json:"EdenSpace,omitempty" name:"EdenSpace"`
	// 幸存者区监控图,三条线

	SurvivorSpace *MemoryPicture `json:"SurvivorSpace,omitempty" name:"SurvivorSpace"`
	// 老年代监控图,三条线

	OldSpace *MemoryPicture `json:"OldSpace,omitempty" name:"OldSpace"`
	// 元空间监控图,三条线

	MetaSpace *MemoryPicture `json:"MetaSpace,omitempty" name:"MetaSpace"`
	// 线程监控图,三条线

	ThreadPicture *ThreadPicture `json:"ThreadPicture,omitempty" name:"ThreadPicture"`
	// youngGC增量监控图,一条线

	YoungGC []*CurvePoint `json:"YoungGC,omitempty" name:"YoungGC"`
	// fullGC增量监控图,一条线

	FullGC []*CurvePoint `json:"FullGC,omitempty" name:"FullGC"`
	// cpu使用率,一条线

	CpuUsage []*CurvePoint `json:"CpuUsage,omitempty" name:"CpuUsage"`
	// 加载类数,一条线

	ClassCount []*CurvePoint `json:"ClassCount,omitempty" name:"ClassCount"`
}

type ListMonitorStatisticsPolicyResult struct {

	// 监控统计策略id

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// 关键词

	KeyWords *string `json:"KeyWords,omitempty" name:"KeyWords"`
	// 部署组列表信息

	GroupList *GroupList `json:"GroupList,omitempty" name:"GroupList"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type DescribeContainerMicroServiceListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 总记录数

		TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
		// 列表信息

		Content []*string `json:"Content,omitempty" name:"Content"`
		// 实例名称(对应到kubernetes的pod名称)

		PodName *string `json:"PodName,omitempty" name:"PodName"`
		// 实例ID(对应到kubernetes的pod id)

		PodId *string `json:"PodId,omitempty" name:"PodId"`
		// 实例状态，请参考后面的实例的状态定义:
		// Running     正常运行中
		// Waiting     等待运行中，例如正在下载镜像
		// Terminating  	实例有容器正在终止
		// Terminated    实例有容器已经终止
		// NotReady    	实例有容器处于未就绪状态，比如容器的健康检查失败
		// Error   其他未知异常

		Status *string `json:"Status,omitempty" name:"Status"`
		// 主机IP

		NodeIp *string `json:"NodeIp,omitempty" name:"NodeIp"`
		// 实例ip

		Ip *string `json:"Ip,omitempty" name:"Ip"`
		// 镜像名，如/tsf/nginx

		Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
		// 镜像版本名称

		TagName *string `json:"TagName,omitempty" name:"TagName"`
		// 应用Id

		ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
		// 应用名称

		ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
		// 集群id

		ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
		// 集群名称

		ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
		// 命名空间id

		NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
		// 命名空间名称

		NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
		// 机器所属groupId

		GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
		// 分组名称

		GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
		// 机器状态

		InstanceStatus *string `json:"InstanceStatus,omitempty" name:"InstanceStatus"`
		// 实例可用状态

		InstanceAvailableStatus *string `json:"InstanceAvailableStatus,omitempty" name:"InstanceAvailableStatus"`
		// 服务实例状态

		ServiceInstanceStatus *string `json:"ServiceInstanceStatus,omitempty" name:"ServiceInstanceStatus"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeContainerMicroServiceListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerMicroServiceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateFilebeatConfigRequest struct {
	*tchttp.BaseRequest

	// 通用配置的yaml文件内容

	ConfigYaml *string `json:"ConfigYaml,omitempty" name:"ConfigYaml"`
	// 配置描述

	ConfigDesc *string `json:"ConfigDesc,omitempty" name:"ConfigDesc"`
	// 配置名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置类型
	// common - 通用配置
	// business - 日志配置项
	// delivery - 日志投递项

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
	// 如果是delivery或者business 类型 关联的日志配置项或者日志投递项的id

	ConfigRelateId *string `json:"ConfigRelateId,omitempty" name:"ConfigRelateId"`
}

func (r *UpdateFilebeatConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateFilebeatConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BindPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *BindPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BindPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopAvgTimeCostServicesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TopN条目列表

		Result []*StatisticsEntry `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTopAvgTimeCostServicesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopAvgTimeCostServicesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigReleasesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 公共配置发布信息

		Result *TsfPageConfigRelease `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePublicConfigReleasesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigReleasesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisassociateFilebeatConfigRequest struct {
	*tchttp.BaseRequest

	// 配置id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组id列表

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *DisassociateFilebeatConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisassociateFilebeatConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterCpuTypeRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeClusterCpuTypeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterCpuTypeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFilebeatConfigRequest struct {
	*tchttp.BaseRequest

	// 配置id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置关联的日志配置项或者日志投递项的id

	ConfigRelateId *string `json:"ConfigRelateId,omitempty" name:"ConfigRelateId"`
	// 配置类型
	// common - 通用配置
	// business - 日志配置项
	// delivery - 日志投递项

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
}

func (r *DescribeFilebeatConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFilebeatConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InstallAgentScriptsRequest struct {
	*tchttp.BaseRequest

	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *InstallAgentScriptsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *InstallAgentScriptsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupsByScalableRuleIdV2 struct {

	// ApplicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// ApplicationName

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// GroupName

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// Status

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// UpdateTime

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 弹性伸缩规则id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

type ManagerJobLog struct {

	// 无

	Id *int64 `json:"Id,omitempty" name:"Id"`
	// 无

	JobId *int64 `json:"JobId,omitempty" name:"JobId"`
	// 无

	HandleTime *int64 `json:"HandleTime,omitempty" name:"HandleTime"`
	// 无

	HandleMsg *string `json:"HandleMsg,omitempty" name:"HandleMsg"`
	// 无

	LogStatus *int64 `json:"LogStatus,omitempty" name:"LogStatus"`
	// 无

	JobDesc *string `json:"JobDesc,omitempty" name:"JobDesc"`
}

type CreateGatewayApiResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateGatewayApiResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayApiResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageApiGroupInfo struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// API分组信息

	Content []*ApiGroupInfo `json:"Content,omitempty" name:"Content"`
}

type ExpandSubruleV2 struct {

	// Indicators

	Indicators *int64 `json:"Indicators,omitempty" name:"Indicators"`
	// IndicatorType

	IndicatorType *int64 `json:"IndicatorType,omitempty" name:"IndicatorType"`
	// RuleType

	RuleType *int64 `json:"RuleType,omitempty" name:"RuleType"`
}

type ExpandGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 扩容的机器实例ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
}

func (r *ExpandGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExpandGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindContainerGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 复杂对象

		Result *FindContainerGroupResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *FindContainerGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindContainerGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployContainerGroupByYamlRequest struct {
	*tchttp.BaseRequest

	// 容器部署组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 容器部署组的Yaml信息，包括了 service 和 deployment

	ContainerGroupYaml *string `json:"ContainerGroupYaml,omitempty" name:"ContainerGroupYaml"`
}

func (r *DeployContainerGroupByYamlRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployContainerGroupByYamlRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowAvailableTasksResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务基本信息翻页查询结果

		Result *TaskRecordSimpleInfoPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFlowAvailableTasksResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowAvailableTasksResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePathRewriteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路径重写规则对象

		Result *PathRewrite `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePathRewriteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePathRewriteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetContainGroupDeployInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回的复杂对象

		Result *GetContainGroupDeployInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetContainGroupDeployInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetContainGroupDeployInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ResourceBatchOperationDescription struct {

	// 是否强制终止变更

	EnableForcedStop *bool `json:"EnableForcedStop,omitempty" name:"EnableForcedStop"`
	// 是否存在beta批次

	EnableBeta *bool `json:"EnableBeta,omitempty" name:"EnableBeta"`
	// 批次个数

	BatchNum *uint64 `json:"BatchNum,omitempty" name:"BatchNum"`
	// 批次执行方式

	BatchExeMode *string `json:"BatchExeMode,omitempty" name:"BatchExeMode"`
	// 批次任务类型

	TaskType *uint64 `json:"TaskType,omitempty" name:"TaskType"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
}

type ContinueRunFailedTaskBatchRequest struct {
	*tchttp.BaseRequest

	// 批次ID。

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
}

func (r *ContinueRunFailedTaskBatchRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ContinueRunFailedTaskBatchRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateMultiClusterDeliveryConfigRequest struct {
	*tchttp.BaseRequest

	// 配置名

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 采集数据路径

	CollectPath []*string `json:"CollectPath,omitempty" name:"CollectPath"`
	// kafka集群地址

	KafkaAddress *string `json:"KafkaAddress,omitempty" name:"KafkaAddress"`
	// 指定kafka topic

	Topic *string `json:"Topic,omitempty" name:"Topic"`
	// 指定换行的标志

	LineRule *string `json:"LineRule,omitempty" name:"LineRule"`
	// 是否需要认证信息

	EnableAuth *bool `json:"EnableAuth,omitempty" name:"EnableAuth"`
	// 认证的用户名

	Username *string `json:"Username,omitempty" name:"Username"`
	// 认证的密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// kafka的投递信息

	KafkaInfos []*DeliveryKafkaInfo `json:"KafkaInfos,omitempty" name:"KafkaInfos"`
	// 是否应用单行配置

	EnableGlobalLineRule *bool `json:"EnableGlobalLineRule,omitempty" name:"EnableGlobalLineRule"`
	// 自定义分行配置

	CustomRule *string `json:"CustomRule,omitempty" name:"CustomRule"`
}

func (r *CreateMultiClusterDeliveryConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMultiClusterDeliveryConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerAdditionalResourceRequirementMap struct {

	// Mesh 应用部署时需要的额外资源

	M *ContainerAdditionalResourceRequirement `json:"M,omitempty" name:"M"`
	// 普通应用部署时需要的额外资源

	N *ContainerAdditionalResourceRequirement `json:"N,omitempty" name:"N"`
}

type InstanceEnrichedInfo struct {

	// 机器ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 机器名称

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 机器内网IP

	LanIp *string `json:"LanIp,omitempty" name:"LanIp"`
	// 机器外网IP

	WanIp *string `json:"WanIp,omitempty" name:"WanIp"`
	// 机器所在VPC

	VpcId *string `json:"VpcId,omitempty" name:"VpcId"`
	// 机器运行状态 Pending Running Stopped Rebooting Starting Stopping Abnormal Unknown

	InstanceStatus *string `json:"InstanceStatus,omitempty" name:"InstanceStatus"`
	// 机器可用状态（表示机器上的Agent在线）

	InstanceAvailableStatus *string `json:"InstanceAvailableStatus,omitempty" name:"InstanceAvailableStatus"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 机器所在部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
}

type TsfPageMicroserviceWrong struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 微服务列表信息

	Content []*MicroserviceWrong `json:"Content,omitempty" name:"Content"`
}

type CreateCkafkaRequest struct {
	*tchttp.BaseRequest

	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// ckafka instanceid

	CkafkaInstanceid *string `json:"CkafkaInstanceid,omitempty" name:"CkafkaInstanceid"`
	// ckafka topicid

	CkafkaTopicid *string `json:"CkafkaTopicid,omitempty" name:"CkafkaTopicid"`
}

func (r *CreateCkafkaRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateCkafkaRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePodInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询的权限数据对象

		Result *GroupPodResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePodInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePodInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AddInstancesRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 云主机ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
	// 操作系统名称

	OsName *string `json:"OsName,omitempty" name:"OsName"`
	// 操作系统镜像ID

	ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
	// 重装系统密码设置

	Password *string `json:"Password,omitempty" name:"Password"`
	// 重装系统，关联密钥设置

	KeyId *string `json:"KeyId,omitempty" name:"KeyId"`
	// 安全组设置

	SgId *string `json:"SgId,omitempty" name:"SgId"`
	// 云主机导入方式，虚拟机集群必填，容器集群不填写此字段，R：重装TSF系统镜像，M：手动安装agent

	InstanceImportMode *string `json:"InstanceImportMode,omitempty" name:"InstanceImportMode"`
	// 安全组id

	SecurityGroupIds *string `json:"SecurityGroupIds,omitempty" name:"SecurityGroupIds"`
}

func (r *AddInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AddInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiRateLimitRule struct {

	// rule Id

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// API ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// 限流名称

	RuleName *string `json:"RuleName,omitempty" name:"RuleName"`
	// 最大限流qps

	MaxQps *uint64 `json:"MaxQps,omitempty" name:"MaxQps"`
	// 生效/禁用, enabled/disabled

	UsableStatus *string `json:"UsableStatus,omitempty" name:"UsableStatus"`
	// 规则内容

	RuleContent *string `json:"RuleContent,omitempty" name:"RuleContent"`
	// Tsf Rule ID

	TsfRuleId *string `json:"TsfRuleId,omitempty" name:"TsfRuleId"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 创建时间

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 更新时间

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
}

type DescribeReleaseTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 发布单模板类型

		TemplateType *string `json:"TemplateType,omitempty" name:"TemplateType"`
		// 分批发布

		BatchTemplate *BatchTemplate `json:"BatchTemplate,omitempty" name:"BatchTemplate"`
		// 蓝绿发布

		BlueGreenTemplate *BlueGreenTemplate `json:"BlueGreenTemplate,omitempty" name:"BlueGreenTemplate"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleaseTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleaseTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowBatchEdge struct {

	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 工作流批次 ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 工作流批次历史 ID

	FlowBatchLogId *string `json:"FlowBatchLogId,omitempty" name:"FlowBatchLogId"`
	// 批次 ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 批次历史 ID

	BatchLogId *string `json:"BatchLogId,omitempty" name:"BatchLogId"`
	// 图 ID

	GraphId *string `json:"GraphId,omitempty" name:"GraphId"`
	// 节点 ID

	NodeId *string `json:"NodeId,omitempty" name:"NodeId"`
	// 子节点 ID

	ChildNodeId *string `json:"ChildNodeId,omitempty" name:"ChildNodeId"`
	// 是否核心节点

	CoreNode *string `json:"CoreNode,omitempty" name:"CoreNode"`
	// 节点名称

	NodeName *string `json:"NodeName,omitempty" name:"NodeName"`
	// 边节点类型

	EdgeType *string `json:"EdgeType,omitempty" name:"EdgeType"`
	// 节点类型

	NodeType *string `json:"NodeType,omitempty" name:"NodeType"`
	// 节点执行成功率

	SuccessRatio *int64 `json:"SuccessRatio,omitempty" name:"SuccessRatio"`
	// X轴坐标

	PositionX *string `json:"PositionX,omitempty" name:"PositionX"`
	// Y轴坐标

	PositionY *string `json:"PositionY,omitempty" name:"PositionY"`
	// 节点状态

	State *string `json:"State,omitempty" name:"State"`
	// 任务节点ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务节点历史ID

	TaskLogId *string `json:"TaskLogId,omitempty" name:"TaskLogId"`
}

type ModifyPathRewriteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyPathRewriteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyPathRewriteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteApiAccessRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DeleteApiAccessRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteApiAccessRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// 日志配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DeleteBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeManagerLicensesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 许可标签列表分页信息

		Result *TsfPageLicenseTag `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeManagerLicensesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeManagerLicensesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiVersionArray struct {

	// App ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// App 名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// App 包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
}

type RouteAffinity struct {

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 就近访问策略是否开启

	Affinity *bool `json:"Affinity,omitempty" name:"Affinity"`
	// 就近访问策略ID

	AffinityId *string `json:"AffinityId,omitempty" name:"AffinityId"`
	// 就近访问策略更新时间

	UpdateTimestamp *string `json:"UpdateTimestamp,omitempty" name:"UpdateTimestamp"`
}

type ScalableRuleAttribute struct {

	// RuleId值

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// Name值

	Name *string `json:"Name,omitempty" name:"Name"`
	// EnableShrink值

	EnableShrink *int64 `json:"EnableShrink,omitempty" name:"EnableShrink"`
	// EnableExpand值

	EnableExpand *int64 `json:"EnableExpand,omitempty" name:"EnableExpand"`
	// ExpandPeriod值

	ExpandPeriod *int64 `json:"ExpandPeriod,omitempty" name:"ExpandPeriod"`
	// ShrinkPeriod值

	ShrinkPeriod *int64 `json:"ShrinkPeriod,omitempty" name:"ShrinkPeriod"`
	// ExpandVmCount值

	ExpandVmCount *int64 `json:"ExpandVmCount,omitempty" name:"ExpandVmCount"`
	// ShrinkVmCount值

	ShrinkVmCount *int64 `json:"ShrinkVmCount,omitempty" name:"ShrinkVmCount"`
	// CoolTime值

	CoolTime *int64 `json:"CoolTime,omitempty" name:"CoolTime"`
	// ExpandVmCountLimit值

	ExpandVmCountLimit *int64 `json:"ExpandVmCountLimit,omitempty" name:"ExpandVmCountLimit"`
	// ShrinkVmCountLimit值

	ShrinkVmCountLimit *int64 `json:"ShrinkVmCountLimit,omitempty" name:"ShrinkVmCountLimit"`
	// ExpandSubruleList值

	ExpandSubruleList []*ExpandSubrule `json:"ExpandSubruleList,omitempty" name:"ExpandSubruleList"`
	// ShrinkSubruleList值

	ShrinkSubruleList []*ExpandSubrule `json:"ShrinkSubruleList,omitempty" name:"ShrinkSubruleList"`
	// CreateTime值

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// UpdateTime值

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 备注

	Desc *string `json:"Desc,omitempty" name:"Desc"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 开启定时伸缩规则, 默认0, 0:关闭定时伸缩 1:开启定时伸缩

	EnableCronAS *uint64 `json:"EnableCronAS,omitempty" name:"EnableCronAS"`
	// 是否关闭指标伸缩, 默认0, 0:打开指标伸缩 1:关闭指标伸缩

	DisableMetricAS *uint64 `json:"DisableMetricAS,omitempty" name:"DisableMetricAS"`
	// 定时伸缩规则列表

	CronRuleList []*CronRule `json:"CronRuleList,omitempty" name:"CronRuleList"`
}

type CreateMicroserviceWithDetailRespRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务描述信息

	MicroserviceDesc *string `json:"MicroserviceDesc,omitempty" name:"MicroserviceDesc"`
}

func (r *CreateMicroserviceWithDetailRespRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMicroserviceWithDetailRespRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterUsageResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群资源统计数据

		Result *OverviewClusterResourceUsage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterUsageResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterUsageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务详情

		Task *ReleaseTask `json:"Task,omitempty" name:"Task"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasePipelineTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateNamespaceRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 命名空间描述

	NamespaceDesc *string `json:"NamespaceDesc,omitempty" name:"NamespaceDesc"`
	// 命名空间资源类型(默认值为DEF)

	NamespaceResourceType *string `json:"NamespaceResourceType,omitempty" name:"NamespaceResourceType"`
	// 是否是全局命名空间(默认是DEF，表示普通命名空间；GLOBAL表示全局命名空间)

	NamespaceType *string `json:"NamespaceType,omitempty" name:"NamespaceType"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 是否开启高可用

	IsHaEnable *string `json:"IsHaEnable,omitempty" name:"IsHaEnable"`
	// 需要绑定的数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
	// 是否创建k8s命名空间，默认是

	CreateK8sNamespaceFlag *bool `json:"CreateK8sNamespaceFlag,omitempty" name:"CreateK8sNamespaceFlag"`
}

func (r *CreateNamespaceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateNamespaceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventDimensionRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeEventDimensionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventDimensionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupAddibleInstancesRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *DescribeGroupAddibleInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupAddibleInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchRealtimeBusinessLogRequest struct {
	*tchttp.BaseRequest

	// 日志配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组ID列表

	GroupIds []*string `json:"GroupIds,omitempty" name:"GroupIds"`
	// 实例ID列表

	InstanceIds []*string `json:"InstanceIds,omitempty" name:"InstanceIds"`
	// 实时日志基准时间戳

	RealtimeTs *uint64 `json:"RealtimeTs,omitempty" name:"RealtimeTs"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
}

func (r *SearchRealtimeBusinessLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchRealtimeBusinessLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateProductNewsRequest struct {
	*tchttp.BaseRequest

	// 内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 链接

	Link *string `json:"Link,omitempty" name:"Link"`
	// 排序

	Order *int64 `json:"Order,omitempty" name:"Order"`
	// 样式Flag

	StyleFlag *string `json:"StyleFlag,omitempty" name:"StyleFlag"`
	// 是否有效

	Valid *int64 `json:"Valid,omitempty" name:"Valid"`
	// 标题

	Title *string `json:"Title,omitempty" name:"Title"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
	// 页面位置。多个可以逗号隔开aa,bb

	Page *string `json:"Page,omitempty" name:"Page"`
}

func (r *CreateProductNewsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateProductNewsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindContainerGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *FindContainerGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindContainerGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UnitRuleReleaseHistory struct {

	// 主键ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 单元化规则ID

	UnitRuleId *string `json:"UnitRuleId,omitempty" name:"UnitRuleId"`
	// 发布状态

	ReleaseStatus *string `json:"ReleaseStatus,omitempty" name:"ReleaseStatus"`
	// 发布进度

	ReleaseProgress *float64 `json:"ReleaseProgress,omitempty" name:"ReleaseProgress"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 创建时间

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 修改时间

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 单元化规则发布历史详情列表

	DetailList []*UnitRuleReleaseHistoryDetail `json:"DetailList,omitempty" name:"DetailList"`
	// 单元化规则item

	UnitRuleItemList []*UnitRuleItem `json:"UnitRuleItemList,omitempty" name:"UnitRuleItemList"`
}

type DescribeCircuitBreakerRulesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 熔断规则列表

		Result *CircuitBreakerRules `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeCircuitBreakerRulesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCircuitBreakerRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchMeshLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 标准输出日志列表

		Result *TsfPageMeshLog `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchMeshLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchMeshLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupDailyUseStatistics struct {

	// 总调用数

	TopReqAmount []*GroupUseStatisticsEntity `json:"TopReqAmount,omitempty" name:"TopReqAmount"`
	// 平均错误率

	TopFailureRate []*GroupUseStatisticsEntity `json:"TopFailureRate,omitempty" name:"TopFailureRate"`
	// 平均响应耗时

	TopAvgTimeCost []*GroupUseStatisticsEntity `json:"TopAvgTimeCost,omitempty" name:"TopAvgTimeCost"`
}

type Role struct {

	// 角色ID

	RoleId *string `json:"RoleId,omitempty" name:"RoleId"`
	// 角色名称

	RoleName *string `json:"RoleName,omitempty" name:"RoleName"`
	// 角色描述

	RoleDesc *string `json:"RoleDesc,omitempty" name:"RoleDesc"`
	// 删除标识

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 角色权限集列表

	PermCatList []*PermCat `json:"PermCatList,omitempty" name:"PermCatList"`
	// 创建时间

	CreationTime *int64 `json:"CreationTime,omitempty" name:"CreationTime"`
	// 最后更新时间

	LastUpdateTime *int64 `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
}

type FindDeployModuleLogRequest struct {
	*tchttp.BaseRequest

	// InstanceId

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// ModuleId

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
}

func (r *FindDeployModuleLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindDeployModuleLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUnitApiUseDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 单元化使用统计对象

		Result *GroupUnitApiUseStatistics `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUnitApiUseDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitApiUseDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApplicationConfig struct {

	// 配置名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 配置ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

type TxRetry struct {

	// 重试成功的事务ID列表

	Success []*string `json:"Success,omitempty" name:"Success"`
	// 重试失败的事务ID列表

	Missing []*string `json:"Missing,omitempty" name:"Missing"`
	// 重试异常信息

	Error *TxError `json:"Error,omitempty" name:"Error"`
}

type DescribeSpanDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 调用链详情数据

		Result []*TraceSpanDetail `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSpanDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSpanDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RollbackPublicConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项发布历史ID

	ConfigReleaseLogId *string `json:"ConfigReleaseLogId,omitempty" name:"ConfigReleaseLogId"`
	// 回滚描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
}

func (r *RollbackPublicConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RollbackPublicConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskExecuteShardArgumentResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分片参数

		Result *ShardArgument `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskExecuteShardArgumentResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteShardArgumentResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFileConfigReleasesRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeFileConfigReleasesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigReleasesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RemoveInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群移除机器是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RemoveInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RemoveInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateAuthorizationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：创建成功；false：创建失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateAuthorizationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAuthorizationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEnabledUnitRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 单元化规则对象

		Result *UnitRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeEnabledUnitRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEnabledUnitRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type LicenseFunction struct {

	// 功能名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 是否启用

	Enable *bool `json:"Enable,omitempty" name:"Enable"`
}

type StopBuildTaskRequest struct {
	*tchttp.BaseRequest

	// 构建任务id

	BuildTaskId *string `json:"BuildTaskId,omitempty" name:"BuildTaskId"`
}

func (r *StopBuildTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopBuildTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageStdoutLogV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 标准输出日志列表

	Content []*StdoutLogV2 `json:"Content,omitempty" name:"Content"`
	// 游标ID

	ScrollId *string `json:"ScrollId,omitempty" name:"ScrollId"`
	// 查询状态

	Status *string `json:"Status,omitempty" name:"Status"`
}

type DescribeGroupBindedGatewaysRequest struct {
	*tchttp.BaseRequest

	// API 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeGroupBindedGatewaysRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupBindedGatewaysRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNodeMonitorResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 节点监控详情

		Result *ResourceMonitor `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeNodeMonitorResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNodeMonitorResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PushMultiCloudUnitInfoRequest struct {
	*tchttp.BaseRequest

	// 网关实例ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 单元架构配置

	UnitGatewayConfigs []*MultiCloudUnitGatewayConfig `json:"UnitGatewayConfigs,omitempty" name:"UnitGatewayConfigs"`
}

func (r *PushMultiCloudUnitInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *PushMultiCloudUnitInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群

		Result *ClusterV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApiStatusResponse struct {

	// API 状态：0:离线，1:在线

	Status *int64 `json:"Status,omitempty" name:"Status"`
}

type MetricSummary struct {

	// 统计指标平均值

	AverageValue *MetricStatistic `json:"AverageValue,omitempty" name:"AverageValue"`
	// 网关指标监控数据曲线集合

	MetricData []*MetricDataCurve `json:"MetricData,omitempty" name:"MetricData"`
}

type TsfPageConfig struct {

	// TsfPageConfig

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置项列表

	Content []*Config `json:"Content,omitempty" name:"Content"`
}

type DescribeApiGroupRequest struct {
	*tchttp.BaseRequest

	// API 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeApiGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 发布单信息分页

		Result *TsfPageRelease `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteDeliveryConfigRequest struct {
	*tchttp.BaseRequest

	// 投递配置项id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DeleteDeliveryConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteDeliveryConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFilebeatConfigGroupRequest struct {
	*tchttp.BaseRequest

	// 配置id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeFilebeatConfigGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFilebeatConfigGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayInstanceRequest struct {
	*tchttp.BaseRequest

	// 网关实例ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 是否返回consul在线实例数

	WithConsulInstanceCount *bool `json:"WithConsulInstanceCount,omitempty" name:"WithConsulInstanceCount"`
}

func (r *DescribeGatewayInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeAuthorizationsRequest struct {
	*tchttp.BaseRequest

	// 规则ID，不传入时查询全量

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 是否生效，不传入时查询全量

	IsEnabled *string `json:"IsEnabled,omitempty" name:"IsEnabled"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 过滤鉴权规则类型，B 为黑名单，W 为白名单，其他为全部

	Type *string `json:"Type,omitempty" name:"Type"`
	// 是否校验Type，新版本都需要校验，false 或不填时兼容老场景

	TypeCheck *bool `json:"TypeCheck,omitempty" name:"TypeCheck"`
}

func (r *DescribeAuthorizationsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskLastStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务上一次执行状态

		Result *TaskLastExecuteStatus `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskLastStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskLastStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetJvmMonitorMethodProfileResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务下发成功/失败描述

		Result *ResultStatus `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SetJvmMonitorMethodProfileResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetJvmMonitorMethodProfileResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CloudMonitorPolicies struct {

	// keywordsId

	KeywordsId *string `json:"KeywordsId,omitempty" name:"KeywordsId"`
	// keyWords

	KeyWords *string `json:"KeyWords,omitempty" name:"KeyWords"`
	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// groupName

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// namespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// namespaceName

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// applicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// applicationName

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// clusterId

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// clusterName

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
}

type RouteDestV2 struct {

	// 路由规则项路由目标ID

	DestId *string `json:"DestId,omitempty" name:"DestId"`
	// 路由目标权重

	DestWeight *int64 `json:"DestWeight,omitempty" name:"DestWeight"`
	// 路由目标匹配条件列表

	DestItemList []*RouteDestItemV2 `json:"DestItemList,omitempty" name:"DestItemList"`
	// 服务路由目标所属路由规则项ID

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
}

type VmGroupSimpleV2 struct {

	// 部署组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 部署组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 部署组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 部署组启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 部署组创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
}

type DescribeGroupAttributeRequest struct {
	*tchttp.BaseRequest

	// 部署组ID字段

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeGroupAttributeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupAttributeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyMonitorStatisticsPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 修改结果true：修改成功；false：修改失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyMonitorStatisticsPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyMonitorStatisticsPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ChangeApiUsableStatusRequest struct {
	*tchttp.BaseRequest

	// API ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// 切换状态，enabled/disabled

	UsableStatus *string `json:"UsableStatus,omitempty" name:"UsableStatus"`
}

func (r *ChangeApiUsableStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ChangeApiUsableStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSidecarFiltersResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 过滤器列表

		Result *SidecarFilters `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSidecarFiltersResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSidecarFiltersResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayVo struct {

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 网关部署组名称

	GatewayDeployGroupName *string `json:"GatewayDeployGroupName,omitempty" name:"GatewayDeployGroupName"`
	// API 分组个数

	GroupNum *uint64 `json:"GroupNum,omitempty" name:"GroupNum"`
	// API 分组列表

	Groups []*GatewayApiGroupVo `json:"Groups,omitempty" name:"Groups"`
}

type SearchOssStaticBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 业务日志列表

		Result *TsfPageBusinessLogV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchOssStaticBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssStaticBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateFilebeatConfigRequest struct {
	*tchttp.BaseRequest

	// 配置内容

	ConfigYaml *string `json:"ConfigYaml,omitempty" name:"ConfigYaml"`
	// 配置名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置类型
	// common - 通用配置
	// business - 日志配置项
	// delivery - 日志投递项

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
	// 配置描述

	ConfigDesc *string `json:"ConfigDesc,omitempty" name:"ConfigDesc"`
	// 如果是delivery或者business 类型 关联的日志配置项或者日志投递项的id

	ConfigRelateId *string `json:"ConfigRelateId,omitempty" name:"ConfigRelateId"`
}

func (r *CreateFilebeatConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateFilebeatConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupEnvResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 虚拟机部署组环境变量

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupEnvResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupEnvResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableFallbackRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 启用微服务路由保护策略操作是否成功。
		// true：操作成功。
		// false：操作失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableFallbackRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableFallbackRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupGatewaysRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeGroupGatewaysRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupGatewaysRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinessLogPatternAnalysis struct {

	// 校验/解析是否成功

	Success *bool `json:"Success,omitempty" name:"Success"`
	// 校验/解析用户提示，包含校验不通过的原因，是否成功联动调用链等

	Hint *string `json:"Hint,omitempty" name:"Hint"`
	// 解析结果，复用Envs对象，本质是一个Map<String, String>

	AnalyzeResult []*EnvsV2 `json:"AnalyzeResult,omitempty" name:"AnalyzeResult"`
}

type DisableTaskFlowRequest struct {
	*tchttp.BaseRequest

	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
}

func (r *DisableTaskFlowRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableTaskFlowRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ClearResourceDataRequest struct {
	*tchttp.BaseRequest

	// 资源类型，支持以下几个值，"ES"，"CTSDB"，"CONSUL"，"REDIS"

	ResourceType *string `json:"ResourceType,omitempty" name:"ResourceType"`
	// 开始清理的时间点。0：清理全部，1：清理当天的数据，7：清理一周前到今天的数据。

	ClearedTime *uint64 `json:"ClearedTime,omitempty" name:"ClearedTime"`
}

func (r *ClearResourceDataRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ClearResourceDataRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyModuleConfResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyModuleConfResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyModuleConfResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayPluginTypesRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeGatewayPluginTypesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayPluginTypesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskDetailRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务历史ID

	TaskLogId *string `json:"TaskLogId,omitempty" name:"TaskLogId"`
}

func (r *DescribeTaskDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 发布结果，true：成功；false：失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ReleaseBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AdjustProductHelpPriorityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AdjustProductHelpPriorityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AdjustProductHelpPriorityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateAlarmPolicyRequest struct {
	*tchttp.BaseRequest

	// 告警订阅策略名

	PolicyName *string `json:"PolicyName,omitempty" name:"PolicyName"`
	// 告警订阅策略对应的事件

	EventPolicies []*EventPolicyResult `json:"EventPolicies,omitempty" name:"EventPolicies"`
	// 是否开通邮件告警 0 : off ; 1 : on;

	EnabledEmail *int64 `json:"EnabledEmail,omitempty" name:"EnabledEmail"`
	// 是否开通电话告警 0 : off ; 1 : on;

	EnabledSMS *int64 `json:"EnabledSMS,omitempty" name:"EnabledSMS"`
	// 是否开通rtx告警 0 : off ; 1 : on;

	EnabledRtx *int64 `json:"EnabledRtx,omitempty" name:"EnabledRtx"`
	// 冗余字段

	Enabled *int64 `json:"Enabled,omitempty" name:"Enabled"`
	// 是否开通wechat告警 0 : off ; 1 : on;

	EnabledWeChat *int64 `json:"EnabledWeChat,omitempty" name:"EnabledWeChat"`
	// 告警接收人员列表

	Persons []*Person `json:"Persons,omitempty" name:"Persons"`
}

func (r *CreateAlarmPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAlarmPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLaneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 泳道

		Result *LaneInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLaneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyModuleConfRequest struct {
	*tchttp.BaseRequest

	// ModuleId

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// ExternalVip

	ExternalVip *string `json:"ExternalVip,omitempty" name:"ExternalVip"`
	// InternalVip

	InternalVip *string `json:"InternalVip,omitempty" name:"InternalVip"`
	// Vports

	Vports []*VportTypeResult `json:"Vports,omitempty" name:"Vports"`
	// Password

	Password *string `json:"Password,omitempty" name:"Password"`
}

func (r *ModifyModuleConfRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyModuleConfRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetDefaultValueResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 按照入参返回的默认值

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetDefaultValueResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetDefaultValueResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventTrendRequest struct {
	*tchttp.BaseRequest

	// 查询开始时间，格式为 yyyy-MM-dd HH:mm:ss

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询开始时间，格式为 yyyy-MM-dd HH:mm:ss

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 事件过滤器

	Filters []*EventFilter `json:"Filters,omitempty" name:"Filters"`
}

func (r *DescribeEventTrendRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventTrendRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageAppIdEntity struct {

	// TsfPageAppIdEntity

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 租户ID列表

	Content *AppIdEntity `json:"Content,omitempty" name:"Content"`
}

type OverviewGroupResourceUsage struct {

	// 部署组总数

	GroupCount *uint64 `json:"GroupCount,omitempty" name:"GroupCount"`
	// 运行部署组总数

	RunGroupCount *uint64 `json:"RunGroupCount,omitempty" name:"RunGroupCount"`
	// 停止中部署组总数

	StopGroupCount *uint64 `json:"StopGroupCount,omitempty" name:"StopGroupCount"`
	// 异常部署组总数

	AbnormalGroupCount *uint64 `json:"AbnormalGroupCount,omitempty" name:"AbnormalGroupCount"`
}

type SidecarFilterGroup struct {

	// 部署组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 过滤器Id

	FilterId *string `json:"FilterId,omitempty" name:"FilterId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 部署组所在命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 部署组所在名称空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
}

type DescribeResourceConfigLicenseResource struct {

	// Name

	Name *string `json:"Name,omitempty" name:"Name"`
	// Quota

	Quota *uint64 `json:"Quota,omitempty" name:"Quota"`
}

type TemplateResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*TemplateProject `json:"Content,omitempty" name:"Content"`
}

type GetTopFailureRateServicesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TopN条目列表

		Result []*StatisticsEntry `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTopFailureRateServicesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopFailureRateServicesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePriceRequest struct {
	*tchttp.BaseRequest

	// 规格

	Spec *string `json:"Spec,omitempty" name:"Spec"`
	// 节点数

	NodeSize *int64 `json:"NodeSize,omitempty" name:"NodeSize"`
	// 时间跨度

	TimeSpan *int64 `json:"TimeSpan,omitempty" name:"TimeSpan"`
	// 时间单位

	TimeUnit *int64 `json:"TimeUnit,omitempty" name:"TimeUnit"`
	// 商品类别Id

	GoodsCategoryId *int64 `json:"GoodsCategoryId,omitempty" name:"GoodsCategoryId"`
	// 货币

	Currency *string `json:"Currency,omitempty" name:"Currency"`
	// 活动Id

	ActivityId *string `json:"ActivityId,omitempty" name:"ActivityId"`
	// 付费模式：0表示按需计费/后付费，1表示预付费 2 表示预留实例

	PayMode *int64 `json:"PayMode,omitempty" name:"PayMode"`
}

func (r *DescribePriceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePriceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperationInfoDetail struct {

	// 不显示的原因

	DisabledReason *string `json:"DisabledReason,omitempty" name:"DisabledReason"`
	// 该按钮是否可点击

	Enabled *bool `json:"Enabled,omitempty" name:"Enabled"`
	// 是否显示该按钮

	Supported *bool `json:"Supported,omitempty" name:"Supported"`
}

type DescribeTaskBatchRecordResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 批次历史信息

		Result *TaskBatchRecord `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskBatchRecordResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskBatchRecordResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ViewInfo struct {

	// 命名空间信息

	NamespaceInfos *NamespaceInfos `json:"NamespaceInfos,omitempty" name:"NamespaceInfos"`
	// 视图名称

	ViewName *string `json:"ViewName,omitempty" name:"ViewName"`
	// 视图id

	ViewId *string `json:"ViewId,omitempty" name:"ViewId"`
}

type InvocationStatisticsRatio struct {

	// 当前统计数据

	InvocationCurrentStatistics *InvocationStatisticsV2 `json:"InvocationCurrentStatistics,omitempty" name:"InvocationCurrentStatistics"`
	// 目标统计数据

	InvocationTargetStatistics *InvocationStatisticsV2 `json:"InvocationTargetStatistics,omitempty" name:"InvocationTargetStatistics"`
	// 请求总数对比

	InvocationSumQuantityRatio *float64 `json:"InvocationSumQuantityRatio,omitempty" name:"InvocationSumQuantityRatio"`
	// 请求平均耗时对比

	InvocationAvgDurationRatio *float64 `json:"InvocationAvgDurationRatio,omitempty" name:"InvocationAvgDurationRatio"`
	// 2xx状态码响应请求数对比

	Invocation2xxStatusQuantityRatio *float64 `json:"Invocation2xxStatusQuantityRatio,omitempty" name:"Invocation2xxStatusQuantityRatio"`
	// 4xx状态码响应请求数对比

	Invocation4xxStatusQuantityRatio *float64 `json:"Invocation4xxStatusQuantityRatio,omitempty" name:"Invocation4xxStatusQuantityRatio"`
	// 5xx状态码响应请求数对比

	Invocation5xxStatusQuantityRatio *float64 `json:"Invocation5xxStatusQuantityRatio,omitempty" name:"Invocation5xxStatusQuantityRatio"`
	// 其它状态码响应请求数对比

	InvocationOtherStatusQuantityRatio *float64 `json:"InvocationOtherStatusQuantityRatio,omitempty" name:"InvocationOtherStatusQuantityRatio"`
	// 连接失败请求数对比

	InvocationConnectFailedQuantityRatio *float64 `json:"InvocationConnectFailedQuantityRatio,omitempty" name:"InvocationConnectFailedQuantityRatio"`
	// 超时请求数对比

	InvocationTimeoutQuantityRatio *float64 `json:"InvocationTimeoutQuantityRatio,omitempty" name:"InvocationTimeoutQuantityRatio"`
	// 服务不可用请求数对比

	InvocationUnavailableQuantityRatio *float64 `json:"InvocationUnavailableQuantityRatio,omitempty" name:"InvocationUnavailableQuantityRatio"`
}

type WeightRouteItemList struct {

	// 权重路由规则项Id

	WeightRouteId *string `json:"WeightRouteId,omitempty" name:"WeightRouteId"`
	// 权重路由，百分比字段

	SourcePercent *int64 `json:"SourcePercent,omitempty" name:"SourcePercent"`
	// 权重路由规则匹配目标字段

	TargetField *string `json:"TargetField,omitempty" name:"TargetField"`
	// 权重路由规则匹配目标取值

	TargetValue *string `json:"TargetValue,omitempty" name:"TargetValue"`
	// 权重路由规则所属路由Id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
}

type ModifyNamespaceCodeRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间编码

	NamespaceCode *string `json:"NamespaceCode,omitempty" name:"NamespaceCode"`
}

func (r *ModifyNamespaceCodeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyNamespaceCodeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateSidecarFilterRequest struct {
	*tchttp.BaseRequest

	// 过滤器Id

	FilterId *string `json:"FilterId,omitempty" name:"FilterId"`
	// 过滤器名称

	FilterName *string `json:"FilterName,omitempty" name:"FilterName"`
	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 作用位置

	WorkPosition *string `json:"WorkPosition,omitempty" name:"WorkPosition"`
	// 被调服务名，多个服务名时使用逗号分隔

	TargetServiceNames *string `json:"TargetServiceNames,omitempty" name:"TargetServiceNames"`
	// lua脚本值

	LuaValue *string `json:"LuaValue,omitempty" name:"LuaValue"`
}

func (r *UpdateSidecarFilterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateSidecarFilterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyInstanceNamespaceRequest struct {
	*tchttp.BaseRequest

	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 机器id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *ModifyInstanceNamespaceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyInstanceNamespaceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerEnvRequest struct {
	*tchttp.BaseRequest

	// 容器部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeContainerEnvRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerEnvRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlameGraphRequest struct {
	*tchttp.BaseRequest

	// 查询的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 是否需要压缩数据

	Compression *bool `json:"Compression,omitempty" name:"Compression"`
}

func (r *DescribeFlameGraphRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlameGraphRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetResourceBatchIndexResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 获取执行批次索引的描述

		Result *ResourceGetBatchIndexResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetResourceBatchIndexResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetResourceBatchIndexResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RunMsApiRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// API 路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// API 方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// API 的 ContentType

	ContentType *string `json:"ContentType,omitempty" name:"ContentType"`
	// API 的 header 参数

	RequestHeader *string `json:"RequestHeader,omitempty" name:"RequestHeader"`
	// API 的 query 参数

	RequestQuery *string `json:"RequestQuery,omitempty" name:"RequestQuery"`
	// API 的 path 参数

	RequestPath *string `json:"RequestPath,omitempty" name:"RequestPath"`
	// API 的 body 参数（前端拼装为 json array 形式）

	RequestBodyDict *string `json:"RequestBodyDict,omitempty" name:"RequestBodyDict"`
	// API 的 body 参数（用户直接填写）

	RequestBody *string `json:"RequestBody,omitempty" name:"RequestBody"`
}

func (r *RunMsApiRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RunMsApiRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteServiceInstancesRequest struct {
	*tchttp.BaseRequest

	// InstanceIds

	InstanceIds []*string `json:"InstanceIds,omitempty" name:"InstanceIds"`
}

func (r *DeleteServiceInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteServiceInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayApisRequest struct {
	*tchttp.BaseRequest

	// 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 搜索关键字，支持 API path

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页的记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
}

func (r *DescribeGatewayApisRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayApisRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeProgramResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 数据集

		Result *Program `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeProgramResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeProgramResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteImageTagsRequest struct {
	*tchttp.BaseRequest

	// 镜像版本数组

	ImageTags []*DeleteImageTag `json:"ImageTags,omitempty" name:"ImageTags"`
	// 企业: tcr ；个人: personal或者不填

	RepoType *string `json:"RepoType,omitempty" name:"RepoType"`
}

func (r *DeleteImageTagsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteImageTagsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUserPurchaseInfoRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeUserPurchaseInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUserPurchaseInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageAuthorizationV2 struct {

	// 鉴权规则是否被启用

	IsEnabled *bool `json:"IsEnabled,omitempty" name:"IsEnabled"`
	// 鉴权规则列表

	Conditions []*AuthCondition `json:"Conditions,omitempty" name:"Conditions"`
}

type DeleteTsfZoneRequest struct {
	*tchttp.BaseRequest

	// tZoneId

	TZoneId *string `json:"TZoneId,omitempty" name:"TZoneId"`
}

func (r *DeleteTsfZoneRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteTsfZoneRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindServiceMonitorObjectRequest struct {
	*tchttp.BaseRequest

	// NamespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// MicroserviceName

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
}

func (r *FindServiceMonitorObjectRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindServiceMonitorObjectRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EventCategoryResult struct {

	// 事件类型

	Category *string `json:"Category,omitempty" name:"Category"`
	// 数量

	Count *int64 `json:"Count,omitempty" name:"Count"`
	// 事件名列表

	Names []*TsfEventAttribute `json:"Names,omitempty" name:"Names"`
}

type TxErrorV2 struct {

	// 错误码

	Code *string `json:"Code,omitempty" name:"Code"`
	// 错误信息

	Message *string `json:"Message,omitempty" name:"Message"`
}

type MetricDimension struct {

	// 指标维度名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 指标维度取值

	Value *string `json:"Value,omitempty" name:"Value"`
}

type DisableLaneRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableLaneRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableLaneRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RepositoryList struct {

	// 仓库总量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 仓库信息列表

	Content []*RepositoryInfo `json:"Content,omitempty" name:"Content"`
}

type CreateWildCardGatewayApiResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateWildCardGatewayApiResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateWildCardGatewayApiResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GraphNodeV2 struct {

	// 节点服务名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 节点服务类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 节点服务总请求量

	ReqTotalQty *uint64 `json:"ReqTotalQty,omitempty" name:"ReqTotalQty"`
	// 节点请求平均数，次每分钟，两位小数

	ReqAvgQty *float64 `json:"ReqAvgQty,omitempty" name:"ReqAvgQty"`
	// 节点请求成功率，两位小数

	ReqSuccessRate *float64 `json:"ReqSuccessRate,omitempty" name:"ReqSuccessRate"`
	// 节点请求平均耗时，单位毫秒，两位小数

	ReqAvgDuration *float64 `json:"ReqAvgDuration,omitempty" name:"ReqAvgDuration"`
	// 节点服务为目的的边列表（入度）

	EdgeList []*GraphEdgeV2 `json:"EdgeList,omitempty" name:"EdgeList"`
	// 节点标识符

	Id *string `json:"Id,omitempty" name:"Id"`
	// 节点命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

type DescribeInterfaceRequestRequest struct {
	*tchttp.BaseRequest

	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 请求路径模版

	Path *string `json:"Path,omitempty" name:"Path"`
	// 方法名

	Method *string `json:"Method,omitempty" name:"Method"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 展示条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeInterfaceRequestRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInterfaceRequestRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetContainGroupDeployInfoV2 struct {

	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动的实例数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 预分配cpu 核数，如0.2，

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 最大分配cpu 核数，如0.6

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 预分配内存M数

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 最大分配内存M数

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 数组

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// jvm参数

	JvmOpts *string `json:"JvmOpts,omitempty" name:"JvmOpts"`
	// 无用

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 无用

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 无用

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 无用

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 无用

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 无用

	KuberneteApiServer *string `json:"KuberneteApiServer,omitempty" name:"KuberneteApiServer"`
	// 无用

	KuberneteUser *string `json:"KuberneteUser,omitempty" name:"KuberneteUser"`
	// 无用

	KubernetePassword *string `json:"KubernetePassword,omitempty" name:"KubernetePassword"`
	// 无用

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 无用

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 无用

	GroupComment *string `json:"GroupComment,omitempty" name:"GroupComment"`
	// 无用

	PodId *string `json:"PodId,omitempty" name:"PodId"`
	// 无用

	PodName *string `json:"PodName,omitempty" name:"PodName"`
	// 无用

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// 无用

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// 无用

	NodePort *string `json:"NodePort,omitempty" name:"NodePort"`
	// 无用

	IsStop *string `json:"IsStop,omitempty" name:"IsStop"`
	// 无用

	Status *string `json:"Status,omitempty" name:"Status"`
	// 无用

	Message *string `json:"Message,omitempty" name:"Message"`
	// 无用

	ChangType *int64 `json:"ChangType,omitempty" name:"ChangType"`
	// 无用

	ChangNum *int64 `json:"ChangNum,omitempty" name:"ChangNum"`
	// 无用

	IsFirst *int64 `json:"IsFirst,omitempty" name:"IsFirst"`
	// 无用

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 无用

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 无用

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 无用

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// 无用

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 无用

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 无用

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
}

type DeleteLaneGroupRequest struct {
	*tchttp.BaseRequest

	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 泳道部署组列表

	LaneGroupList []*LaneGroup `json:"LaneGroupList,omitempty" name:"LaneGroupList"`
}

func (r *DeleteLaneGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteLaneGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateSidecarFilterResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true  false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateSidecarFilterResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateSidecarFilterResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteGroupSecretResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteGroupSecretResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGroupSecretResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupsRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 部署组资源类型列表

	GroupResourceTypeList []*string `json:"GroupResourceTypeList,omitempty" name:"GroupResourceTypeList"`
	// 部署组状态过滤字段

	Status *string `json:"Status,omitempty" name:"Status"`
	// 无

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *DescribeGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyRegionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyRegionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyRegionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeImagesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeImagesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeImagesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyProductNewsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：操作成功；false：操作失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyProductNewsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyProductNewsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteApiGroupRequest struct {
	*tchttp.BaseRequest

	// API 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DeleteApiGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteApiGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeServicesRequest struct {
	*tchttp.BaseRequest

	// 产品编码，不填写时查询全量

	ServiceCode *string `json:"ServiceCode,omitempty" name:"ServiceCode"`
	// 每页数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
}

func (r *DescribeServicesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServicesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateDeliveryConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项id

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置名

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 采集路径

	CollectPath []*string `json:"CollectPath,omitempty" name:"CollectPath"`
	// kafka的topic

	Topic *string `json:"Topic,omitempty" name:"Topic"`
	// kafka的vip

	KafkaVIp *string `json:"KafkaVIp,omitempty" name:"KafkaVIp"`
	// kafka的vport

	KafkaVPort *string `json:"KafkaVPort,omitempty" name:"KafkaVPort"`
	// 换行标记

	LineRule *string `json:"LineRule,omitempty" name:"LineRule"`
	// 是否需要认证

	EnableAuth *bool `json:"EnableAuth,omitempty" name:"EnableAuth"`
	// 用户名

	Username *string `json:"Username,omitempty" name:"Username"`
	// 密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// kafka投递信息

	KafkaInfos []*DeliveryKafkaInfo `json:"KafkaInfos,omitempty" name:"KafkaInfos"`
	// 是否应用单行规则

	EnableGlobalLineRule *bool `json:"EnableGlobalLineRule,omitempty" name:"EnableGlobalLineRule"`
	// 自定义分行规则

	CustomRule *string `json:"CustomRule,omitempty" name:"CustomRule"`
}

func (r *UpdateDeliveryConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateDeliveryConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StatisticsEntryV2 struct {

	// 主字段

	PrimeKey *string `json:"PrimeKey,omitempty" name:"PrimeKey"`
	// 附字段

	SubKey *string `json:"SubKey,omitempty" name:"SubKey"`
	// 值

	Value *string `json:"Value,omitempty" name:"Value"`
}

type ContinueResourceBatchOperationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 资源批次操作执行结果描述

		Result *ResourceBatchOperationStatusResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ContinueResourceBatchOperationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ContinueResourceBatchOperationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowBatchGraphRequest struct {
	*tchttp.BaseRequest

	// 工作流批次 ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 工作流批次历史 ID

	FlowBatchLogId *string `json:"FlowBatchLogId,omitempty" name:"FlowBatchLogId"`
}

func (r *DescribeFlowBatchGraphRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowBatchGraphRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskExecuteLogRequest struct {
	*tchttp.BaseRequest

	// 任务批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 任务执行ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DescribeTaskExecuteLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ScalableTaskResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*ScalableTask `json:"Content,omitempty" name:"Content"`
}

type DeleteRouteRequest struct {
	*tchttp.BaseRequest

	// 删除的路由ID

	RouteId *string `json:"RouteId,omitempty" name:"RouteId"`
}

func (r *DeleteRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ProtocolPort struct {

	// TCP UDP

	Protocol *string `json:"Protocol,omitempty" name:"Protocol"`
	// 服务端口

	Port *int64 `json:"Port,omitempty" name:"Port"`
	// 容器端口

	TargetPort *int64 `json:"TargetPort,omitempty" name:"TargetPort"`
	// 主机端口

	NodePort *int64 `json:"NodePort,omitempty" name:"NodePort"`
}

type PushMultiCloudUnitInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *PushMultiCloudUnitInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *PushMultiCloudUnitInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinessLogConfig struct {

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项日志路径

	ConfigPath *string `json:"ConfigPath,omitempty" name:"ConfigPath"`
	// 配置项描述

	ConfigDesc *string `json:"ConfigDesc,omitempty" name:"ConfigDesc"`
	// 配置项标签

	ConfigTags *string `json:"ConfigTags,omitempty" name:"ConfigTags"`
	// 配置项对应的ES管道

	ConfigPipeline *string `json:"ConfigPipeline,omitempty" name:"ConfigPipeline"`
	// 配置项创建时间

	ConfigCreateTime *string `json:"ConfigCreateTime,omitempty" name:"ConfigCreateTime"`
	// 配置项更新时间

	ConfigUpdateTime *string `json:"ConfigUpdateTime,omitempty" name:"ConfigUpdateTime"`
	// 配置项解析规则

	ConfigSchema *BusinessLogConfigSchema `json:"ConfigSchema,omitempty" name:"ConfigSchema"`
	// 配置项关联部署组

	ConfigAssociatedGroups []*BusinesLogConfigAssociatedGroup `json:"ConfigAssociatedGroups,omitempty" name:"ConfigAssociatedGroups"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
	// 无

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
}

type SaveDeployModuleParamsRequest struct {
	*tchttp.BaseRequest

	// ModuleParameters

	ModuleParameters []*ModuleParameterResult `json:"ModuleParameters,omitempty" name:"ModuleParameters"`
}

func (r *SaveDeployModuleParamsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SaveDeployModuleParamsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AddInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 添加云主机是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AddInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AddInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeBasicResourceUsageResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TSF基本资源信息

		Result *OverviewBasicResourceUsage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeBasicResourceUsageResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBasicResourceUsageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ClusterV3 struct {

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群描述

	ClusterDesc *string `json:"ClusterDesc,omitempty" name:"ClusterDesc"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 集群所属私有网络ID

	VpcId *string `json:"VpcId,omitempty" name:"VpcId"`
	// 集群状态

	ClusterStatus *string `json:"ClusterStatus,omitempty" name:"ClusterStatus"`
	// 集群CIDR

	ClusterCIDR *string `json:"ClusterCIDR,omitempty" name:"ClusterCIDR"`
	// 集群总CPU，单位: 核

	ClusterTotalCpu *float64 `json:"ClusterTotalCpu,omitempty" name:"ClusterTotalCpu"`
	// 集群总内存，单位: G

	ClusterTotalMem *float64 `json:"ClusterTotalMem,omitempty" name:"ClusterTotalMem"`
	// 集群已使用CPU，单位: 核

	ClusterUsedCpu *float64 `json:"ClusterUsedCpu,omitempty" name:"ClusterUsedCpu"`
	// 集群已使用内存，单位: G

	ClusterUsedMem *float64 `json:"ClusterUsedMem,omitempty" name:"ClusterUsedMem"`
	// 集群机器实例数量

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 集群运行中的机器实例数量

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 集群正常状态的机器实例数量

	NormalInstanceCount *int64 `json:"NormalInstanceCount,omitempty" name:"NormalInstanceCount"`
	// 删除标记：true：可以删除；false：不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 集群所属TSF地域ID

	TsfRegionId *string `json:"TsfRegionId,omitempty" name:"TsfRegionId"`
	// 集群所属TSF地域名称

	TsfRegionName *string `json:"TsfRegionName,omitempty" name:"TsfRegionName"`
	// 集群所属TSF可用区ID

	TsfZoneId *string `json:"TsfZoneId,omitempty" name:"TsfZoneId"`
	// 集群所属TSF可用区名称

	TsfZoneName *string `json:"TsfZoneName,omitempty" name:"TsfZoneName"`
}

type CreateSecretRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// 仓库域名

	RepositoryDomain *string `json:"RepositoryDomain,omitempty" name:"RepositoryDomain"`
	// 名称

	SecretName *string `json:"SecretName,omitempty" name:"SecretName"`
	// 用户名

	Username *string `json:"Username,omitempty" name:"Username"`
}

func (r *CreateSecretRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateSecretRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetOssTraceServicesRequest struct {
	*tchttp.BaseRequest

	// 服务角色："caller"调用方，"callee"被调用方

	Role *string `json:"Role,omitempty" name:"Role"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 返回服务偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 返回服务数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *GetOssTraceServicesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetOssTraceServicesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayQQMiniProgramLoginPlugin struct {

	// 网关插件ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件创建时间 如:2019-06-20 15:51:28

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 插件更新时间 如:2019-06-20 15:51:28

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
	// QQ小程序AppId

	QqAppId *string `json:"QqAppId,omitempty" name:"QqAppId"`
	// QQ小程序请求code携带位置：header/cookie

	RequestCodeBaggagePosition *string `json:"RequestCodeBaggagePosition,omitempty" name:"RequestCodeBaggagePosition"`
	// 自定义登录态参数名

	SessionKeyName *string `json:"SessionKeyName,omitempty" name:"SessionKeyName"`
	// 自定义登录态过期时间，单位：秒

	SessionExpireTime *int64 `json:"SessionExpireTime,omitempty" name:"SessionExpireTime"`
	// 前台业务请求自定义登录态参数位置：header/cookie

	RequestSessionBaggagePosition *string `json:"RequestSessionBaggagePosition,omitempty" name:"RequestSessionBaggagePosition"`
	// 向业务后台传输登录态参数位置：header/query/cookie

	BusinessSessionBaggagePosition *string `json:"BusinessSessionBaggagePosition,omitempty" name:"BusinessSessionBaggagePosition"`
	// 返回自定义登录态参数位置：header

	ResponseSessionBaggagePosition *string `json:"ResponseSessionBaggagePosition,omitempty" name:"ResponseSessionBaggagePosition"`
	// 元数据转标签配置的Json串

	MetaDataTagInfoList *string `json:"MetaDataTagInfoList,omitempty" name:"MetaDataTagInfoList"`
	// 自定义标签配置的Json串

	CustomizeTagInfoList *string `json:"CustomizeTagInfoList,omitempty" name:"CustomizeTagInfoList"`
}

type InstanceMetricDataCurve struct {

	// 节点Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 节点名称

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 指标监控数据曲线集合

	InstanceMetricData []*MetricDataCurve `json:"InstanceMetricData,omitempty" name:"InstanceMetricData"`
}

type ZipkinTraceInfo struct {

	// 调用链ID

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 调用链时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 调用链时耗

	Duration *uint64 `json:"Duration,omitempty" name:"Duration"`
	// 调用链结果

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
}

type DisableAuthorizationResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：更新成功；false：更新失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableAuthorizationResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableAuthorizationResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyRoleRequest struct {
	*tchttp.BaseRequest

	// 角色ID

	RoleId *string `json:"RoleId,omitempty" name:"RoleId"`
	// 角色名称，不传入或为null时不更新

	RoleName *string `json:"RoleName,omitempty" name:"RoleName"`
	// 角色描述，不传入或为null时不更新

	RoleDesc *string `json:"RoleDesc,omitempty" name:"RoleDesc"`
	// 角色拥有的权限组ID列表，不传入或为null时不更新

	PermCatIdList []*string `json:"PermCatIdList,omitempty" name:"PermCatIdList"`
}

func (r *ModifyRoleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyRoleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteImageTagV2 struct {

	// 仓库名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 版本号:如V1

	TagName []*string `json:"TagName,omitempty" name:"TagName"`
}

type ExecuteTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功/失败

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ExecuteTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ExecuteTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageVmGroupV2 struct {

	// 总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 部署组列表信息

	Content []*VmGroupSimple `json:"Content,omitempty" name:"Content"`
}

type AnalyzeLogSchemaRequest struct {
	*tchttp.BaseRequest

	// 解析规则类型

	SchemaType *uint64 `json:"SchemaType,omitempty" name:"SchemaType"`
	// 解析规则内容，包含解析规则时间格式和解析规则内容

	SchemaPatternLayout *string `json:"SchemaPatternLayout,omitempty" name:"SchemaPatternLayout"`
	// 模拟解析的日志内容

	SchemaLogMessage *string `json:"SchemaLogMessage,omitempty" name:"SchemaLogMessage"`
}

func (r *AnalyzeLogSchemaRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AnalyzeLogSchemaRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableUnitRouteRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// Type

	Type *string `json:"Type,omitempty" name:"Type"`
	// Seed

	Seed *string `json:"Seed,omitempty" name:"Seed"`
}

func (r *EnableUnitRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableUnitRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayWeChatMiniProgramAppSecretRequest struct {
	*tchttp.BaseRequest

	// 网关插件Id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 微信小程序AppSecret

	WeChatAppSecret *string `json:"WeChatAppSecret,omitempty" name:"WeChatAppSecret"`
}

func (r *UpdateGatewayWeChatMiniProgramAppSecretRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayWeChatMiniProgramAppSecretRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeployGroupsRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeDeployGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeployGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableFallbackRouteRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *EnableFallbackRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableFallbackRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayInstancesRequest struct {
	*tchttp.BaseRequest

	// 搜索词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 限制数目

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 无

	IdList []*string `json:"IdList,omitempty" name:"IdList"`
}

func (r *DescribeGatewayInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetNamespaceCodeRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间编码

	NamespaceCode *string `json:"NamespaceCode,omitempty" name:"NamespaceCode"`
}

func (r *SetNamespaceCodeRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetNamespaceCodeRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GCLogData struct {

	// 调用成功success/调用失败error

	Status *string `json:"Status,omitempty" name:"Status"`
	// 调用成功为""/调用失败为对应失败信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// 调用成功为0/调用失败为对应的错误码

	StatusCode *int64 `json:"StatusCode,omitempty" name:"StatusCode"`
	// 分析的GC日志结果

	Data *string `json:"Data,omitempty" name:"Data"`
}

type DescribeLaneRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 泳道规则

		Result *LaneRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLaneRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SetEnvoyCloseDebugResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 设置成功为true

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SetEnvoyCloseDebugResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SetEnvoyCloseDebugResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiUseDetailRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GatewayDeployGroupId *string `json:"GatewayDeployGroupId,omitempty" name:"GatewayDeployGroupId"`
	// 网关分组Api ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// 查询的日期,格式：yyyy-MM-dd HH:mm:ss

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询的日期,格式：yyyy-MM-dd HH:mm:ss

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
}

func (r *DescribeApiUseDetailRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiUseDetailRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskSpec struct {

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务ID依赖列表

	Dependencies []*string `json:"Dependencies,omitempty" name:"Dependencies"`
	// 是否需要手动确认

	NeedConfirm *bool `json:"NeedConfirm,omitempty" name:"NeedConfirm"`
	// 任务执行的总时间

	TimeOut *uint64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 任务类型

	TaskType *string `json:"TaskType,omitempty" name:"TaskType"`
	// 任务参数map

	Payload *string `json:"Payload,omitempty" name:"Payload"`
	// 是否回滚

	DisableRollback *bool `json:"DisableRollback,omitempty" name:"DisableRollback"`
}

type ImageGetRepositoryListRequest struct {
	*tchttp.BaseRequest

	// 仓库名，搜索关键字,不带命名空间的

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量，取值从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~100

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *ImageGetRepositoryListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageGetRepositoryListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CircuitBreakerApi struct {

	// API ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// API PATH

	Path *string `json:"Path,omitempty" name:"Path"`
	// API Method

	Method *string `json:"Method,omitempty" name:"Method"`
	// 熔断策略ID

	StrategyId *string `json:"StrategyId,omitempty" name:"StrategyId"`
}

type DescribeTemplateResultV2 struct {

	// ProjectId

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
	// ProjectName

	ProjectName *string `json:"ProjectName,omitempty" name:"ProjectName"`
	// BasePackage

	BasePackage *string `json:"BasePackage,omitempty" name:"BasePackage"`
	// PomGroupId

	PomGroupId *string `json:"PomGroupId,omitempty" name:"PomGroupId"`
	// PomArtifactId

	PomArtifactId *string `json:"PomArtifactId,omitempty" name:"PomArtifactId"`
	// PomVersion

	PomVersion *string `json:"PomVersion,omitempty" name:"PomVersion"`
	// PomName

	PomName *string `json:"PomName,omitempty" name:"PomName"`
	// PomDesc

	PomDesc *string `json:"PomDesc,omitempty" name:"PomDesc"`
	// GetMethod

	GetMethod *string `json:"GetMethod,omitempty" name:"GetMethod"`
	// Ms

	Ms []*Ms `json:"Ms,omitempty" name:"Ms"`
	// action

	Action *string `json:"Action,omitempty" name:"Action"`
	// appId

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// SubAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type DeleteProductHelpRequest struct {
	*tchttp.BaseRequest

	// id

	HelpId *string `json:"HelpId,omitempty" name:"HelpId"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

func (r *DeleteProductHelpRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteProductHelpRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRatelimitCommitConfigRequest struct {
	*tchttp.BaseRequest

	// 名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 限流所作用的目标微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
}

func (r *DescribeRatelimitCommitConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRatelimitCommitConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MsApplicationV2 struct {

	// 应用 ID，如 application-qv3dkda7

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用描述

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 应用 *部署* 类型，V 表示 CVM 应用，C 表示容器应用

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 应用启动时的 JVM 参数

	ApplicationJvmArg *string `json:"ApplicationJvmArg,omitempty" name:"ApplicationJvmArg"`
	// 应用类型，M 表示 Mesh 应用，N 表示 Spring Cloud 应用

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 应用编程语言，J 表示 Java，P 表示 Python

	ProgLang *string `json:"ProgLang,omitempty" name:"ProgLang"`
	// 应用是否存在

	NotExist *bool `json:"NotExist,omitempty" name:"NotExist"`
}

type DescribeGatewayMonitorDetailsRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 查询指标信息

	Metrics []*Metric `json:"Metrics,omitempty" name:"Metrics"`
}

func (r *DescribeGatewayMonitorDetailsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayMonitorDetailsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetPkgInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 包信息

		PkgInfo []*string `json:"PkgInfo,omitempty" name:"PkgInfo"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetPkgInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetPkgInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperateManagerJobRequest struct {
	*tchttp.BaseRequest

	// 无

	Command *string `json:"Command,omitempty" name:"Command"`
	// 无

	Id *int64 `json:"Id,omitempty" name:"Id"`
}

func (r *OperateManagerJobRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *OperateManagerJobRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateContainerGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 端口列表

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 滚动更新必填，更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
}

func (r *UpdateContainerGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateContainerGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageInfo struct {

	// ImageId

	ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
	// OsName

	OsName *string `json:"OsName,omitempty" name:"OsName"`
	// ImageSize

	ImageSize *int64 `json:"ImageSize,omitempty" name:"ImageSize"`
	// ImageType

	ImageType *string `json:"ImageType,omitempty" name:"ImageType"`
	// ImageName

	ImageName *string `json:"ImageName,omitempty" name:"ImageName"`
	// ImageDesc

	ImageDesc *string `json:"ImageDesc,omitempty" name:"ImageDesc"`
	// CreateTime

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// LoginName

	LoginName *string `json:"LoginName,omitempty" name:"LoginName"`
}

type CreateMicroserviceRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 微服务描述信息

	MicroserviceDesc *string `json:"MicroserviceDesc,omitempty" name:"MicroserviceDesc"`
}

func (r *CreateMicroserviceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMicroserviceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePluginInstancesRequest struct {
	*tchttp.BaseRequest

	// 分组或者API的ID

	ScopeValue *string `json:"ScopeValue,omitempty" name:"ScopeValue"`
	// 绑定: true; 未绑定: false

	Bound *bool `json:"Bound,omitempty" name:"Bound"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页展示的条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
}

func (r *DescribePluginInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePluginInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeVisitAccountRequest struct {
	*tchttp.BaseRequest

	// 检测是否体验账号

	CheckVisitAccount *bool `json:"CheckVisitAccount,omitempty" name:"CheckVisitAccount"`
}

func (r *DescribeVisitAccountRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeVisitAccountRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableRatelimitRequest struct {
	*tchttp.BaseRequest

	// 名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 限流所作用的目标微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 规则列表，Id必填

	Rules []*RatelimitRuleForUpdate `json:"Rules,omitempty" name:"Rules"`
}

func (r *DisableRatelimitRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableRatelimitRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetUploadInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 无

		Result *CosUploadInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetUploadInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetUploadInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceConfigLicense struct {

	// 功能

	Function []*DescribeResourceConfigLicenseFunction `json:"Function,omitempty" name:"Function"`
	// 资源

	Resource []*DescribeResourceConfigLicenseResource `json:"Resource,omitempty" name:"Resource"`
	// utc时间 单位秒

	ExpireTime *uint64 `json:"ExpireTime,omitempty" name:"ExpireTime"`
	// utc时间 单位秒

	Countdown *uint64 `json:"Countdown,omitempty" name:"Countdown"`
	// 规格

	Spec *string `json:"Spec,omitempty" name:"Spec"`
}

type DescribeThreadDumpResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 线程分析结果及接口执行状态

		Result *ThreadDump `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeThreadDumpResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeThreadDumpResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRecordsRequest struct {
	*tchttp.BaseRequest

	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 操作类型

	ModuleType *string `json:"ModuleType,omitempty" name:"ModuleType"`
	// 资源类型

	OperationType *string `json:"OperationType,omitempty" name:"OperationType"`
	// 搜索词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页发小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 操作者

	Operator *string `json:"Operator,omitempty" name:"Operator"`
}

func (r *DescribeRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInvocationMetricDataPointResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 单值指标列表

		Result []*MetricDataSingleValue `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInvocationMetricDataPointResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationMetricDataPointResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableFallbackRouteRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DisableFallbackRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableFallbackRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyTaskRequest struct {
	*tchttp.BaseRequest

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务名称

	TaskName *string `json:"TaskName,omitempty" name:"TaskName"`
	// 任务类型

	TaskType *string `json:"TaskType,omitempty" name:"TaskType"`
	// 任务内容

	TaskContent *string `json:"TaskContent,omitempty" name:"TaskContent"`
	// 任务执行类型

	ExecuteType *string `json:"ExecuteType,omitempty" name:"ExecuteType"`
	// 触发规则

	TaskRule *TaskRule `json:"TaskRule,omitempty" name:"TaskRule"`
	// 超时时间，单位 ms

	TimeOut *uint64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分片数量

	ShardCount *int64 `json:"ShardCount,omitempty" name:"ShardCount"`
	// 分片参数

	ShardArguments []*ShardArgument `json:"ShardArguments,omitempty" name:"ShardArguments"`
	// 高级设置

	AdvanceSettings *AdvanceSettings `json:"AdvanceSettings,omitempty" name:"AdvanceSettings"`
	// 判断任务成功的操作符 GT/GTE

	SuccessOperator *string `json:"SuccessOperator,omitempty" name:"SuccessOperator"`
	// 判断任务成功率的阈值

	SuccessRatio *int64 `json:"SuccessRatio,omitempty" name:"SuccessRatio"`
	// 重试次数

	RetryCount *uint64 `json:"RetryCount,omitempty" name:"RetryCount"`
	// 重试间隔

	RetryInterval *uint64 `json:"RetryInterval,omitempty" name:"RetryInterval"`
	// 任务参数，长度限制10000个字符

	TaskArgument *string `json:"TaskArgument,omitempty" name:"TaskArgument"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *ModifyTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowLastBatchStateRequest struct {
	*tchttp.BaseRequest

	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
}

func (r *DescribeFlowLastBatchStateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowLastBatchStateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskFlowBatchLastState struct {

	// 批次ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 批次历史ID

	FlowBatchLogId *string `json:"FlowBatchLogId,omitempty" name:"FlowBatchLogId"`
	// 状态

	State *string `json:"State,omitempty" name:"State"`
}

type DescribeAuthorizationMicroservicesRequest struct {
	*tchttp.BaseRequest

	// 目标微服务ID

	TargetServiceId *string `json:"TargetServiceId,omitempty" name:"TargetServiceId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 查询字符串

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 查询数据偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeAuthorizationMicroservicesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationMicroservicesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ServiceStatisticsResults struct {

	// 返回结果

	Content []*ServiceStatisticsResult `json:"Content,omitempty" name:"Content"`
	// 条数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
}

type DescribeNamespacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 命名空间分页信息

		Result *TsfPageNamespace `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeNamespacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopologyGraphRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 查询开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 全局命名空间ID

	GlobalNamespaceId *string `json:"GlobalNamespaceId,omitempty" name:"GlobalNamespaceId"`
	// 服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 命名空间id数组

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
	// 是否仅显示异常

	IsOnlyError *bool `json:"IsOnlyError,omitempty" name:"IsOnlyError"`
	// 是否展示慢响应top5

	IsSlowTopFive *bool `json:"IsSlowTopFive,omitempty" name:"IsSlowTopFive"`
	// 调用链traceid

	TraceName *string `json:"TraceName,omitempty" name:"TraceName"`
}

func (r *GetTopologyGraphRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopologyGraphRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeContainerGroupPlainYamlRequest struct {
	*tchttp.BaseRequest

	// 容器部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeContainerGroupPlainYamlRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerGroupPlainYamlRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ProviderV2 struct {

	// ProviderControllerName

	ProviderControllerName *string `json:"ProviderControllerName,omitempty" name:"ProviderControllerName"`
}

type DescribeTaskBatchHistoryRecordsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 批次信息集合

		Result *TaskBatchRecordPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskBatchHistoryRecordsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskBatchHistoryRecordsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableUnitRuleRequest struct {
	*tchttp.BaseRequest

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DisableUnitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableUnitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeResourceConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置详情

		Result *DescribeResourceConfigResultV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeResourceConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableTaskFlowResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true成功，false: 失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableTaskFlowResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableTaskFlowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventCategoryNameRequest struct {
	*tchttp.BaseRequest

	// 事件过滤器

	Filters []*EventFilter `json:"Filters,omitempty" name:"Filters"`
}

func (r *DescribeEventCategoryNameRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventCategoryNameRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTsfRegionsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TSF地域列表

		Result *TsfPageRegion `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTsfRegionsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTsfRegionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageCluster struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 集群列表

	Content []*Cluster `json:"Content,omitempty" name:"Content"`
}

type DescribeReleasePipelineTaskRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 运行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
}

func (r *DescribeReleasePipelineTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeServerlessGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 数据列表对象

		Result *ServerlessGroupPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeServerlessGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeServerlessGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PreviewLicenseRequest struct {
	*tchttp.BaseRequest

	// 证书正文

	LicenseContent *string `json:"LicenseContent,omitempty" name:"LicenseContent"`
}

func (r *PreviewLicenseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *PreviewLicenseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeliveryConfigBindGroups struct {

	// 公共条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 内容

	Content []*DeliveryConfigBindGroup `json:"Content,omitempty" name:"Content"`
}

type TsfPageVmSubTask struct {

	// 子任务总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 成功子任务数目

	SuccessCount *int64 `json:"SuccessCount,omitempty" name:"SuccessCount"`
	// 运行中子任务数目

	RunCount *int64 `json:"RunCount,omitempty" name:"RunCount"`
	// 失败子任务数目

	FailCount *int64 `json:"FailCount,omitempty" name:"FailCount"`
	// 子任务列表信息

	Content []*VmSubTask `json:"Content,omitempty" name:"Content"`
}

type CleanAndDisableUnitRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CleanAndDisableUnitRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CleanAndDisableUnitRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupBusinessLogConfigsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 业务日志配置列表

		Result *TsfPageBusinessLogConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupBusinessLogConfigsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupBusinessLogConfigsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InterfaceRequest struct {

	// trace id

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 起始时间

	Timestamp *int64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 耗时

	Duration *int64 `json:"Duration,omitempty" name:"Duration"`
	// 结果状态

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// 错误

	ResultError *string `json:"ResultError,omitempty" name:"ResultError"`
	// 实例信息

	InstanceInfo *InstanceInfo `json:"InstanceInfo,omitempty" name:"InstanceInfo"`
}

type DescribeRolesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页的角色列表

		Result *PagedRole `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRolesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRolesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BillingOperationModifyRequest struct {
	*tchttp.BaseRequest

	// 计费租户ID

	BillingAppId *string `json:"BillingAppId,omitempty" name:"BillingAppId"`
	// 计费账号ID

	BillingUin *string `json:"BillingUin,omitempty" name:"BillingUin"`
	// 规格

	Spec *string `json:"Spec,omitempty" name:"Spec"`
	// 节点数

	NodeSize *int64 `json:"NodeSize,omitempty" name:"NodeSize"`
	// 操作人

	Operator *string `json:"Operator,omitempty" name:"Operator"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

func (r *BillingOperationModifyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationModifyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGatewayApiRequest struct {
	*tchttp.BaseRequest

	// API 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// Api信息

	ApiList []*ApiInfo `json:"ApiList,omitempty" name:"ApiList"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateGatewayApiRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayApiRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeProgramsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 数据集列表

		Result *PagedProgram `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeProgramsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeProgramsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteFileConfigRequest struct {
	*tchttp.BaseRequest

	// 文件配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *DeleteFileConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteFileConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ResourceMonitor struct {

	// 实例节点详情

	Instance *InstancesResult `json:"Instance,omitempty" name:"Instance"`
	// 磁盘使用率

	DiskUtilization []*CurvePoint `json:"DiskUtilization,omitempty" name:"DiskUtilization"`
	// cpu使用率

	CpuUtilization []*CurvePoint `json:"CpuUtilization,omitempty" name:"CpuUtilization"`
	// jvm内存使用率

	JvmUtilization []*CurvePoint `json:"JvmUtilization,omitempty" name:"JvmUtilization"`
	// 一分钟平均负载

	Load1m []*CurvePoint `json:"Load1m,omitempty" name:"Load1m"`
	// 五分钟平均负载

	Load5m []*CurvePoint `json:"Load5m,omitempty" name:"Load5m"`
	// 十五分钟平均负载

	Load15m []*CurvePoint `json:"Load15m,omitempty" name:"Load15m"`
	// 1

	MemoryUtilizations []*CurvePoint `json:"MemoryUtilizations,omitempty" name:"MemoryUtilizations"`
	// 1

	Status *string `json:"Status,omitempty" name:"Status"`
	// 1

	Ip *string `json:"Ip,omitempty" name:"Ip"`
	// 1

	TsfModuleNames []*string `json:"TsfModuleNames,omitempty" name:"TsfModuleNames"`
}

type CreateGatewayOAuthPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关插件

		Result *GatewayPluginId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateGatewayOAuthPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayOAuthPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiRateLimitRulesRequest struct {
	*tchttp.BaseRequest

	// Api ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
}

func (r *DescribeApiRateLimitRulesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiRateLimitRulesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DraftApiGroupRequest struct {
	*tchttp.BaseRequest

	// Api 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DraftApiGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DraftApiGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGatewayTagPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关插件

		Result *GatewayPluginId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateGatewayTagPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayTagPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeletePodRequest struct {
	*tchttp.BaseRequest

	// groupId，分组唯一标识

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 实例名称

	PodName *string `json:"PodName,omitempty" name:"PodName"`
}

func (r *DeletePodRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePodRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PagedDtsTransaction struct {

	// 总条数，特定在该接口中总是会返回null

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 主事务分组列表

	Content []*DtsTransaction `json:"Content,omitempty" name:"Content"`
}

type DescribeProgramRequest struct {
	*tchttp.BaseRequest

	// 数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// 无

	IgnoreTask *bool `json:"IgnoreTask,omitempty" name:"IgnoreTask"`
}

func (r *DescribeProgramRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeProgramRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeThreadDumpRequest struct {
	*tchttp.BaseRequest

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 查询结果

	Compression *bool `json:"Compression,omitempty" name:"Compression"`
}

func (r *DescribeThreadDumpRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeThreadDumpRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRatelimitRequest struct {
	*tchttp.BaseRequest

	// 名字空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 限流所作用的目标微服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// Rule列表，仅需要填写Id

	Rules []*RatelimitRuleForUpdate `json:"Rules,omitempty" name:"Rules"`
}

func (r *DeleteRatelimitRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRatelimitRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventDimensionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 事件维度列表

		Result []*TsfEventAttribute `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeEventDimensionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventDimensionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigSummaryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页的全局配置统计信息列表

		Result *TsfPageConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePublicConfigSummaryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigSummaryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopServerlessGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *StopServerlessGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopServerlessGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteMicroserviceRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DeleteMicroserviceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMicroserviceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除路由是否成功。
		// true： 删除路由成功。
		// false：删除路由失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFunctionStatusRequest struct {
	*tchttp.BaseRequest

	// 功能名

	FunctionName *string `json:"FunctionName,omitempty" name:"FunctionName"`
}

func (r *DescribeFunctionStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFunctionStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableUnitRuleRequest struct {
	*tchttp.BaseRequest

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *EnableUnitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableUnitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinessLogV2 struct {

	// 实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 日志内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 日志时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 实例IP

	InstanceIp *string `json:"InstanceIp,omitempty" name:"InstanceIp"`
	// 日志ID

	LogId *string `json:"LogId,omitempty" name:"LogId"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

type CreateWildCardGatewayApiRequest struct {
	*tchttp.BaseRequest

	// 通配路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 通配方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// API分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *CreateWildCardGatewayApiRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateWildCardGatewayApiRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineRunResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 触发类型

		TriggerType *string `json:"TriggerType,omitempty" name:"TriggerType"`
		// 执行状态

		Status *string `json:"Status,omitempty" name:"Status"`
		// 开始时间

		StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
		// 结束时间

		EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
		// 主帐号

		Uin *string `json:"Uin,omitempty" name:"Uin"`
		// 子帐号

		SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
		// 昵称

		Nickname *string `json:"Nickname,omitempty" name:"Nickname"`
		// DAG信息

		Stages []*ReleaseStage `json:"Stages,omitempty" name:"Stages"`
		// 发布单类型

		ReleaseType *string `json:"ReleaseType,omitempty" name:"ReleaseType"`
		// 模板类型

		TemplateType *string `json:"TemplateType,omitempty" name:"TemplateType"`
		// 任务节点数

		TaskCount *uint64 `json:"TaskCount,omitempty" name:"TaskCount"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasePipelineRunResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineRunResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopTaskBatchResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作成功 or 失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StopTaskBatchResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopTaskBatchResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ValidateDeletePublicConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ValidateDeletePublicConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ValidateDeletePublicConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PkgInfoV2 struct {

	// 无

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 无

	PkgName *string `json:"PkgName,omitempty" name:"PkgName"`
	// 无

	PkgType *string `json:"PkgType,omitempty" name:"PkgType"`
	// 无

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 无

	PkgDesc *string `json:"PkgDesc,omitempty" name:"PkgDesc"`
	// 无

	UploadTime *string `json:"UploadTime,omitempty" name:"UploadTime"`
	// 无

	Md5 *string `json:"Md5,omitempty" name:"Md5"`
	// 无

	PkgPubStatus *int64 `json:"PkgPubStatus,omitempty" name:"PkgPubStatus"`
}

type ListTsfModuleInstancePortsRequest struct {
	*tchttp.BaseRequest

	// ModuleId

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
}

func (r *ListTsfModuleInstancePortsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListTsfModuleInstancePortsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ServiceStatisticsResult struct {

	// 请求模版路径:type为接口时返回，服务时不返回

	Path *string `json:"Path,omitempty" name:"Path"`
	// 请求方法:type为接口时返回，服务时不返回

	Method *string `json:"Method,omitempty" name:"Method"`
	// 微服务Id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 请求数

	RequestCount *uint64 `json:"RequestCount,omitempty" name:"RequestCount"`
	// 请求错误率，不带百分号

	ErrorRate *float64 `json:"ErrorRate,omitempty" name:"ErrorRate"`
	// 平均响应耗时ms

	AvgTimeConsuming *float64 `json:"AvgTimeConsuming,omitempty" name:"AvgTimeConsuming"`
	// 响应耗时曲线

	MetricDataCurves []*MetricDataCurve `json:"MetricDataCurves,omitempty" name:"MetricDataCurves"`
	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 实例name

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组name

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 部署组类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 部署组是否存在

	GroupExist *int64 `json:"GroupExist,omitempty" name:"GroupExist"`
	// 实例是否存在，仅限cvm

	InstanceExist *int64 `json:"InstanceExist,omitempty" name:"InstanceExist"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// cpu使用率

	CpuPercent *int64 `json:"CpuPercent,omitempty" name:"CpuPercent"`
	// 已用堆大小,单位KB

	HeapUsed *int64 `json:"HeapUsed,omitempty" name:"HeapUsed"`
	// 数据库

	DbName *string `json:"DbName,omitempty" name:"DbName"`
	// Script值

	Script *string `json:"Script,omitempty" name:"Script"`
	// 数据库类型

	DbType *string `json:"DbType,omitempty" name:"DbType"`
	// Apdex值

	Apdex *float64 `json:"Apdex,omitempty" name:"Apdex"`
	// Qps值

	Qps *float64 `json:"Qps,omitempty" name:"Qps"`
	// 实例在线数

	InstanceOnlineCount *int64 `json:"InstanceOnlineCount,omitempty" name:"InstanceOnlineCount"`
	// 实例总数

	InstanceTotalCount *int64 `json:"InstanceTotalCount,omitempty" name:"InstanceTotalCount"`
	// normal/error

	Status *string `json:"Status,omitempty" name:"Status"`
	// normal/warn/error

	ErrorRateLevel *string `json:"ErrorRateLevel,omitempty" name:"ErrorRateLevel"`
	// normal/warn/error

	AvgTimeConsumingLevel *string `json:"AvgTimeConsumingLevel,omitempty" name:"AvgTimeConsumingLevel"`
	// normal/warn/error

	ApdexLevel *string `json:"ApdexLevel,omitempty" name:"ApdexLevel"`
	// 无

	NamespaceExist *int64 `json:"NamespaceExist,omitempty" name:"NamespaceExist"`
	// 无

	MicroserviceExist *int64 `json:"MicroserviceExist,omitempty" name:"MicroserviceExist"`
	// 无

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 无

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
}

type ImageRepositoryResult struct {

	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 镜像服务器地址

	Server *string `json:"Server,omitempty" name:"Server"`
	// 列表信息

	Content []*ImageRepository `json:"Content,omitempty" name:"Content"`
}

type DescribePkgsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 符合查询程序包信息列表

		Result *PkgList `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribePkgsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePkgsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShirkInstanceRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 下线机器实例ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
}

func (r *ShirkInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShirkInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CtsdbInfo struct {

	// 用户名

	Username *string `json:"Username,omitempty" name:"Username"`
	// 密码

	Password *string `json:"Password,omitempty" name:"Password"`
	// ctsdb地址列表

	Addrs []*string `json:"Addrs,omitempty" name:"Addrs"`
}

type RouteReleaseHistoryV2 struct {

	// 路由规则发布记录ID

	RouteReleaseLogId *string `json:"RouteReleaseLogId,omitempty" name:"RouteReleaseLogId"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 路由规则ID

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
	// 路由规则部署开始时间

	EnableTime *string `json:"EnableTime,omitempty" name:"EnableTime"`
	// 路由规则停止时间

	DisableTime *string `json:"DisableTime,omitempty" name:"DisableTime"`
	// 路由规则发布

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
	// 路由规则详情

	RouteRule *RouteV2 `json:"RouteRule,omitempty" name:"RouteRule"`
	// 账号APPID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 账号Owner用户唯一ID

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 账号用户唯一ID

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type DescribeGatewayQQMiniProgramLoginPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DescribeGatewayQQMiniProgramLoginPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayQQMiniProgramLoginPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchContainerStdoutLogRequest struct {
	*tchttp.BaseRequest

	// 容器部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 容器部署组实例 ID，可选，若为空，则返回所有实例的日志

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 最大显示行数[1~1000]，默认200

	TailLines *uint64 `json:"TailLines,omitempty" name:"TailLines"`
}

func (r *SearchContainerStdoutLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchContainerStdoutLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupInstancesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署组机器信息

		Result *TsfPageInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupInstancesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupInstancesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroserviceProtocolRequest struct {
	*tchttp.BaseRequest

	// 服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeMicroserviceProtocolRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroserviceProtocolRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BillingOperationIsolateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作结果（true成功，false失败）

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *BillingOperationIsolateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BillingOperationIsolateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListApplicationServersResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ListApplicationServerResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListApplicationServersResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListApplicationServersResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PagedProductNews struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 产品动态列表

	Content []*ProductNews `json:"Content,omitempty" name:"Content"`
}

type DescribeMeshSidecarStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// sidecar 状态

		Result *SidecarStatus `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMeshSidecarStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMeshSidecarStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type QuantileEntity struct {

	// 最大值

	MaxValue *string `json:"MaxValue,omitempty" name:"MaxValue"`
	// 最小值

	MinValue *string `json:"MinValue,omitempty" name:"MinValue"`
	// 五分位值

	FifthPositionValue *string `json:"FifthPositionValue,omitempty" name:"FifthPositionValue"`
	// 九分位值

	NinthPositionValue *string `json:"NinthPositionValue,omitempty" name:"NinthPositionValue"`
}

type TxList struct {

	// 返回的事务数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 主事务信息

	Content []*TxMainTransaction `json:"Content,omitempty" name:"Content"`
	// 请求异常信息

	Error *TxError `json:"Error,omitempty" name:"Error"`
}

type DescribeRoleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 角色

		Result *Role `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRoleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRoleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageStdoutLog struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 标准输出日志列表

	Content []*StdoutLog `json:"Content,omitempty" name:"Content"`
}

type CreateTaskRequest struct {
	*tchttp.BaseRequest

	// 任务名称，任务长度64字符

	TaskName *string `json:"TaskName,omitempty" name:"TaskName"`
	// 任务内容，长度限制65536个字节

	TaskContent *string `json:"TaskContent,omitempty" name:"TaskContent"`
	// 执行类型，unicast/broadcast

	ExecuteType *string `json:"ExecuteType,omitempty" name:"ExecuteType"`
	// 任务类型,java

	TaskType *string `json:"TaskType,omitempty" name:"TaskType"`
	// 任务超时时间， 时间单位 ms

	TimeOut *uint64 `json:"TimeOut,omitempty" name:"TimeOut"`
	// 触发规则

	TaskRule *TaskRule `json:"TaskRule,omitempty" name:"TaskRule"`
	// 重试次数，0 <= RetryCount<= 10

	RetryCount *uint64 `json:"RetryCount,omitempty" name:"RetryCount"`
	// 重试间隔， 0 <= RetryInterval <= 600000， 时间单位 ms

	RetryInterval *uint64 `json:"RetryInterval,omitempty" name:"RetryInterval"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分片数量

	ShardCount *int64 `json:"ShardCount,omitempty" name:"ShardCount"`
	// 分片参数

	ShardArguments []*ShardArgument `json:"ShardArguments,omitempty" name:"ShardArguments"`
	// 判断任务成功的操作符

	SuccessOperator *string `json:"SuccessOperator,omitempty" name:"SuccessOperator"`
	// 判断任务成功率的阈值，如100

	SuccessRatio *string `json:"SuccessRatio,omitempty" name:"SuccessRatio"`
	// 高级设置

	AdvanceSettings *AdvanceSettings `json:"AdvanceSettings,omitempty" name:"AdvanceSettings"`
	// 任务参数，长度限制10000个字符

	TaskArgument *string `json:"TaskArgument,omitempty" name:"TaskArgument"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RatelimitRuleForUpdate struct {

	// 规则ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 规则名字，在一个微服务下唯一

	Name *string `json:"Name,omitempty" name:"Name"`
	// 状态 0表示启用 1表示停用

	Status *uint64 `json:"Status,omitempty" name:"Status"`
	// 限流周期，单位秒

	DurationSecond *uint64 `json:"DurationSecond,omitempty" name:"DurationSecond"`
	// 每周期内的限流配额

	DurationQuota *uint64 `json:"DurationQuota,omitempty" name:"DurationQuota"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

type TsfPageConfigReleaseV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置项发布信息数组

	Content []*ConfigRelease `json:"Content,omitempty" name:"Content"`
}

type ResultStatus struct {

	// success任务下发成功/error任务下发失败

	Status *string `json:"Status,omitempty" name:"Status"`
	// success时为"",失败时为对应的错误信息

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// success时为0,失败时为对应错误码

	StatusCode *int64 `json:"StatusCode,omitempty" name:"StatusCode"`
}

type GetClusterLimitResourceResult struct {

	// 最大分配cpu 核数

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配mem内存数，单位M

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
}

type StatisticsEntry struct {

	// 主字段

	PrimeKey *string `json:"PrimeKey,omitempty" name:"PrimeKey"`
	// 附字段

	SubKey *string `json:"SubKey,omitempty" name:"SubKey"`
	// 值

	Value *string `json:"Value,omitempty" name:"Value"`
}

type CreateRegionResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateRegionResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRegionResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLaneRulesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 泳道规则列表

		Result *LaneRules `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLaneRulesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneRulesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLicenseApplicationsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 申请总数

		TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
		// 列表

		Content []*LicenseApplicationRecord `json:"Content,omitempty" name:"Content"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLicenseApplicationsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLicenseApplicationsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLogCapacityResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 使用日志容量大小

		UsedSpace *float64 `json:"UsedSpace,omitempty" name:"UsedSpace"`
		// 日志总容量大小

		Capacity *float64 `json:"Capacity,omitempty" name:"Capacity"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLogCapacityResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLogCapacityResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FieldRef struct {

	// k8s 的 FieldPath

	FieldPath *string `json:"FieldPath,omitempty" name:"FieldPath"`
}

type TsfPageConfigSummary struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 配置项列表

	Content []*ConfigSummary `json:"Content,omitempty" name:"Content"`
}

type FindMonitorObjectRequest struct {
	*tchttp.BaseRequest

	// 关键词id;

	KeywordsId *string `json:"KeywordsId,omitempty" name:"KeywordsId"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *FindMonitorObjectRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindMonitorObjectRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeployGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeDeployGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeployGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InitializeApmResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果true：成功；false：失败；

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *InitializeApmResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *InitializeApmResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLicensesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 许可标签列表分页信息

		Result *TsfPageLicenseTag `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLicensesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLicensesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type HealthCheckSettings struct {

	// 存活健康检查

	LivenessProbe *HealthCheckSetting `json:"LivenessProbe,omitempty" name:"LivenessProbe"`
	// 就绪健康检查

	ReadinessProbe *HealthCheckSetting `json:"ReadinessProbe,omitempty" name:"ReadinessProbe"`
}

type DescribeFileConfigSummaryRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 查询关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 按时间排序：creation_time；按名称排序：config_name

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 升序传 0，降序传 1

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 无

	ConfigTagList []*string `json:"ConfigTagList,omitempty" name:"ConfigTagList"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
	// 无

	ConfigIdList []*string `json:"ConfigIdList,omitempty" name:"ConfigIdList"`
}

func (r *DescribeFileConfigSummaryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigSummaryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerGroupResultV2 struct {

	// 镜像版本列表

	Content []*ContainerGroup `json:"Content,omitempty" name:"Content"`
	// 总记录数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
}

type DescribeKubeInjectConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result *KubeInjectConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeKubeInjectConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeKubeInjectConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTraceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTraceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTraceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ThreadDumpData struct {

	// 线程状态信息

	ThreadStateData []*ThreadStateData `json:"ThreadStateData,omitempty" name:"ThreadStateData"`
	// 线程组信息(同名线程)

	ThreadGroupDataList []*ThreadGroupData `json:"ThreadGroupDataList,omitempty" name:"ThreadGroupDataList"`
	// 线程组总数

	TotalThreadGroupCount *int64 `json:"TotalThreadGroupCount,omitempty" name:"TotalThreadGroupCount"`
	// 本机线程计数数据

	NativeThreadCountData []*NativeThreadCountData `json:"NativeThreadCountData,omitempty" name:"NativeThreadCountData"`
	// 线程trace信息组数

	TotalTraceGroupCount *int64 `json:"TotalTraceGroupCount,omitempty" name:"TotalTraceGroupCount"`
	// 线程trace信息组列表

	ThreadTraceGroupDataList []*ThreadTraceGroupData `json:"ThreadTraceGroupDataList,omitempty" name:"ThreadTraceGroupDataList"`
	// 函数分布总数

	TotalMethodDistCount *int64 `json:"TotalMethodDistCount,omitempty" name:"TotalMethodDistCount"`
	// 线程当前所在函数分布信息列表

	MethodDistDataList []*MethodDistData `json:"MethodDistDataList,omitempty" name:"MethodDistDataList"`
}

type CreateOrUpdateUnitRuleByMultiCloudResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateOrUpdateUnitRuleByMultiCloudResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateOrUpdateUnitRuleByMultiCloudResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ControllerV2 struct {

	// ControllerName

	ControllerName *string `json:"ControllerName,omitempty" name:"ControllerName"`
}

type TriggerReleasePipelineRunTaskActionRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 运行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务操作 "agree", "disagree"

	TaskAction *string `json:"TaskAction,omitempty" name:"TaskAction"`
}

func (r *TriggerReleasePipelineRunTaskActionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *TriggerReleasePipelineRunTaskActionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AgentTask struct {

	// 任务Id

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 查询的实例Id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 任务类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 任务执行状态
	// AVAILABLE(可执行), BUSY(执行中), ERROR(执行出错), COMPLETED(执行成功)

	Status *string `json:"Status,omitempty" name:"Status"`
	// status 为ERROR时该字段才有值.
	// EXCEED_SIZE表示采集数据过大, MAL_FUNC表示内部错误
	// NO_CONNECTION 表示无法和用户进程建立连接, EXECUTE_TIMEOUT 表示任务执行超时

	StatusInfo *string `json:"StatusInfo,omitempty" name:"StatusInfo"`
	// 任务创建时间,格式为(yyyy-MM-dd HH:mm:ss)

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 元数据,该任务的部分请求参数,如火焰图采集时长{"duration":30}

	MetaInfo *string `json:"MetaInfo,omitempty" name:"MetaInfo"`
	// 任务已执行时长, 单位:秒

	ExecutedTime *int64 `json:"ExecutedTime,omitempty" name:"ExecutedTime"`
}

type ScalableRule struct {

	// RuleId值

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
	// Name值

	Name *string `json:"Name,omitempty" name:"Name"`
	// ExpandVmCountLimit值

	ExpandVmCountLimit *int64 `json:"ExpandVmCountLimit,omitempty" name:"ExpandVmCountLimit"`
	// ShrinkVmCountLimit值

	ShrinkVmCountLimit *int64 `json:"ShrinkVmCountLimit,omitempty" name:"ShrinkVmCountLimit"`
	// GroupCount值

	GroupCount *int64 `json:"GroupCount,omitempty" name:"GroupCount"`
	// 备注

	Desc *string `json:"Desc,omitempty" name:"Desc"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 是否关闭指标伸缩, 默认0, 0:打开指标伸缩 1:关闭指标伸缩

	DisableMetricAS *uint64 `json:"DisableMetricAS,omitempty" name:"DisableMetricAS"`
	// 开启定时伸缩规则, 默认0, 0:关闭定时伸缩 1:开启定时伸缩

	EnableCronAS *uint64 `json:"EnableCronAS,omitempty" name:"EnableCronAS"`
}

type DescribeInvocationMetricDataCurveRequest struct {
	*tchttp.BaseRequest

	// 查询开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 查询时间粒度，单位秒可选值：60、3600、86400

	Period *int64 `json:"Period,omitempty" name:"Period"`
	// 查询指标维度

	MetricDimensions []*MetricDimension `json:"MetricDimensions,omitempty" name:"MetricDimensions"`
	// 查询指标名

	Metrics []*Metric `json:"Metrics,omitempty" name:"Metrics"`
	// 视图视角。可选值：SERVER, CLIENT。默认为SERVER

	Kind *string `json:"Kind,omitempty" name:"Kind"`
	// 类型。组件监控使用，可选值：SQL 或者 NoSQL

	Type *string `json:"Type,omitempty" name:"Type"`
}

func (r *DescribeInvocationMetricDataCurveRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationMetricDataCurveRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateApiGroupRequest struct {
	*tchttp.BaseRequest

	// Api 分组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// Api 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// Api 分组描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 鉴权类型

	AuthType *string `json:"AuthType,omitempty" name:"AuthType"`
	// 分组上下文

	GroupContext *string `json:"GroupContext,omitempty" name:"GroupContext"`
	// 命名空间参数key值

	NamespaceNameKey *string `json:"NamespaceNameKey,omitempty" name:"NamespaceNameKey"`
	// 微服务名参数key值

	ServiceNameKey *string `json:"ServiceNameKey,omitempty" name:"ServiceNameKey"`
	// 命名空间参数位置，path，header或query，默认是path

	NamespaceNameKeyPosition *string `json:"NamespaceNameKeyPosition,omitempty" name:"NamespaceNameKeyPosition"`
	// 微服务名参数位置，path，header或query，默认是path

	ServiceNameKeyPosition *string `json:"ServiceNameKeyPosition,omitempty" name:"ServiceNameKeyPosition"`
}

func (r *UpdateApiGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateApiGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteTemplateRequest struct {
	*tchttp.BaseRequest

	// 工程id

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
}

func (r *DeleteTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// 日志配置ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 分组ID列表

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *ReleaseBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFileConfigReleasesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 配置项发布信息列表

		Result *TsfPageFileConfigRelease `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFileConfigReleasesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFileConfigReleasesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLaneGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 泳道部署组列表

		Result *LaneGroups `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLaneGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLaneGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DownloadMsApiRequest struct {
	*tchttp.BaseRequest

	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 导出格式类型

	Type *string `json:"Type,omitempty" name:"Type"`
}

func (r *DownloadMsApiRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DownloadMsApiRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type VmGroupForPageV2 struct {

	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 分组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 分组描述

	GroupDesc *string `json:"GroupDesc,omitempty" name:"GroupDesc"`
	// 分组创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 分组更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 部署组启动参数

	StartupParameters *string `json:"StartupParameters,omitempty" name:"StartupParameters"`
	// 程序包Id

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
}

type GetTopAvgTimeCostInterfacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TopN条目列表

		Result []*StatisticsEntry `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTopAvgTimeCostInterfacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopAvgTimeCostInterfacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PurchaseInfo struct {

	// true 表示可以新购，false 时能够续费

	CanPurchase *bool `json:"CanPurchase,omitempty" name:"CanPurchase"`
	// 规格

	Spec *string `json:"Spec,omitempty" name:"Spec"`
	// 节点数

	NodeSize *int64 `json:"NodeSize,omitempty" name:"NodeSize"`
	// 过期时间 utc时间 单位秒

	ExpireTime *int64 `json:"ExpireTime,omitempty" name:"ExpireTime"`
	// 资源ID

	ResourceId *string `json:"ResourceId,omitempty" name:"ResourceId"`
	// 询价参数 key

	Label *string `json:"Label,omitempty" name:"Label"`
	// 自动续费标记，0 默认，1 自动续费，2 不自动续费

	RenewFlag *int64 `json:"RenewFlag,omitempty" name:"RenewFlag"`
	// CanPurchase 为 false 时，用于判断能否变配

	CanModify *bool `json:"CanModify,omitempty" name:"CanModify"`
	// 询价参数 value

	LabelValue *int64 `json:"LabelValue,omitempty" name:"LabelValue"`
}

type CreateReleaseResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 发布单ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateReleaseResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateReleaseResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterSchedulabilityRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 部署组预分配的CPU资源（单位：核）
	// 用于新建、部署操作时必填；用于扩缩容时可不填

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 部署组预分配的内存资源（单位：M）
	// 用于新建、部署操作时必填；用于扩缩容时可不填

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// Agent容器预分配的CPU资源（单位：M），不填则默认使用tsf默认Agent配置。

	AgentCpuRequest *string `json:"AgentCpuRequest,omitempty" name:"AgentCpuRequest"`
	// Agent容器预分配的内存资源（单位：M），不填则默认使用tsf默认Agent配置。

	AgentMemRequest *string `json:"AgentMemRequest,omitempty" name:"AgentMemRequest"`
	// Istioproxy容器预分配的CPU资源（单位：M），不填则参与计算。

	IstioCpuRequest *string `json:"IstioCpuRequest,omitempty" name:"IstioCpuRequest"`
	// Istioproxy容器预分配的内存资源（单位：M），不填则参与计算。

	IstioMemRequest *string `json:"IstioMemRequest,omitempty" name:"IstioMemRequest"`
}

func (r *DescribeClusterSchedulabilityRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterSchedulabilityRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupReleaseRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeGroupReleaseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupReleaseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务详情

		Result *TaskRecord `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RedoTaskExecuteRequest struct {
	*tchttp.BaseRequest

	// 任务批次ID

	BatchId *string `json:"BatchId,omitempty" name:"BatchId"`
	// 任务执行ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *RedoTaskExecuteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RedoTaskExecuteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ValidateDeleteConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
}

func (r *ValidateDeleteConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ValidateDeleteConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SimpleClusterV2 struct {

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
}

type DescribeAlarmPolicyResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *AlarmPolicyResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAlarmPolicyResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAlarmPolicyResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetClusterLimitResourceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 获取集群limit资源返回参数

		Result *GetClusterLimitResourceResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetClusterLimitResourceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetClusterLimitResourceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListContainGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分组ID

		GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
		// 分组名称

		GroupName []*string `json:"GroupName,omitempty" name:"GroupName"`
		// 实例总数

		InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
		// 已启动实例总数

		CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
		// 创建时间

		CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
		// 镜像server

		Server *string `json:"Server,omitempty" name:"Server"`
		// 镜像名，如/tsf/nginx

		Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
		// 镜像版本名称

		TagName *string `json:"TagName,omitempty" name:"TagName"`
		// 集群id

		ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
		// 集群名称

		ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
		// 命名空间id

		NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
		// 命名空间名称

		NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
		// 预分配cpu 核数，如0.2

		CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
		// 最大分配cpu 核数，如0.6

		CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
		// 预分配内存M数

		MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
		// 最大分配内存M数

		MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
		// 负载均衡ip

		LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
		// Service ip

		ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListContainGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListContainGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGatewayQQMiniProgramLoginPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关插件

		Result *GatewayPluginId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateGatewayQQMiniProgramLoginPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGatewayQQMiniProgramLoginPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApplicationAttributeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 应用列表其它字段返回参数

		Result *ApplicationAttribute `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApplicationAttributeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationAttributeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRoleRequest struct {
	*tchttp.BaseRequest

	// 角色ID

	RoleId *string `json:"RoleId,omitempty" name:"RoleId"`
}

func (r *DescribeRoleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRoleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ZipkinAnnotationV2 struct {

	// 注解值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 注解时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 注解端点信息

	Endpoint *ZipkinEndpointV2 `json:"Endpoint,omitempty" name:"Endpoint"`
}

type DeleteMicroserviceApiResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功：true；失败：false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteMicroserviceApiResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMicroserviceApiResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchStdoutLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 标准输出日志列表

		Result *TsfPageStdoutLogV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchStdoutLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchStdoutLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateUnitRuleRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 规则名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 规则描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 规则项列表

	UnitRuleItemList []*UnitRuleItem `json:"UnitRuleItemList,omitempty" name:"UnitRuleItemList"`
}

func (r *CreateUnitRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateUnitRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiStatusRequest struct {
	*tchttp.BaseRequest

	// 请求路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeApiStatusRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiStatusRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUnitNamespacesRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 根据命名空间名或ID模糊查询

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询每页记录数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeUnitNamespacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitNamespacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayQQMiniProgramAppSecretRequest struct {
	*tchttp.BaseRequest

	// 网关插件Id

	Id *string `json:"Id,omitempty" name:"Id"`
	// QQ小程序AppSecret

	QqAppSecret *string `json:"QqAppSecret,omitempty" name:"QqAppSecret"`
}

func (r *UpdateGatewayQQMiniProgramAppSecretRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayQQMiniProgramAppSecretRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ResourceBatchOperationStatusResult struct {

	// 批次操作的执行结果

	OperationResult *bool `json:"OperationResult,omitempty" name:"OperationResult"`
	// 下一个需要执行操作的批次索引

	BatchNum *uint64 `json:"BatchNum,omitempty" name:"BatchNum"`
}

type Tag struct {

	// 标签键

	TagKey *string `json:"TagKey,omitempty" name:"TagKey"`
	// 标签值

	TagValue *string `json:"TagValue,omitempty" name:"TagValue"`
}

type ConfigTemplate struct {

	// 配置模板Id

	ConfigTemplateId *string `json:"ConfigTemplateId,omitempty" name:"ConfigTemplateId"`
	// 配置模板名称

	ConfigTemplateName *string `json:"ConfigTemplateName,omitempty" name:"ConfigTemplateName"`
	// 配置模板描述

	ConfigTemplateDesc *string `json:"ConfigTemplateDesc,omitempty" name:"ConfigTemplateDesc"`
	// 配置模板对应的微服务框架

	ConfigTemplateType *string `json:"ConfigTemplateType,omitempty" name:"ConfigTemplateType"`
	// 配置模板数据

	ConfigTemplateValue *string `json:"ConfigTemplateValue,omitempty" name:"ConfigTemplateValue"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type PermCat struct {

	// 权限组ID

	PermCatId *string `json:"PermCatId,omitempty" name:"PermCatId"`
	// 权限组名称

	PermCatName *string `json:"PermCatName,omitempty" name:"PermCatName"`
	// 资源ID

	ResourceId *string `json:"ResourceId,omitempty" name:"ResourceId"`
	// 资源名称

	ResourceName *string `json:"ResourceName,omitempty" name:"ResourceName"`
	// 创建时间

	CreationTime *int64 `json:"CreationTime,omitempty" name:"CreationTime"`
	// 最后更新时间

	LastUpdateTime *int64 `json:"LastUpdateTime,omitempty" name:"LastUpdateTime"`
	// 删除标识

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 产品编码

	ServiceCode *string `json:"ServiceCode,omitempty" name:"ServiceCode"`
	// 产品名称

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 权限组描述

	PermCatDesc *string `json:"PermCatDesc,omitempty" name:"PermCatDesc"`
}

type BindApiGroupRequest struct {
	*tchttp.BaseRequest

	// 分组绑定网关列表

	GroupGatewayList []*GatewayGroupIds `json:"GroupGatewayList,omitempty" name:"GroupGatewayList"`
}

func (r *BindApiGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *BindApiGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyLaneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyLaneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyLaneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyTaskFlowResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyTaskFlowResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyTaskFlowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SimpleNamespace struct {

	// 命名空间 ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 命名空间类型

	NamespaceType *string `json:"NamespaceType,omitempty" name:"NamespaceType"`
}

type ModifyAlarmPolicyRequest struct {
	*tchttp.BaseRequest

	// PolicyId

	PolicyId *string `json:"PolicyId,omitempty" name:"PolicyId"`
	// PolicyName

	PolicyName *string `json:"PolicyName,omitempty" name:"PolicyName"`
	// EventPolicies

	EventPolicies []*EventPolicyResult `json:"EventPolicies,omitempty" name:"EventPolicies"`
	// EnabledEmail

	EnabledEmail *int64 `json:"EnabledEmail,omitempty" name:"EnabledEmail"`
	// EnabledSMS

	EnabledSMS *int64 `json:"EnabledSMS,omitempty" name:"EnabledSMS"`
	// Enabled

	Enabled *int64 `json:"Enabled,omitempty" name:"Enabled"`
	// EnabledWeChat

	EnabledWeChat *int64 `json:"EnabledWeChat,omitempty" name:"EnabledWeChat"`
	// EnabledRtx

	EnabledRtx *int64 `json:"EnabledRtx,omitempty" name:"EnabledRtx"`
}

func (r *ModifyAlarmPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyAlarmPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PortsResult struct {

	// PortId值

	PortId *string `json:"PortId,omitempty" name:"PortId"`
	// PortType值

	PortType *string `json:"PortType,omitempty" name:"PortType"`
	// Port值

	Port *string `json:"Port,omitempty" name:"Port"`
	// DefaultPort值

	DefaultPort *string `json:"DefaultPort,omitempty" name:"DefaultPort"`
	// ModuleId值

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// EnableRegInConsul值

	EnableRegInConsul *int64 `json:"EnableRegInConsul,omitempty" name:"EnableRegInConsul"`
}

type DescribeConfigReleasesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页的配置发布信息

		Result *TsfPageConfigRelease `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeConfigReleasesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigReleasesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDownloadInfoRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 程序包仓库ID

	RepositoryId *string `json:"RepositoryId,omitempty" name:"RepositoryId"`
	// 程序包仓库类型

	RepositoryType *string `json:"RepositoryType,omitempty" name:"RepositoryType"`
}

func (r *DescribeDownloadInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDownloadInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFilebeatConfigGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页结果

		Result *GroupInfoPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeFilebeatConfigGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFilebeatConfigGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PagedPermission struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 权限点列表

	Content []*Permission `json:"Content,omitempty" name:"Content"`
}

type DescribeHostResourceUsageResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// TSF实例相关资源信息

		Result *OverviewHostResourceUsage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeHostResourceUsageResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeHostResourceUsageResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyRouteRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true / false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyRouteRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyRouteRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindContainerGroupResultV2 struct {

	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 实例总数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 已启动实例总数

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// NodePort端口，只有公网和NodePort访问方式才有值

	NodePort *string `json:"NodePort,omitempty" name:"NodePort"`
	// 最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 端口数组对象

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 环境变量数组

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 子网id

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
}

type TsfPageAuthRule struct {

	// 总数量

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 微服务权限规则列表

	Content []*AuthRule `json:"Content,omitempty" name:"Content"`
}

type StopInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务Id

		Result *TaskId `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StopInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DockerForUse struct {

	// 仓库中心地址

	Server *string `json:"Server,omitempty" name:"Server"`
	// 用户名

	Username *string `json:"Username,omitempty" name:"Username"`
}

type GatewayPluginId struct {

	// 网关插件ID

	PluginId *string `json:"PluginId,omitempty" name:"PluginId"`
}

type CreateMultiClusterDeliveryConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 新建配置项返回的配置项id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateMultiClusterDeliveryConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMultiClusterDeliveryConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInstanceRequestResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 结果

		Result *InstanceRequests `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInstanceRequestResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceRequestResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyInstanceNamespaceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更换命名空间是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyInstanceNamespaceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyInstanceNamespaceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeNamespaceMicroserviceCountRequest struct {
	*tchttp.BaseRequest

	// 命名空间id

	NamespaceIds []*string `json:"NamespaceIds,omitempty" name:"NamespaceIds"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 步长，单位s：60、3600、86400

	TimeStep *int64 `json:"TimeStep,omitempty" name:"TimeStep"`
}

func (r *DescribeNamespaceMicroserviceCountRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeNamespaceMicroserviceCountRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayTagPlugin struct {

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件创建时间 如:2019-06-20 15:51:28

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 插件更新时间 如:2019-06-20 15:51:28

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
	// 参数配置json串

	TagPluginInfoList *string `json:"TagPluginInfoList,omitempty" name:"TagPluginInfoList"`
}

type DeliverFilebeatConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true 下发成功
		// false 下发失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeliverFilebeatConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeliverFilebeatConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSimpleApplicationsRequest struct {
	*tchttp.BaseRequest

	// 应用ID列表

	ApplicationIdList []*string `json:"ApplicationIdList,omitempty" name:"ApplicationIdList"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 每页条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 资源类型数组

	ApplicationResourceTypeList []*string `json:"ApplicationResourceTypeList,omitempty" name:"ApplicationResourceTypeList"`
	// 通过id和name进行关键词过滤

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 无

	DisableProgramAuthCheck *bool `json:"DisableProgramAuthCheck,omitempty" name:"DisableProgramAuthCheck"`
}

func (r *DescribeSimpleApplicationsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleApplicationsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AppPkgInfoV2 struct {

	// 无

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 无

	PkgCount *int64 `json:"PkgCount,omitempty" name:"PkgCount"`
}

type DescribeSecretNamesRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeSecretNamesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSecretNamesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PkgBind struct {

	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

type DescribeApplicationRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeApplicationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineRunTaskStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 发布单任务执行信息列表

		Result *TsfPageReleaseTaskRun `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasePipelineRunTaskStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineRunTaskStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteLaneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true / false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteLaneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteLaneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupOtherResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 虚拟机部署组信息

		Result *VmGroupOther `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupOtherResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupOtherResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayJwtPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DescribeGatewayJwtPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayJwtPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupUnitApiDailyUseStatistics struct {

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 该API在该命名空间下的总调用次数

	SumReqAmount *string `json:"SumReqAmount,omitempty" name:"SumReqAmount"`
	// 该API在该命名空间下的平均错误率

	AvgFailureRate *string `json:"AvgFailureRate,omitempty" name:"AvgFailureRate"`
	// 该API在该命名空间下的平均响应时间

	AvgTimeCost *string `json:"AvgTimeCost,omitempty" name:"AvgTimeCost"`
	// 监控数据曲线点位图Map集合

	MetricDataPointMap *MetricDataPointMap `json:"MetricDataPointMap,omitempty" name:"MetricDataPointMap"`
	// 状态码分布详情

	TopStatusCode []*ApiUseStatisticsEntity `json:"TopStatusCode,omitempty" name:"TopStatusCode"`
	// 耗时分布详情

	TopTimeCost []*ApiUseStatisticsEntity `json:"TopTimeCost,omitempty" name:"TopTimeCost"`
	// 分位值对象

	Quantile *QuantileEntity `json:"Quantile,omitempty" name:"Quantile"`
}

type ApplicationServerLogContent struct {

	// 日志内容

	LogContent *string `json:"LogContent,omitempty" name:"LogContent"`
	// 时间戳

	Timestamp *string `json:"Timestamp,omitempty" name:"Timestamp"`
	// 日志类型

	LogType *string `json:"LogType,omitempty" name:"LogType"`
}

type CreateMonitorStatisticsPolicyRequest struct {
	*tchttp.BaseRequest

	// 关键词;

	KeyWords *string `json:"KeyWords,omitempty" name:"KeyWords"`
	// 部署组id列表

	GroupIds []*string `json:"GroupIds,omitempty" name:"GroupIds"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateMonitorStatisticsPolicyRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateMonitorStatisticsPolicyRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayQQMiniProgramLoginPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件信息列表

		Result *GatewayQQMiniProgramLoginPlugin `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayQQMiniProgramLoginPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayQQMiniProgramLoginPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListGroupsByScalableRuleIdResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *GroupsByScalableRuleIdList `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListGroupsByScalableRuleIdResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListGroupsByScalableRuleIdResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMachineMonitorRequest struct {
	*tchttp.BaseRequest

	// 1

	From *string `json:"From,omitempty" name:"From"`
	// 1

	SortFiled *string `json:"SortFiled,omitempty" name:"SortFiled"`
	// 1

	Status *string `json:"Status,omitempty" name:"Status"`
	// 1

	TimeGranularity *string `json:"TimeGranularity,omitempty" name:"TimeGranularity"`
	// 1

	To *string `json:"To,omitempty" name:"To"`
	// 1

	TsfModuleNames []*string `json:"TsfModuleNames,omitempty" name:"TsfModuleNames"`
	// 查询的机器Ip

	MachineIp *string `json:"MachineIp,omitempty" name:"MachineIp"`
}

func (r *DescribeMachineMonitorRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMachineMonitorRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowBatchHistoryRecordsRequest struct {
	*tchttp.BaseRequest

	// 工作流批次 ID

	FlowBatchId *string `json:"FlowBatchId,omitempty" name:"FlowBatchId"`
	// 开始时间

	StartTime *int64 `json:"StartTime,omitempty" name:"StartTime"`
	// 截止时间

	EndTime *int64 `json:"EndTime,omitempty" name:"EndTime"`
	// 查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 单页查询的数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 工作流 ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
	// 状态

	State *string `json:"State,omitempty" name:"State"`
}

func (r *DescribeFlowBatchHistoryRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowBatchHistoryRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GatewayOAuthPlugin struct {

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 插件类型

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件创建时间 如:2019-06-20 15:51:28

	CreatedTime *string `json:"CreatedTime,omitempty" name:"CreatedTime"`
	// 插件更新时间 如:2019-06-20 15:51:28

	UpdatedTime *string `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 验证token路径

	TokenAuthUrl *string `json:"TokenAuthUrl,omitempty" name:"TokenAuthUrl"`
	// 验证token请求方法:get/post

	TokenAuthMethod *string `json:"TokenAuthMethod,omitempty" name:"TokenAuthMethod"`
	// 认证请求超时时间,单位:秒 范围:0~30

	ExpireTime *int64 `json:"ExpireTime,omitempty" name:"ExpireTime"`
	// 重定向地址

	RedirectUrl *string `json:"RedirectUrl,omitempty" name:"RedirectUrl"`
	// token携带位置，网关取token位置与发送认证请求时token位置一致,值:query/header

	TokenBaggagePosition *string `json:"TokenBaggagePosition,omitempty" name:"TokenBaggagePosition"`
	// token的key值

	TokenKeyName *string `json:"TokenKeyName,omitempty" name:"TokenKeyName"`
	// payload的映射参数名称

	PayloadMappingName *string `json:"PayloadMappingName,omitempty" name:"PayloadMappingName"`
	// payload映射到后端服务的携带位置,值:query/header

	PayloadMappingPosition *string `json:"PayloadMappingPosition,omitempty" name:"PayloadMappingPosition"`
	// 发布状态: drafted/released

	Status *string `json:"Status,omitempty" name:"Status"`
}

type DescribeReleasePipelineResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 阶段数组

		Stages []*ReleaseStage `json:"Stages,omitempty" name:"Stages"`
		// 主帐号

		Uin *string `json:"Uin,omitempty" name:"Uin"`
		// 操作人子帐号

		SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
		// 操作人昵称

		Nickname *string `json:"Nickname,omitempty" name:"Nickname"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasePipelineResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SynchronizeContainerClusterRequest struct {
	*tchttp.BaseRequest

	// 容器平台的集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群描述

	ClusterDesc *string `json:"ClusterDesc,omitempty" name:"ClusterDesc"`
	// 集群所属TSF地域

	TsfRegionId *string `json:"TsfRegionId,omitempty" name:"TsfRegionId"`
	// 集群所属TSF可用区

	TsfZoneId *string `json:"TsfZoneId,omitempty" name:"TsfZoneId"`
	// 需要绑定的数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// 容器集群类型

	ContainerClusterType *string `json:"ContainerClusterType,omitempty" name:"ContainerClusterType"`
}

func (r *SynchronizeContainerClusterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SynchronizeContainerClusterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssSurroundBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 日志列表

		Result *TsfPageBusinessLogV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchOssSurroundBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssSurroundBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StopTaskExecuteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作成功 or 失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *StopTaskExecuteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StopTaskExecuteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MsV2 struct {

	// MsName

	MsName *string `json:"MsName,omitempty" name:"MsName"`
	// MsPort

	MsPort *string `json:"MsPort,omitempty" name:"MsPort"`
	// Controller

	Controller []*Controller `json:"Controller,omitempty" name:"Controller"`
	// Provider

	Provider []*Provider `json:"Provider,omitempty" name:"Provider"`
	// Consumer

	Consumer []*Consumer `json:"Consumer,omitempty" name:"Consumer"`
}

type TsfPageSimpleClusterV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 简单集群列表

	Content []*SimpleCluster `json:"Content,omitempty" name:"Content"`
}

type DescribeOverviewEventRequest struct {
	*tchttp.BaseRequest

	// 查询开始时间。格式为 yyyy-MM-dd HH:mm:ss

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 查询结束时间。格式为 yyyy-MM-dd HH:mm:ss

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 事件过滤器

	Filters []*EventFilter `json:"Filters,omitempty" name:"Filters"`
}

func (r *DescribeOverviewEventRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeOverviewEventRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type FindContainerGroupsRequest struct {
	*tchttp.BaseRequest

	// 关键字，按照分组名

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 排序字段，默认为 createTime字段，支持id， name， createTime字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，默认为1：倒序排序，0：正序，1：倒序

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量，默认为0，从0开始

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *FindContainerGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindContainerGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerInstanceResourceConfig struct {

	// 实例导入方式，可多个，公有云为 ["R"]，独立版的取值有 "M" 脚本模式、"S" SSH 模式

	ImportMode []*string `json:"ImportMode,omitempty" name:"ImportMode"`
	// SSH 模式时，前端应该限制用户填这个数量的 master 主机信息

	MasterNumLimit *int64 `json:"MasterNumLimit,omitempty" name:"MasterNumLimit"`
	// SSH 模式时，前端应该限制用户填的最高数量的 node 主机信息

	NodeNumLimitPerSetup *int64 `json:"NodeNumLimitPerSetup,omitempty" name:"NodeNumLimitPerSetup"`
}

type TsfPageRegion struct {

	// TSF地域总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// TSF地域列表

	Content []*TsfRegion `json:"Content,omitempty" name:"Content"`
}

type AddInstanceRequest struct {
	*tchttp.BaseRequest

	// 集群Id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 机器Id列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
	// 操作系统名称

	OsName *string `json:"OsName,omitempty" name:"OsName"`
	// 操作系统镜像Id

	ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
	// 重装系统密码设置

	Password *string `json:"Password,omitempty" name:"Password"`
	// 重装系统，关联秘钥设置

	KeyId *string `json:"KeyId,omitempty" name:"KeyId"`
	// 安全组设置

	SgId *string `json:"SgId,omitempty" name:"SgId"`
	// 云主机导入方式，虚拟机集群必填，容器集群不填写此字段，R：重装TSF系统镜像，M：手动安装agent

	InstanceImportMode *string `json:"InstanceImportMode,omitempty" name:"InstanceImportMode"`
}

func (r *AddInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AddInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterCpuTypeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterCpuTypeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterCpuTypeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ValidateLogSchemaResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 校验结果

		Result *BusinessLogPatternAnalysis `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ValidateLogSchemaResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ValidateLogSchemaResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CloudMonitorMicroservice struct {

	// namespaceId

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// namespaceName

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// microserviceId

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// microserviceName

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
}

type ReleaseSidecarFilterRequest struct {
	*tchttp.BaseRequest

	// 过滤器Id

	FilterId *string `json:"FilterId,omitempty" name:"FilterId"`
	// 过滤器关联的部署组

	FilterGroupList []*SidecarFilterGroup `json:"FilterGroupList,omitempty" name:"FilterGroupList"`
}

func (r *ReleaseSidecarFilterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseSidecarFilterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeliveryConfigsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 投递项关联部署组信息

		Result *DeliveryConfigBindGroups `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeDeliveryConfigsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeliveryConfigsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayMonitorOverviewResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 监控概览对象

		Result *MonitorOverview `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayMonitorOverviewResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayMonitorOverviewResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DraftPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DraftPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DraftPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInterfaceStatisticRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务名

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 方法名

	Method *string `json:"Method,omitempty" name:"Method"`
}

func (r *DescribeInterfaceStatisticRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInterfaceStatisticRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRouteRuleRequest struct {
	*tchttp.BaseRequest

	// 路由规则所属微服务

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 路由规则名称

	RouteRuleName *string `json:"RouteRuleName,omitempty" name:"RouteRuleName"`
	// 路由规则类型，包括标签路由和权重标签，标签路由： T , 权重路由： W

	RouteRuleType *string `json:"RouteRuleType,omitempty" name:"RouteRuleType"`
	// 路由规则描述信息

	RouteRuleDesc *string `json:"RouteRuleDesc,omitempty" name:"RouteRuleDesc"`
	// 标签路由规则项

	TagRouteItemList []*TagRouteItemList `json:"TagRouteItemList,omitempty" name:"TagRouteItemList"`
	// 权重路由规则项

	WeightRouteItemList []*WeightRouteItemList `json:"WeightRouteItemList,omitempty" name:"WeightRouteItemList"`
}

func (r *CreateRouteRuleRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRouteRuleRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeployContainerGroupByPlainYamlResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署结果

		Result *DeployContainerGroupByPlainYamlResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeployContainerGroupByPlainYamlResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeployContainerGroupByPlainYamlResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeLicenseApplicationContentResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 申请文件正文

		ApplyContent *string `json:"ApplyContent,omitempty" name:"ApplyContent"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeLicenseApplicationContentResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeLicenseApplicationContentResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MultiCloudUnitGatewayConfig struct {

	// 网关实例ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 超云TsfId

	TsfId *string `json:"TsfId,omitempty" name:"TsfId"`
	// 服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 服务名称

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 访问模式

	AccessMode *string `json:"AccessMode,omitempty" name:"AccessMode"`
	// 地址

	Addrs []*string `json:"Addrs,omitempty" name:"Addrs"`
}

type RouteDestItemV2 struct {

	// 路由规则路由目标匹配项ID

	RouteDestItemId *string `json:"RouteDestItemId,omitempty" name:"RouteDestItemId"`
	// 路由规则目标字段名称

	DestItemField *string `json:"DestItemField,omitempty" name:"DestItemField"`
	// 路由规则目标字段取值

	DestItemValue *string `json:"DestItemValue,omitempty" name:"DestItemValue"`
	// 所属路由规则路由目标ID

	RouteDestId *string `json:"RouteDestId,omitempty" name:"RouteDestId"`
}

type LaneRuleTag struct {

	// 标签ID

	TagId *string `json:"TagId,omitempty" name:"TagId"`
	// 标签名

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 标签操作符

	TagOperator *string `json:"TagOperator,omitempty" name:"TagOperator"`
	// 标签值

	TagValue *string `json:"TagValue,omitempty" name:"TagValue"`
	// 泳道规则ID

	LaneRuleId *string `json:"LaneRuleId,omitempty" name:"LaneRuleId"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type CreateApiGroupRequest struct {
	*tchttp.BaseRequest

	// 分组名称, 不能包含中文

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 分组上下文

	GroupContext *string `json:"GroupContext,omitempty" name:"GroupContext"`
	// 鉴权类型。secret： 密钥鉴权； none:无鉴权

	AuthType *string `json:"AuthType,omitempty" name:"AuthType"`
	// 备注

	Description *string `json:"Description,omitempty" name:"Description"`
	// 分组类型,默认ms。 ms： 微服务分组； external:外部Api分组

	GroupType *string `json:"GroupType,omitempty" name:"GroupType"`
	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 命名空间参数key值

	NamespaceNameKey *string `json:"NamespaceNameKey,omitempty" name:"NamespaceNameKey"`
	// 微服务名参数key值

	ServiceNameKey *string `json:"ServiceNameKey,omitempty" name:"ServiceNameKey"`
	// 命名空间参数位置，path，header或query，默认是path

	NamespaceNameKeyPosition *string `json:"NamespaceNameKeyPosition,omitempty" name:"NamespaceNameKeyPosition"`
	// 微服务名参数位置，path，header或query，默认是path

	ServiceNameKeyPosition *string `json:"ServiceNameKeyPosition,omitempty" name:"ServiceNameKeyPosition"`
}

func (r *CreateApiGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateApiGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteCircuitBreakerRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteCircuitBreakerRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteCircuitBreakerRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventTrendResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 事件趋势结果

		Result []*EventDataCurveResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeEventTrendResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventTrendResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GraphEdge struct {

	// 来源服务名

	SourceName *string `json:"SourceName,omitempty" name:"SourceName"`
	// 目标服务名

	TargetName *string `json:"TargetName,omitempty" name:"TargetName"`
	// 来源服务类型

	SourceType *string `json:"SourceType,omitempty" name:"SourceType"`
	// 目标服务类型

	TargetType *string `json:"TargetType,omitempty" name:"TargetType"`
	// 服务间总请求量

	ReqTotalQty *uint64 `json:"ReqTotalQty,omitempty" name:"ReqTotalQty"`
	// 服务间成功请求量

	ReqSuccessQty *uint64 `json:"ReqSuccessQty,omitempty" name:"ReqSuccessQty"`
	// 服务间失败请求量

	ReqFailedQty *uint64 `json:"ReqFailedQty,omitempty" name:"ReqFailedQty"`
	// 服务间每分钟平均请求量

	ReqPerMin *float64 `json:"ReqPerMin,omitempty" name:"ReqPerMin"`
	// 服务间平均耗时（毫秒）

	AvgDurationMs *float64 `json:"AvgDurationMs,omitempty" name:"AvgDurationMs"`
}

type RepositoryErrorV2 struct {

	// 无

	Code *string `json:"Code,omitempty" name:"Code"`
	// 无

	Message *string `json:"Message,omitempty" name:"Message"`
}

type TsfPageZipkinTraceInfo struct {

	// 总条目数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 调用链列表

	Content []*ZipkinTraceInfo `json:"Content,omitempty" name:"Content"`
}

type ZipkinMetadataV2 struct {

	// 元数据值

	Value *string `json:"Value,omitempty" name:"Value"`
	// 元数据时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// 元数据端点信息

	Endpoint *ZipkinEndpointV2 `json:"Endpoint,omitempty" name:"Endpoint"`
}

type CreateZoneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateZoneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateZoneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchRealtimeMeshLogRequest struct {
	*tchttp.BaseRequest

	// 机器实例ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 实时日志基准时间戳

	RealtimeTs *uint64 `json:"RealtimeTs,omitempty" name:"RealtimeTs"`
	// 检索关键词

	SearchWords []*string `json:"SearchWords,omitempty" name:"SearchWords"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// mesh 组件类型

	Type *int64 `json:"Type,omitempty" name:"Type"`
}

func (r *SearchRealtimeMeshLogRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchRealtimeMeshLogRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeletePathRewritesRequest struct {
	*tchttp.BaseRequest

	// 路径重写规则IDs

	PathRewriteIds []*string `json:"PathRewriteIds,omitempty" name:"PathRewriteIds"`
}

func (r *DeletePathRewritesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeletePathRewritesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteAuthorizationRequest struct {
	*tchttp.BaseRequest

	// 权限规则ID

	RuleId *string `json:"RuleId,omitempty" name:"RuleId"`
}

func (r *DeleteAuthorizationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteAuthorizationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageGatewayPluginInstance struct {

	// 记录总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 记录实体列表

	Content []*GatewayPluginInstance `json:"Content,omitempty" name:"Content"`
}

type ListAlarmReceiverResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*AlarmReceiverResult `json:"Content,omitempty" name:"Content"`
}

type DescribeResourceUsageConfigRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeResourceUsageConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeResourceUsageConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DisableUnitRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableUnitRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableUnitRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineRunsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 发布单执行流水列表

		Result *TsfPageReleaseRunInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeReleasePipelineRunsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineRunsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUsableApisResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Api信息列表

		Result *TsfPageApiDetailInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUsableApisResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUsableApisResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OverviewInstanceResourceUsage struct {

	// 集群数目

	ClusterCount *int64 `json:"ClusterCount,omitempty" name:"ClusterCount"`
	// 实例总数目

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 异常集群数目

	UnNormalClusterCount *int64 `json:"UnNormalClusterCount,omitempty" name:"UnNormalClusterCount"`
	// 异常实例数目

	UnNormalInstanceCount *int64 `json:"UnNormalInstanceCount,omitempty" name:"UnNormalInstanceCount"`
	// 运行中实例数目

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 停止实例数目

	OffInstanceCount *int64 `json:"OffInstanceCount,omitempty" name:"OffInstanceCount"`
}

type Person struct {

	// 接收成员电话

	CellPhoneNumber *string `json:"CellPhoneNumber,omitempty" name:"CellPhoneNumber"`
	// 接收成员email

	Email *string `json:"Email,omitempty" name:"Email"`
	// 接收成员的名字

	Name *string `json:"Name,omitempty" name:"Name"`
}

type DescribeConfigTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ConfigTemplate `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeConfigTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeConfigTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGroupSecretRequest struct {
	*tchttp.BaseRequest

	// 秘钥ID

	GwSecretId *string `json:"GwSecretId,omitempty" name:"GwSecretId"`
}

func (r *UpdateGroupSecretRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGroupSecretRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteTaskFlowRequest struct {
	*tchttp.BaseRequest

	// 工作ID

	FlowId *string `json:"FlowId,omitempty" name:"FlowId"`
}

func (r *DeleteTaskFlowRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteTaskFlowRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinesLogConfigAssociatedGroupV2 struct {

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 部署组所属应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 部署组所属应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 部署组所属应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 部署组所属命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 部署组所属命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 部署组所属集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 部署组所属集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 部署组所属集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 部署组关联日志配置时间

	AssociatedTime *string `json:"AssociatedTime,omitempty" name:"AssociatedTime"`
}

type EventDetail struct {

	// 总数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 事件详情

	Content []*Event `json:"Content,omitempty" name:"Content"`
}

type DeleteMachinesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteMachinesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMachinesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePublicConfigReleaseLogsRequest struct {
	*tchttp.BaseRequest

	// 命名空间ID，不传入时查询全量

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 偏移量，默认为0

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数，默认为20

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribePublicConfigReleaseLogsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePublicConfigReleaseLogsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type InvocationStatistics struct {

	// 请求健康概览统计成功请求数

	ReqSuccessStats []*StatisticsCoord `json:"ReqSuccessStats,omitempty" name:"ReqSuccessStats"`
	// 请求健康概览统计失败请求数

	ReqFailedStats []*StatisticsCoord `json:"ReqFailedStats,omitempty" name:"ReqFailedStats"`
	// 请求健康概览统计状态码分布

	ReqStatusStats []*StatisticsCoord `json:"ReqStatusStats,omitempty" name:"ReqStatusStats"`
	// 请求时延概览统计时延分布

	ReqDurationStats []*StatisticsCoord `json:"ReqDurationStats,omitempty" name:"ReqDurationStats"`
	// 请求并发概览统计并发请求次数

	ReqQuantityStats []*StatisticsCoord `json:"ReqQuantityStats,omitempty" name:"ReqQuantityStats"`
}

type PingTsfByMultiCloudResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *PingTsfByMultiCloudResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *PingTsfByMultiCloudResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageBusinessLog struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 业务日志列表

	Content []*BusinessLog `json:"Content,omitempty" name:"Content"`
}

type VolumeMountInfo struct {

	// 挂载数据卷名称

	VolumeMountName *string `json:"VolumeMountName,omitempty" name:"VolumeMountName"`
	// 挂载路径

	VolumeMountPath *string `json:"VolumeMountPath,omitempty" name:"VolumeMountPath"`
	// 挂载子路径

	VolumeMountSubPath *string `json:"VolumeMountSubPath,omitempty" name:"VolumeMountSubPath"`
	// 读写，1：读 2：读写

	ReadOrWrite *string `json:"ReadOrWrite,omitempty" name:"ReadOrWrite"`
}

type DescribeRouteReleaseHistoryRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 微服务Id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeRouteReleaseHistoryRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRouteReleaseHistoryRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ShrinkGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *ShrinkGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ShrinkGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateApplicationRequest struct {
	*tchttp.BaseRequest

	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 应用类型，V：虚拟机应用；C：容器应用；S：serverless应用

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 应用描述

	ApplicationDesc *string `json:"ApplicationDesc,omitempty" name:"ApplicationDesc"`
	// 应用日志配置项，废弃参数

	ApplicationLogConfig *string `json:"ApplicationLogConfig,omitempty" name:"ApplicationLogConfig"`
	// 应用微服务类型，M：service mesh应用；N：普通应用；G：网关应用

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 应用资源类型，废弃参数

	ApplicationResourceType *string `json:"ApplicationResourceType,omitempty" name:"ApplicationResourceType"`
	// 应用runtime类型

	ApplicationRuntimeType *string `json:"ApplicationRuntimeType,omitempty" name:"ApplicationRuntimeType"`
	// 需要绑定的数据集ID

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// 服务配置信息列表

	ServiceConfigList []*ServiceConfig `json:"ServiceConfigList,omitempty" name:"ServiceConfigList"`
	// 忽略创建镜像仓库

	IgnoreCreateImageRepository *bool `json:"IgnoreCreateImageRepository,omitempty" name:"IgnoreCreateImageRepository"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreateApplicationRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateApplicationRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateCircuitBreakerRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 规则ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateCircuitBreakerRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateCircuitBreakerRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AuthRuleGroup struct {

	// 规则列表

	Rules []*AuthRule `json:"Rules,omitempty" name:"Rules"`
	// 规则列表计算逻辑

	RuleProgram *string `json:"RuleProgram,omitempty" name:"RuleProgram"`
	// 权限类型，D：未启用；B：黑名单模式；W：白名单模式

	Type *string `json:"Type,omitempty" name:"Type"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

type DescribeUnitNamespaceListRequest struct {
	*tchttp.BaseRequest

	// 主键ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 主键ID数组

	UnitNamespaceList []*string `json:"UnitNamespaceList,omitempty" name:"UnitNamespaceList"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 关联超云单元ID

	DestUnitId *string `json:"DestUnitId,omitempty" name:"DestUnitId"`
	// 关联超云单元Name

	DestUnitName *string `json:"DestUnitName,omitempty" name:"DestUnitName"`
	// 命名空间ID数组

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
	// 关联超云单元ID数组

	DestUnitIdList []*string `json:"DestUnitIdList,omitempty" name:"DestUnitIdList"`
}

func (r *DescribeUnitNamespaceListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitNamespaceListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRouteResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路由ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateRouteResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRouteResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SubTransaction struct {

	// 事务ID

	TransactionId *string `json:"TransactionId,omitempty" name:"TransactionId"`
	// 事务服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 事务调用方法

	MethodName *string `json:"MethodName,omitempty" name:"MethodName"`
	// 事务开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 事务结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 事务状态

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// 事务触发类型

	InvokeType *int64 `json:"InvokeType,omitempty" name:"InvokeType"`
	// 事务参数

	Args *string `json:"Args,omitempty" name:"Args"`
}

type TsfPageMeshLog struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// mesh日志 列表

	Content []*MeshLog `json:"Content,omitempty" name:"Content"`
	// 游标Id

	ScrollId *string `json:"ScrollId,omitempty" name:"ScrollId"`
	// 查询状态

	Status *string `json:"Status,omitempty" name:"Status"`
}

type DescribeSidecarFiltersRequest struct {
	*tchttp.BaseRequest

	// 每一位为展示条数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 翻页偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
}

func (r *DescribeSidecarFiltersRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSidecarFiltersRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSidecarMetricsRequest struct {
	*tchttp.BaseRequest

	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
}

func (r *DescribeSidecarMetricsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSidecarMetricsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeJavaInstanceRequest struct {
	*tchttp.BaseRequest

	// 查询的实例Id列表

	InstanceIds []*string `json:"InstanceIds,omitempty" name:"InstanceIds"`
	// 标识是否需要返回实例基本信息,默认false

	BaseEnable *bool `json:"BaseEnable,omitempty" name:"BaseEnable"`
	// 微服务Id, 当baseEnable为true的时候此项为必填

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
}

func (r *DescribeJavaInstanceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeJavaInstanceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetTopologyGraphResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 服务（节点）集合

		Result []*GraphNodeV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetTopologyGraphResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetTopologyGraphResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteAlarmReceiversRequest struct {
	*tchttp.BaseRequest

	// ReceiverIds

	ReceiverIds []*string `json:"ReceiverIds,omitempty" name:"ReceiverIds"`
}

func (r *DeleteAlarmReceiversRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteAlarmReceiversRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：创建成功；false：创建失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AddClusterInstancesRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 云主机ID列表

	InstanceIdList []*string `json:"InstanceIdList,omitempty" name:"InstanceIdList"`
	// 操作系统名称

	OsName *string `json:"OsName,omitempty" name:"OsName"`
	// 操作系统镜像ID

	ImageId *string `json:"ImageId,omitempty" name:"ImageId"`
	// 重装系统密码设置

	Password *string `json:"Password,omitempty" name:"Password"`
	// 重装系统，关联密钥设置

	KeyId *string `json:"KeyId,omitempty" name:"KeyId"`
	// 安全组设置

	SgId *string `json:"SgId,omitempty" name:"SgId"`
	// 云主机导入方式，虚拟机集群必填，容器集群不填写此字段，R：重装TSF系统镜像，M：手动安装agent

	InstanceImportMode *string `json:"InstanceImportMode,omitempty" name:"InstanceImportMode"`
	// 镜像定制类型

	OsCustomizeType *string `json:"OsCustomizeType,omitempty" name:"OsCustomizeType"`
	// 镜像特征ID列表

	FeatureIdList []*string `json:"FeatureIdList,omitempty" name:"FeatureIdList"`
	// 实例额外需要设置参数信息

	InstanceAdvancedSettings *InstanceAdvancedSettings `json:"InstanceAdvancedSettings,omitempty" name:"InstanceAdvancedSettings"`
	// 安全组 ID 列表

	SecurityGroupIds []*string `json:"SecurityGroupIds,omitempty" name:"SecurityGroupIds"`
}

func (r *AddClusterInstancesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AddClusterInstancesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeZonesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ListTsfZoneResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeZonesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeZonesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageInstanceV2 struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 机器实例列表

	Content []*Instance `json:"Content,omitempty" name:"Content"`
}

type DescribeTaskFlowResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 工作流详情信息

		Result *TaskFlowLog `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskFlowResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskFlowResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageVmSubTaskV2 struct {

	// 子任务总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 成功子任务数目

	SuccessCount *int64 `json:"SuccessCount,omitempty" name:"SuccessCount"`
	// 运行中子任务数目

	RunCount *int64 `json:"RunCount,omitempty" name:"RunCount"`
	// 失败子任务数目

	FailCount *int64 `json:"FailCount,omitempty" name:"FailCount"`
	// 子任务列表信息

	Content []*VmSubTask `json:"Content,omitempty" name:"Content"`
}

type GetContainGroupDeployInfo struct {

	// GroupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动的实例数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 预分配cpu 核数，如0.2，

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 最大分配cpu 核数，如0.6

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 预分配内存M数

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 最大分配内存M数

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 数组

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// jvm参数

	JvmOpts *string `json:"JvmOpts,omitempty" name:"JvmOpts"`
	// 无用

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 无用

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 无用

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 无用

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 无用

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 无用

	KuberneteApiServer *string `json:"KuberneteApiServer,omitempty" name:"KuberneteApiServer"`
	// 无用

	KuberneteUser *string `json:"KuberneteUser,omitempty" name:"KuberneteUser"`
	// 无用

	KubernetePassword *string `json:"KubernetePassword,omitempty" name:"KubernetePassword"`
	// 无用

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 无用

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 无用

	GroupComment *string `json:"GroupComment,omitempty" name:"GroupComment"`
	// 无用

	PodId *string `json:"PodId,omitempty" name:"PodId"`
	// 无用

	PodName *string `json:"PodName,omitempty" name:"PodName"`
	// 无用

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// 无用

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// 无用

	NodePort *string `json:"NodePort,omitempty" name:"NodePort"`
	// 无用

	IsStop *string `json:"IsStop,omitempty" name:"IsStop"`
	// 无用

	Status *string `json:"Status,omitempty" name:"Status"`
	// 无用

	Message *string `json:"Message,omitempty" name:"Message"`
	// 无用

	ChangType *int64 `json:"ChangType,omitempty" name:"ChangType"`
	// 无用

	ChangNum *int64 `json:"ChangNum,omitempty" name:"ChangNum"`
	// 无用

	IsFirst *int64 `json:"IsFirst,omitempty" name:"IsFirst"`
	// 无用

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 无用

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 无用

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 无用

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// 无用

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 无用

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 无用

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
}

type Ms struct {

	// MsName

	MsName *string `json:"MsName,omitempty" name:"MsName"`
	// MsPort

	MsPort *string `json:"MsPort,omitempty" name:"MsPort"`
	// Controller

	Controller []*Controller `json:"Controller,omitempty" name:"Controller"`
	// Provider

	Provider []*Provider `json:"Provider,omitempty" name:"Provider"`
	// Consumer

	Consumer []*Consumer `json:"Consumer,omitempty" name:"Consumer"`
}

type DescribeStatisticsRequest struct {
	*tchttp.BaseRequest

	// 命名空间Id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 类型：Interface、Service、Group、Instance、SQL、NoSQL

	Type *string `json:"Type,omitempty" name:"Type"`
	// 步长，单位s：60、3600、86400

	TimeStep *uint64 `json:"TimeStep,omitempty" name:"TimeStep"`
	// 排序字段:AvgTimeConsuming[默认]、RequestCount、ErrorRate。实例监控还支持 CpuPercent

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式：ASC:0、DESC:1

	OrderType *uint64 `json:"OrderType,omitempty" name:"OrderType"`
	// 开始时间：年月日 时分秒2020-05-12 14:43:12

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 开始时间：年月日 时分秒2020-05-12 14:43:12

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 偏移量，取值范围大于等于0，默认值为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 单页请求配置数量，取值范围[1, 50]，默认值为10

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 服务名称

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 搜索关键词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 维度

	MetricDimensionValues []*MetricDimensionValue `json:"MetricDimensionValues,omitempty" name:"MetricDimensionValues"`
	// 聚合关键词

	BucketKey *string `json:"BucketKey,omitempty" name:"BucketKey"`
	// 数据库

	DbName *string `json:"DbName,omitempty" name:"DbName"`
	// 命名空间id数组

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
}

func (r *DescribeStatisticsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeStatisticsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RunReleaseRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
}

func (r *RunReleaseRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RunReleaseRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterGroupCountResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 集群信息

		Result *OverviewGroupResourceUsage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterGroupCountResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterGroupCountResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RollbackConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项发布历史ID

	ConfigReleaseLogId *string `json:"ConfigReleaseLogId,omitempty" name:"ConfigReleaseLogId"`
	// 回滚描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
}

func (r *RollbackConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RollbackConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTransactionResp struct {

	// 主事务详情

	Transaction *TxMainTransaction `json:"Transaction,omitempty" name:"Transaction"`
	// 查询主事务异常信息

	Error *TxError `json:"Error,omitempty" name:"Error"`
}

type GroupsByScalableRuleIdListV2 struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*GroupsByScalableRuleId `json:"Content,omitempty" name:"Content"`
}

type DescribeInvocationMetricDataDimensionRequest struct {
	*tchttp.BaseRequest

	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 开始index

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 聚合维度

	DimensionName *string `json:"DimensionName,omitempty" name:"DimensionName"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 维度

	MetricDimensionValues []*MetricDimensionValue `json:"MetricDimensionValues,omitempty" name:"MetricDimensionValues"`
}

func (r *DescribeInvocationMetricDataDimensionRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInvocationMetricDataDimensionRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeDeliveryConfigByGroupIdResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 投递kafak配置项

		Result *SimpleKafkaDeliveryConfig `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeDeliveryConfigByGroupIdResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeDeliveryConfigByGroupIdResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSidecarFilterNamesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 过滤器名称列表

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSidecarFilterNamesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSidecarFilterNamesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskGroupsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分组查询列表

		Result *TaskGroupPage `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskGroupsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskGroupsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetApmEsAuthInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetApmEsAuthInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetApmEsAuthInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCommonPkgRequest struct {
	*tchttp.BaseRequest

	// searchWord

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeCommonPkgRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCommonPkgRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RedoTaskBatchResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 批次ID

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *RedoTaskBatchResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *RedoTaskBatchResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApmTaskStatusResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 任务执行状态以及详情

		Result *AgentTask `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApmTaskStatusResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApmTaskStatusResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayOAuthPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
}

func (r *DescribeGatewayOAuthPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayOAuthPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type IpListResult struct {

	// InstanceId

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// Ip

	Ip *string `json:"Ip,omitempty" name:"Ip"`
	// UserName

	UserName *string `json:"UserName,omitempty" name:"UserName"`
	// Password

	Password *string `json:"Password,omitempty" name:"Password"`
	// machineId

	MachineId *string `json:"MachineId,omitempty" name:"MachineId"`
}

type DeleteZoneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteZoneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteZoneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateAndDownloadTemplateResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateAndDownloadTemplateResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateAndDownloadTemplateResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ProjectListV2 struct {

	// 工程id

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
	// 工程名

	ProjectName *string `json:"ProjectName,omitempty" name:"ProjectName"`
	// 包路径

	BasePackage *string `json:"BasePackage,omitempty" name:"BasePackage"`
	// 修改时间

	LastTime *int64 `json:"LastTime,omitempty" name:"LastTime"`
	// AppId

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// Uin

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// SubAccountUin

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
	// Data

	Data *string `json:"Data,omitempty" name:"Data"`
}

type DescribeAuthorizationInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 鉴权规则列表

		Result *TsfPageAuthorization `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeAuthorizationInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeAuthorizationInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchTraceRequest struct {
	*tchttp.BaseRequest

	// 调用方服务名

	CallerServiceName *string `json:"CallerServiceName,omitempty" name:"CallerServiceName"`
	// 被调方服务名

	CalleeServiceName *string `json:"CalleeServiceName,omitempty" name:"CalleeServiceName"`
	// 调用方接口名

	CallerInterfaceName *string `json:"CallerInterfaceName,omitempty" name:"CallerInterfaceName"`
	// 被调方接口名

	CalleeInterfaceName *string `json:"CalleeInterfaceName,omitempty" name:"CalleeInterfaceName"`
	// 错误码

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// 错误信息

	ErrMsg *string `json:"ErrMsg,omitempty" name:"ErrMsg"`
	// 是否仅展示错误调用链

	ErrorTrace *bool `json:"ErrorTrace,omitempty" name:"ErrorTrace"`
	// 调用方IP

	CallerIp *string `json:"CallerIp,omitempty" name:"CallerIp"`
	// 被调方IP

	CalleeIp *string `json:"CalleeIp,omitempty" name:"CalleeIp"`
	// 最小耗时

	MinDuration *uint64 `json:"MinDuration,omitempty" name:"MinDuration"`
	// 最长耗时

	MaxDuration *uint64 `json:"MaxDuration,omitempty" name:"MaxDuration"`
	// 排序方式，支持"timestamp"和"duration"

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方向，支持"asc"和"desc"

	OrderType *string `json:"OrderType,omitempty" name:"OrderType"`
	// 返回trace数目，取值范围[0, 100]，默认值20

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 搜索开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 搜索结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// TSF集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// TSF命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 查询trace偏移量

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 用户自定义标签

	Tags *string `json:"Tags,omitempty" name:"Tags"`
	// 入口span的服务名

	RootService *string `json:"RootService,omitempty" name:"RootService"`
	// 入口span的接口

	RootInterface *string `json:"RootInterface,omitempty" name:"RootInterface"`
	// 入口ip

	RootIp *string `json:"RootIp,omitempty" name:"RootIp"`
	// 调用链traceId

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 查询非根节点调用链

	IncludeNonRoot *bool `json:"IncludeNonRoot,omitempty" name:"IncludeNonRoot"`
}

func (r *SearchTraceRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchTraceRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CloudMonitorMicroserviceResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*CloudMonitorMicroservice `json:"Content,omitempty" name:"Content"`
}

type DescribeContainerTasksRequest struct {
	*tchttp.BaseRequest

	// 搜索字段，模糊搜索taskId字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 操作列表所属applicationId

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 任务执行时间范围，格式："2017-10-01 10:03:27"

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 任务执行时间范围，格式："2017-11-01 10:03:27"

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 排序字段，默认为updateTime（修改时间字段）， 支持id， createTime， updateTime

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式，默认为1：倒序排序，0：正序，1：倒序

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// v

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数，默认为20， 取值应为1~50

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeContainerTasksRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeContainerTasksRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeReleasePipelineDeployTaskRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 执行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
	// 任务节点ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
}

func (r *DescribeReleasePipelineDeployTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineDeployTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupUseStatisticsEntity struct {

	// API 路径

	ApiPath *string `json:"ApiPath,omitempty" name:"ApiPath"`
	// 服务名

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// 统计值

	Value *string `json:"Value,omitempty" name:"Value"`
	// API ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
}

type DescribeApplicationsRequest struct {
	*tchttp.BaseRequest

	// 搜索字段

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 应用的微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 应用资源类型数组

	ApplicationResourceTypeList []*string `json:"ApplicationResourceTypeList,omitempty" name:"ApplicationResourceTypeList"`
	// IdList

	ApplicationIdList []*string `json:"ApplicationIdList,omitempty" name:"ApplicationIdList"`
}

func (r *DescribeApplicationsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ClusterV2 struct {

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群描述

	ClusterDesc *string `json:"ClusterDesc,omitempty" name:"ClusterDesc"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 集群所属私有网络ID

	VpcId *string `json:"VpcId,omitempty" name:"VpcId"`
	// 集群状态

	ClusterStatus *string `json:"ClusterStatus,omitempty" name:"ClusterStatus"`
	// 集群CIDR

	ClusterCIDR *string `json:"ClusterCIDR,omitempty" name:"ClusterCIDR"`
	// 集群总CPU，单位: 核

	ClusterTotalCpu *float64 `json:"ClusterTotalCpu,omitempty" name:"ClusterTotalCpu"`
	// 集群总内存，单位: G

	ClusterTotalMem *float64 `json:"ClusterTotalMem,omitempty" name:"ClusterTotalMem"`
	// 集群已使用CPU，单位: 核

	ClusterUsedCpu *float64 `json:"ClusterUsedCpu,omitempty" name:"ClusterUsedCpu"`
	// 集群已使用内存，单位: G

	ClusterUsedMem *float64 `json:"ClusterUsedMem,omitempty" name:"ClusterUsedMem"`
	// 集群机器实例数量

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 集群运行中的机器实例数量

	RunInstanceCount *int64 `json:"RunInstanceCount,omitempty" name:"RunInstanceCount"`
	// 集群正常状态的机器实例数量

	NormalInstanceCount *int64 `json:"NormalInstanceCount,omitempty" name:"NormalInstanceCount"`
	// 删除标记：true：可以删除；false：不可删除

	DeleteFlag *bool `json:"DeleteFlag,omitempty" name:"DeleteFlag"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 集群所属TSF地域ID

	TsfRegionId *string `json:"TsfRegionId,omitempty" name:"TsfRegionId"`
	// 集群所属TSF地域名称

	TsfRegionName *string `json:"TsfRegionName,omitempty" name:"TsfRegionName"`
	// 集群所属TSF可用区ID

	TsfZoneId *string `json:"TsfZoneId,omitempty" name:"TsfZoneId"`
	// 集群所属TSF可用区名称

	TsfZoneName *string `json:"TsfZoneName,omitempty" name:"TsfZoneName"`
	// 集群不可删除的原因

	DeleteFlagReason *string `json:"DeleteFlagReason,omitempty" name:"DeleteFlagReason"`
	// 集群所属私有网络子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 集群剩余 cpu limit

	ClusterLimitCpu *string `json:"ClusterLimitCpu,omitempty" name:"ClusterLimitCpu"`
	// 集群剩余 memory limit

	ClusterLimitMem *string `json:"ClusterLimitMem,omitempty" name:"ClusterLimitMem"`
	// 运行服务实例数

	RunServiceInstanceCount *int64 `json:"RunServiceInstanceCount,omitempty" name:"RunServiceInstanceCount"`
	// 给前端的按钮控制信息

	OperationInfo *OperationInfo `json:"OperationInfo,omitempty" name:"OperationInfo"`
	// 容器集群版本

	ClusterVersion *string `json:"ClusterVersion,omitempty" name:"ClusterVersion"`
	// 部署组总数

	GroupCount *uint64 `json:"GroupCount,omitempty" name:"GroupCount"`
	// 运行中部署组数

	RunGroupCount *uint64 `json:"RunGroupCount,omitempty" name:"RunGroupCount"`
	// 停止中部署组数

	StopGroupCount *uint64 `json:"StopGroupCount,omitempty" name:"StopGroupCount"`
	// 异常部署组数

	AbnormalGroupCount *uint64 `json:"AbnormalGroupCount,omitempty" name:"AbnormalGroupCount"`
	// 集群备注名

	ClusterRemarkName *string `json:"ClusterRemarkName,omitempty" name:"ClusterRemarkName"`
	// api地址

	KuberneteApiServer *string `json:"KuberneteApiServer,omitempty" name:"KuberneteApiServer"`
	// K : kubeconfig, S : service account

	KuberneteNativeType *string `json:"KuberneteNativeType,omitempty" name:"KuberneteNativeType"`
	// native secret

	KuberneteNativeSecret *string `json:"KuberneteNativeSecret,omitempty" name:"KuberneteNativeSecret"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
	// 无

	MaxClusterServiceNum *int64 `json:"MaxClusterServiceNum,omitempty" name:"MaxClusterServiceNum"`
	// 无

	MaxNodePodNum *int64 `json:"MaxNodePodNum,omitempty" name:"MaxNodePodNum"`
	// 无

	ProgramId *string `json:"ProgramId,omitempty" name:"ProgramId"`
	// 无

	KubeAuthValid *bool `json:"KubeAuthValid,omitempty" name:"KubeAuthValid"`
	// 无

	Unbind *bool `json:"Unbind,omitempty" name:"Unbind"`
}

type CosDownloadInfo struct {

	// 桶名称

	Bucket *string `json:"Bucket,omitempty" name:"Bucket"`
	// 地域

	Region *string `json:"Region,omitempty" name:"Region"`
	// 路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 鉴权信息

	Credentials *CosCredentials `json:"Credentials,omitempty" name:"Credentials"`
}

type InstanceInfo struct {

	// 实例id

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 部署id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 实例ip

	InstanceIp *string `json:"InstanceIp,omitempty" name:"InstanceIp"`
}

type ManagerJobInfoPage struct {

	// 无

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 无

	Content []*ManagerJobInfo `json:"Content,omitempty" name:"Content"`
}

type TsfPageImageFeature struct {

	// 镜像特征总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 镜像特征列表

	Content []*ImageFeature `json:"Content,omitempty" name:"Content"`
}

type OverviewMsResult struct {

	// 概览页运行微服务数目（dubbo 的会按 ip 聚合）

	RunMicroserviceCount *int64 `json:"RunMicroserviceCount,omitempty" name:"RunMicroserviceCount"`
	// 概览页微服务在线实例数目

	RunMicroserviceInstanceCount *int64 `json:"RunMicroserviceInstanceCount,omitempty" name:"RunMicroserviceInstanceCount"`
}

type TsfPageBuildTask struct {

	// 总个数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 构建任务列表

	Content []*BuildTaskInfo `json:"Content,omitempty" name:"Content"`
}

type CreateUnitNamespacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateUnitNamespacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateUnitNamespacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteMachinesRequest struct {
	*tchttp.BaseRequest

	// 机器列表

	MachineList []*MachineList `json:"MachineList,omitempty" name:"MachineList"`
}

func (r *DeleteMachinesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteMachinesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInterfaceListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 相应结果

		Result *TsfApiListResponse `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeInterfaceListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInterfaceListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// groupId， null表示创建失败

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteSidecarFilterRequest struct {
	*tchttp.BaseRequest

	// 过滤器ID

	FilterId *string `json:"FilterId,omitempty" name:"FilterId"`
}

func (r *DeleteSidecarFilterRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteSidecarFilterRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageRepositoryV2 struct {

	// 仓库名,含命名空间,如tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 仓库类型

	Repotype *string `json:"Repotype,omitempty" name:"Repotype"`
	// 镜像版本数

	TagCount *int64 `json:"TagCount,omitempty" name:"TagCount"`
	// 是否公共,1:公有,0:私有

	IsPublic *int64 `json:"IsPublic,omitempty" name:"IsPublic"`
	// 是否被用户收藏。true：是，false：否

	IsUserFavor *bool `json:"IsUserFavor,omitempty" name:"IsUserFavor"`
	// 是否是腾讯云官方仓库。 是否是腾讯云官方仓库。true：是，false：否

	IsQcloudOfficial *bool `json:"IsQcloudOfficial,omitempty" name:"IsQcloudOfficial"`
	// 被所有用户收藏次数

	FavorCount *int64 `json:"FavorCount,omitempty" name:"FavorCount"`
	// 拉取次数

	PullCount *int64 `json:"PullCount,omitempty" name:"PullCount"`
	// 描述内容

	Description *string `json:"Description,omitempty" name:"Description"`
	// 创建时间

	CreationTime *string `json:"CreationTime,omitempty" name:"CreationTime"`
	// 更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
}

type ContainerGroupDetailV2 struct {

	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 负载均衡ip

	LbIp *string `json:"LbIp,omitempty" name:"LbIp"`
	// 应用类型

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// Service ip

	ClusterIp *string `json:"ClusterIp,omitempty" name:"ClusterIp"`
	// NodePort端口，只有公网和NodePort访问方式才有值

	NodePort *int64 `json:"NodePort,omitempty" name:"NodePort"`
	// 最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *uint64 `json:"AccessType,omitempty" name:"AccessType"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 端口数组对象

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 环境变量数组对象

	Envs []*Env `json:"Envs,omitempty" name:"Envs"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// pod错误信息描述

	Message *string `json:"Message,omitempty" name:"Message"`
	// 部署组状态

	Status *string `json:"Status,omitempty" name:"Status"`
	// 服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 子网id

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
}

type DeleteGroupSecretRequest struct {
	*tchttp.BaseRequest

	// 秘钥ID

	GwSecretId *string `json:"GwSecretId,omitempty" name:"GwSecretId"`
}

func (r *DeleteGroupSecretRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGroupSecretRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeProductNewsRequest struct {
	*tchttp.BaseRequest

	// id

	NewsId *string `json:"NewsId,omitempty" name:"NewsId"`
	// 是否有效

	Valid *int64 `json:"Valid,omitempty" name:"Valid"`
	// 每页数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 起始偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 使用缓存（已废弃）

	CacheAble *bool `json:"CacheAble,omitempty" name:"CacheAble"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
	// 是否发布状态(租户端:true,运营端false. 默认false)

	Released *bool `json:"Released,omitempty" name:"Released"`
	// 页面位置。多个可以逗号隔开aa,bb

	Page *string `json:"Page,omitempty" name:"Page"`
}

func (r *DescribeProductNewsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeProductNewsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRepositoryResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 查询的仓库信息

		Result *RepositoryInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRepositoryResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRepositoryResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RepositoryError struct {

	// 无

	Code *string `json:"Code,omitempty" name:"Code"`
	// 无

	Message *string `json:"Message,omitempty" name:"Message"`
}

type DescribeGroupsWithPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API分组信息列表

		Result *TsfPageApiGroupInfo `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGroupsWithPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGroupsWithPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyTsfZoneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyTsfZoneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyTsfZoneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableRouteRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableRouteRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableRouteRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type RouteReleaseHistory struct {

	// 路由规则发布记录id

	RouteReleaseLogId *string `json:"RouteReleaseLogId,omitempty" name:"RouteReleaseLogId"`
	// 微服务id

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 路由规则Id

	RouteRuleId *string `json:"RouteRuleId,omitempty" name:"RouteRuleId"`
	// 路由规则部署开始时间

	EnableTime *string `json:"EnableTime,omitempty" name:"EnableTime"`
	// 路由规则停止时间

	DisableTime *string `json:"DisableTime,omitempty" name:"DisableTime"`
	// 路由规则发布

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
	// 路由规则详情

	RouteRule *RouteRule `json:"RouteRule,omitempty" name:"RouteRule"`
	// 账号APPID

	AppId *string `json:"AppId,omitempty" name:"AppId"`
	// 账号Owner用户唯一ID

	Uin *string `json:"Uin,omitempty" name:"Uin"`
	// 账号用户唯一ID

	SubAccountUin *string `json:"SubAccountUin,omitempty" name:"SubAccountUin"`
}

type TsfPageTraceSpanInfo struct {

	// 总数

	TotalCount *uint64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// span列表

	Content []*TraceSpanInfo `json:"Content,omitempty" name:"Content"`
}

type CreateTsfZoneResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateTsfZoneResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateTsfZoneResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AuthConditionV2 struct {

	// 标签类型

	TagType *string `json:"TagType,omitempty" name:"TagType"`
	// 标签名

	TagField *string `json:"TagField,omitempty" name:"TagField"`
	// 标签运算符

	TagOperator *string `json:"TagOperator,omitempty" name:"TagOperator"`
	// 标签值

	TagValue *string `json:"TagValue,omitempty" name:"TagValue"`
	// 标签ID

	TagId *int64 `json:"TagId,omitempty" name:"TagId"`
}

type LaneInfo struct {

	// 泳道ID

	LaneId *string `json:"LaneId,omitempty" name:"LaneId"`
	// 泳道名称

	LaneName *string `json:"LaneName,omitempty" name:"LaneName"`
	// 泳道备注

	Remark *string `json:"Remark,omitempty" name:"Remark"`
	// 创建时间

	CreateTime *int64 `json:"CreateTime,omitempty" name:"CreateTime"`
	// 更新时间

	UpdateTime *int64 `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 泳道部署组

	LaneGroupList []*LaneGroup `json:"LaneGroupList,omitempty" name:"LaneGroupList"`
	// 是否入口应用

	Entrance *bool `json:"Entrance,omitempty" name:"Entrance"`
	// 泳道已经关联部署组的命名空间列表

	NamespaceIdList []*string `json:"NamespaceIdList,omitempty" name:"NamespaceIdList"`
}

type PagedResource struct {

	// 总条数

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 资源列表

	Content []*Resource `json:"Content,omitempty" name:"Content"`
}

type DescribeGatewayInstancesByMultiCloudResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 网关实体分页列表

		Result *TsfPageGatewayInstance `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayInstancesByMultiCloudResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayInstancesByMultiCloudResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TsfPageRouteV2 struct {

	// 服务路由总数目

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// 服务路由详情列表

	Content []*RouteV2 `json:"Content,omitempty" name:"Content"`
}

type ZipkinSpanInfo struct {

	// Span ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 调用链ID

	TraceId *string `json:"TraceId,omitempty" name:"TraceId"`
	// 父Span ID

	ParentId *string `json:"ParentId,omitempty" name:"ParentId"`
	// Span名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// Span时间戳

	Timestamp *uint64 `json:"Timestamp,omitempty" name:"Timestamp"`
	// Span耗时

	Duration *uint64 `json:"Duration,omitempty" name:"Duration"`
	// Span结果

	ResultStatus *string `json:"ResultStatus,omitempty" name:"ResultStatus"`
	// Span服务名（前端展示）

	ServiceName *string `json:"ServiceName,omitempty" name:"ServiceName"`
	// Span注解列表

	AnnotationList []*ZipkinAnnotation `json:"AnnotationList,omitempty" name:"AnnotationList"`
	// Span二进制注解列表

	BinaryAnnotationList []*ZipkinBinaryAnnotation `json:"BinaryAnnotationList,omitempty" name:"BinaryAnnotationList"`
	// Span元数据列表

	MetadataList []*ZipkinMetadata `json:"MetadataList,omitempty" name:"MetadataList"`
}

type UpdateUploadInfoRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 调用GetUploadInfo接口时返回的软件包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// COS返回上传结果（默认为0：成功，其他值表示失败）

	Result *int64 `json:"Result,omitempty" name:"Result"`
	// 程序包MD5

	Md5 *string `json:"Md5,omitempty" name:"Md5"`
	// 程序包大小

	Size *int64 `json:"Size,omitempty" name:"Size"`
}

func (r *UpdateUploadInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateUploadInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeViewsRequest struct {
	*tchttp.BaseRequest
}

func (r *DescribeViewsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeViewsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateBusinessLogConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 更新结果true：创建成功；false：创建失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateBusinessLogConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateBusinessLogConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GroupInfo struct {

	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 绑定时间

	AssociateTime *string `json:"AssociateTime,omitempty" name:"AssociateTime"`
}

type DescribeApplicationBusinessLogConfigRequest struct {
	*tchttp.BaseRequest

	// TSF应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
}

func (r *DescribeApplicationBusinessLogConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApplicationBusinessLogConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMicroServiceSummaryListRequest struct {
	*tchttp.BaseRequest

	// NamespaceId值

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// MicroserviceName值

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// Offset值

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// Limit值

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeMicroServiceSummaryListRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroServiceSummaryListRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateDeliveryConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 新建配置项返回的配置项id

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateDeliveryConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateDeliveryConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeMsApiListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 相应结果

		Result *TsfApiListResponse `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMsApiListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMsApiListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRegionsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *ListTsfRegionResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRegionsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRegionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateServiceInstanceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateServiceInstanceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateServiceInstanceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskExecuteLogInfoRequest struct {
	*tchttp.BaseRequest

	// 任务执行 ID

	ExecuteId *string `json:"ExecuteId,omitempty" name:"ExecuteId"`
	// 任务执行历史ID

	ExecuteLogId *string `json:"ExecuteLogId,omitempty" name:"ExecuteLogId"`
}

func (r *DescribeTaskExecuteLogInfoRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteLogInfoRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayApiRequest struct {
	*tchttp.BaseRequest

	// API ID

	ApiId *string `json:"ApiId,omitempty" name:"ApiId"`
	// API 路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// Api 请求方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 请求映射

	PathMapping *string `json:"PathMapping,omitempty" name:"PathMapping"`
	// api所在服务host

	Host *string `json:"Host,omitempty" name:"Host"`
	// api描述信息

	Description *string `json:"Description,omitempty" name:"Description"`
}

func (r *UpdateGatewayApiRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayApiRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeEventDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 事件详情结果

		Result *EventDetail `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeEventDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeEventDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeRouteRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 路由规则信息

		Result *RouteRule `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeRouteRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeRouteRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ContainerGroupDeployV2 struct {

	// groupId

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 实例总数

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 已启动实例总数

	CurrentNum *int64 `json:"CurrentNum,omitempty" name:"CurrentNum"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// ProtocolPorts

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新间隔,单位秒

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// jvm参数

	JvmOpts *string `json:"JvmOpts,omitempty" name:"JvmOpts"`
	// 子网id

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
}

type InstanceV2 struct {

	// 机器ID

	InstanceId *string `json:"InstanceId,omitempty" name:"InstanceId"`
	// 机器名称

	InstanceName *string `json:"InstanceName,omitempty" name:"InstanceName"`
	// 机器内网地址ip

	LanIp *string `json:"LanIp,omitempty" name:"LanIp"`
	// 机器外网地址ip

	WanIp *string `json:"WanIp,omitempty" name:"WanIp"`
	// 机器描述信息

	InstanceDesc *string `json:"InstanceDesc,omitempty" name:"InstanceDesc"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// VM的状态 虚机：虚机的状态 容器：Pod所在虚机的状态

	InstanceStatus *string `json:"InstanceStatus,omitempty" name:"InstanceStatus"`
	// VM的可使用状态 虚机：虚机是否能够作为资源使用 容器：虚机是否能够作为资源部署POD

	InstanceAvailableStatus *string `json:"InstanceAvailableStatus,omitempty" name:"InstanceAvailableStatus"`
	// 服务下的服务实例的状态 虚机：应用是否可用 + Agent状态 容器：Pod状态

	ServiceInstanceStatus *string `json:"ServiceInstanceStatus,omitempty" name:"ServiceInstanceStatus"`
	// 标识此instance是否已添加在tsf中

	CountInTsf *int64 `json:"CountInTsf,omitempty" name:"CountInTsf"`
	// 机器所属分组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 机器所属应用Id

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 机器所属应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 机器实例在cvm的创建时间

	InstanceCreatedTime *string `json:"InstanceCreatedTime,omitempty" name:"InstanceCreatedTime"`
	// 机器实例在CVM的过期时间

	InstanceExpiredTime *string `json:"InstanceExpiredTime,omitempty" name:"InstanceExpiredTime"`
	// 机器实例在CVM的计费模式

	InstanceChargeType *string `json:"InstanceChargeType,omitempty" name:"InstanceChargeType"`
	// 机器实例总CPU信息

	InstanceTotalCpu *float64 `json:"InstanceTotalCpu,omitempty" name:"InstanceTotalCpu"`
	// 机器实例总内存信息

	InstanceTotalMem *float64 `json:"InstanceTotalMem,omitempty" name:"InstanceTotalMem"`
	// 机器实例使用的CPU信息

	InstanceUsedCpu *float64 `json:"InstanceUsedCpu,omitempty" name:"InstanceUsedCpu"`
	// 机器实例使用的内存信息

	InstanceUsedMem *float64 `json:"InstanceUsedMem,omitempty" name:"InstanceUsedMem"`
	// 机器实例limitCPU信息

	InstanceLimitCpu *float64 `json:"InstanceLimitCpu,omitempty" name:"InstanceLimitCpu"`
	// 机器实例limit内存信息

	InstanceLimitMem *float64 `json:"InstanceLimitMem,omitempty" name:"InstanceLimitMem"`
	// 包版本

	InstancePkgVersion *string `json:"InstancePkgVersion,omitempty" name:"InstancePkgVersion"`
	// 集群类型

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
	// 机器实例业务状态

	RestrictState *string `json:"RestrictState,omitempty" name:"RestrictState"`
	// 最后更新时间

	UpdateTime *string `json:"UpdateTime,omitempty" name:"UpdateTime"`
	// 实例执行状态

	OperationState *int64 `json:"OperationState,omitempty" name:"OperationState"`
}

type DeleteNamespaceResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 删除命名空间是否成功。
		// true：删除成功。
		// false：删除失败。

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteNamespaceResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteNamespaceResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGlobalGroupContextUniqueRestrictResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGlobalGroupContextUniqueRestrictResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGlobalGroupContextUniqueRestrictResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type UpdateGatewayApiResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 返回结果，成功失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *UpdateGatewayApiResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayApiResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type SearchOssRealtimeBusinessLogResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 实时日志集合

		Result *RealtimeLogSet `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *SearchOssRealtimeBusinessLogResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *SearchOssRealtimeBusinessLogResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ListGroupPodResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 实例名称(对应到kubernetes的pod名称)

		PodName *string `json:"PodName,omitempty" name:"PodName"`
		// 实例ID(对应到kubernetes的pod id)

		PodId *string `json:"PodId,omitempty" name:"PodId"`
		// 主机IP

		NodeIp *string `json:"NodeIp,omitempty" name:"NodeIp"`
		// 实例IP

		Ip *string `json:"Ip,omitempty" name:"Ip"`
		// 实例中容器的重启次数

		RestartCount *int64 `json:"RestartCount,omitempty" name:"RestartCount"`
		// 实例中已就绪容器的个数

		ReadyCount *int64 `json:"ReadyCount,omitempty" name:"ReadyCount"`
		// 运行时长

		Runtime *string `json:"Runtime,omitempty" name:"Runtime"`
		// 实例启动时间

		CreatedAt *string `json:"CreatedAt,omitempty" name:"CreatedAt"`
		// 容器数组

		Containers []*string `json:"Containers,omitempty" name:"Containers"`
		// 容器名称

		Name *string `json:"Name,omitempty" name:"Name"`
		// 容器id(docker id)

		ContainerId *string `json:"ContainerId,omitempty" name:"ContainerId"`
		// 容器状态：
		// Running ：正常运行中
		// Waiting：等待运行中，例如正在下载镜像
		// Terminating：实例有容器正在终止
		// Terminated：实例有容器已经终止
		// NotReady：实例有容器处于未就绪状态，比如容器的健康检查失败
		// Error：其他未知异常

		Status *string `json:"Status,omitempty" name:"Status"`
		// 容器处于当前状态的原因，例如下载镜像失败

		Reason *string `json:"Reason,omitempty" name:"Reason"`
		// 容器的镜像

		Image *string `json:"Image,omitempty" name:"Image"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ListGroupPodResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ListGroupPodResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateUnitNamespacesRequest struct {
	*tchttp.BaseRequest

	// 网关实体ID

	GatewayInstanceId *string `json:"GatewayInstanceId,omitempty" name:"GatewayInstanceId"`
	// 单元化命名空间对象列表

	UnitNamespaceList []*UnitNamespace `json:"UnitNamespaceList,omitempty" name:"UnitNamespaceList"`
}

func (r *CreateUnitNamespacesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateUnitNamespacesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteGatewayPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteGatewayPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteGatewayPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeCommonGroupAttributeResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 部署组通用额外属性

		Result *CommonGroupAttribute `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeCommonGroupAttributeResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeCommonGroupAttributeResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTemplateRequest struct {
	*tchttp.BaseRequest

	// 工程id

	ProjectId *string `json:"ProjectId,omitempty" name:"ProjectId"`
}

func (r *DescribeTemplateRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTemplateRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyRouteRequest struct {
	*tchttp.BaseRequest

	// 路由ID

	RouteId *string `json:"RouteId,omitempty" name:"RouteId"`
	// 路由名称

	RouteName *string `json:"RouteName,omitempty" name:"RouteName"`
	// 路由描述

	RouteDesc *string `json:"RouteDesc,omitempty" name:"RouteDesc"`
	// 路由规则列表

	RuleList []*RouteRuleV2 `json:"RuleList,omitempty" name:"RuleList"`
}

func (r *ModifyRouteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyRouteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MsRunningApplicationV2 struct {

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用名称

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
}

type DeleteContainerGroupsRequest struct {
	*tchttp.BaseRequest

	// 无

	GroupIdList []*string `json:"GroupIdList,omitempty" name:"GroupIdList"`
}

func (r *DeleteContainerGroupsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteContainerGroupsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type OperateKubeInjectResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result *OperateKubeInjectResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *OperateKubeInjectResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *OperateKubeInjectResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type MetricDimensionValue struct {

	// 维度名

	Name *string `json:"Name,omitempty" name:"Name"`
	// 维度值

	Value []*string `json:"Value,omitempty" name:"Value"`
}

type CronRule struct {

	// 策略周期 * * * ，三个范围，第一个是天，第二个是月，第三个是周，中间用空格隔开, 例子：* * * （每天） * * 0-3 （每周日到周三） 1,11,21 * *（每个月1号，11号，21号）

	Period *string `json:"Period,omitempty" name:"Period"`
	// 定时伸缩策略详情列表

	Schedules []*CronSchedule `json:"Schedules,omitempty" name:"Schedules"`
	// 策略优先级，值越大优先级越高，0为最小值

	Priority *uint64 `json:"Priority,omitempty" name:"Priority"`
}

type DisableTaskResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作成功 or 失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DisableTaskResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DisableTaskResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type StartServerlessGroupRequest struct {
	*tchttp.BaseRequest

	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *StartServerlessGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *StartServerlessGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type BusinessLogConfigSchemaV2 struct {

	// 解析规则类型

	SchemaType *int64 `json:"SchemaType,omitempty" name:"SchemaType"`
	// 解析规则内容

	SchemaContent *string `json:"SchemaContent,omitempty" name:"SchemaContent"`
	// 解析规则时间格式

	SchemaDateFormat *string `json:"SchemaDateFormat,omitempty" name:"SchemaDateFormat"`
	// 解析规则对应的多行匹配规则

	SchemaMultilinePattern *string `json:"SchemaMultilinePattern,omitempty" name:"SchemaMultilinePattern"`
	// 解析规则创建时间

	SchemaCreateTime *string `json:"SchemaCreateTime,omitempty" name:"SchemaCreateTime"`
	// 解析规则内容，包含解析规则时间格式和解析规则内容

	SchemaPatternLayout *string `json:"SchemaPatternLayout,omitempty" name:"SchemaPatternLayout"`
	// 模拟解析的日志内容

	SchemaLogMessage *string `json:"SchemaLogMessage,omitempty" name:"SchemaLogMessage"`
}

type DescribeHostResourceUsageRequest struct {
	*tchttp.BaseRequest

	// 是否无视权限查询全租户的，默认 true

	All *bool `json:"All,omitempty" name:"All"`
}

func (r *DescribeHostResourceUsageRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeHostResourceUsageRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSimpleNamespacesResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 命名空间分页列表

		Result *TsfPageNamespace `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeSimpleNamespacesResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSimpleNamespacesResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type AssociateFilebeatConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 是否成功

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *AssociateFilebeatConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *AssociateFilebeatConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type CreateRoleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true: 创建成功；false: 创建失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *CreateRoleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateRoleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayOAuthPluginResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 插件信息列表

		Result *GatewayOAuthPlugin `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayOAuthPluginResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayOAuthPluginResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeApiDetailResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// API 详情

		Result *ApiDetailResponse `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeApiDetailResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeApiDetailResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ImageUserIsExistsRequest struct {
	*tchttp.BaseRequest
}

func (r *ImageUserIsExistsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ImageUserIsExistsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskRecordSimpleInfo struct {

	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 任务名称

	TaskName *string `json:"TaskName,omitempty" name:"TaskName"`
}

type TsfMiscroserviceApi struct {

	// 微服务ID

	Id *string `json:"Id,omitempty" name:"Id"`
	// 路径

	Path *string `json:"Path,omitempty" name:"Path"`
	// 方法

	Method *string `json:"Method,omitempty" name:"Method"`
	// 包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 微服务ID

	MicroserviceId *string `json:"MicroserviceId,omitempty" name:"MicroserviceId"`
	// 命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 微服务名称

	MicroserviceName *string `json:"MicroserviceName,omitempty" name:"MicroserviceName"`
	// 描述

	Description *string `json:"Description,omitempty" name:"Description"`
}

type DescribeClusterVersionsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 支持的容器集群版本列表

		Result []*string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeClusterVersionsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterVersionsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribePathRewriteRequest struct {
	*tchttp.BaseRequest

	// 路径重写规则ID

	PathRewriteId *string `json:"PathRewriteId,omitempty" name:"PathRewriteId"`
}

func (r *DescribePathRewriteRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribePathRewriteRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSubTasksRequest struct {
	*tchttp.BaseRequest

	// 应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 任务ID

	TaskId *string `json:"TaskId,omitempty" name:"TaskId"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量大小

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页大小

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
	// 批次索引

	BatchNum *uint64 `json:"BatchNum,omitempty" name:"BatchNum"`
}

func (r *DescribeSubTasksRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSubTasksRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeInstanceMetricsRequest struct {
	*tchttp.BaseRequest

	// 网关部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 开始时间

	StartTime *string `json:"StartTime,omitempty" name:"StartTime"`
	// 结束时间

	EndTime *string `json:"EndTime,omitempty" name:"EndTime"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 偏移量，默认为0

	Offset *uint64 `json:"Offset,omitempty" name:"Offset"`
	// 每页条数，默认为20

	Limit *uint64 `json:"Limit,omitempty" name:"Limit"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序类型：0(ASC)或1(DESC)，默认为降序排列

	OrderType *uint64 `json:"OrderType,omitempty" name:"OrderType"`
	// 网关应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 区分虚机、容器

	ClusterType *string `json:"ClusterType,omitempty" name:"ClusterType"`
}

func (r *DescribeInstanceMetricsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeInstanceMetricsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeUnitRulesV2Response struct {
	*tchttp.BaseResponse

	Response *struct {
		// 分页列表信息

		Result *TsfPageUnitRuleV2 `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeUnitRulesV2Response) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeUnitRulesV2Response) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ApplicationApiAccess struct {

	// 发布状态: SUCCEEDED/FAILED

	Status *string `json:"Status,omitempty" name:"Status"`
	// 系统给该服务自动分配的域名

	SubDomain *string `json:"SubDomain,omitempty" name:"SubDomain"`
	// ApiGateway 服务ID

	ServiceId *string `json:"ServiceId,omitempty" name:"ServiceId"`
	// 协议类型

	Protocol *string `json:"Protocol,omitempty" name:"Protocol"`
}

type ListApplicationServerResult struct {

	// TotalCount

	TotalCount *int64 `json:"TotalCount,omitempty" name:"TotalCount"`
	// Content

	Content []*ApplicationServerResult `json:"Content,omitempty" name:"Content"`
}

type CreatePublicConfigRequest struct {
	*tchttp.BaseRequest

	// 配置项名称

	ConfigName *string `json:"ConfigName,omitempty" name:"ConfigName"`
	// 配置项版本

	ConfigVersion *string `json:"ConfigVersion,omitempty" name:"ConfigVersion"`
	// 配置项版本描述

	ConfigVersionDesc *string `json:"ConfigVersionDesc,omitempty" name:"ConfigVersionDesc"`
	// 配置项值，总是接收yaml格式的内容

	ConfigValue *string `json:"ConfigValue,omitempty" name:"ConfigValue"`
	// 配置项类型

	ConfigType *string `json:"ConfigType,omitempty" name:"ConfigType"`
	// Base64编码的配置项

	EncodeWithBase64 *bool `json:"EncodeWithBase64,omitempty" name:"EncodeWithBase64"`
	// 无

	ProgramIdList []*string `json:"ProgramIdList,omitempty" name:"ProgramIdList"`
}

func (r *CreatePublicConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreatePublicConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteConfigResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// true：删除成功；false：删除失败

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteConfigResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteConfigResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ProductNews struct {

	// id

	NewsId *string `json:"NewsId,omitempty" name:"NewsId"`
	// 内容

	Content *string `json:"Content,omitempty" name:"Content"`
	// 链接

	Link *string `json:"Link,omitempty" name:"Link"`
	// 排序

	Order *int64 `json:"Order,omitempty" name:"Order"`
	// 样式Flag

	StyleFlag *string `json:"StyleFlag,omitempty" name:"StyleFlag"`
	// 是否有效

	Valid *int64 `json:"Valid,omitempty" name:"Valid"`
	// 生效时间（当valid从0 -> 1，刷新生效时间）

	ValidTime *string `json:"ValidTime,omitempty" name:"ValidTime"`
	// 标题

	Title *string `json:"Title,omitempty" name:"Title"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
	// 页面位置。多个可以逗号隔开aa,bb

	Page *string `json:"Page,omitempty" name:"Page"`
}

type CreateContainGroupRequest struct {
	*tchttp.BaseRequest

	// 分组所属应用ID

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 分组所属命名空间ID

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 分组名称字段，长度1~60，字母或下划线开头，可包含字母数字下划线

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 最大分配 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 最大分配内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 实例数量

	InstanceNum *int64 `json:"InstanceNum,omitempty" name:"InstanceNum"`
	// 0:公网 1:集群内访问 2：NodePort

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 数组对象，见下方定义

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 分组备注字段，长度应不大于200字符

	GroupComment *string `json:"GroupComment,omitempty" name:"GroupComment"`
	// 更新方式：0:快速更新 1:滚动更新

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 滚动更新必填，更新间隔

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 部署组资源类型

	GroupResourceType *string `json:"GroupResourceType,omitempty" name:"GroupResourceType"`
	// 子网ID

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// agent 容器分配的 CPU 核数，对应 K8S 的 request

	AgentCpuRequest *string `json:"AgentCpuRequest,omitempty" name:"AgentCpuRequest"`
	// agent 容器最大的 CPU 核数，对应 K8S 的 limit

	AgentCpuLimit *string `json:"AgentCpuLimit,omitempty" name:"AgentCpuLimit"`
	// agent 容器分配的内存 MiB 数，对应 K8S 的 request

	AgentMemRequest *string `json:"AgentMemRequest,omitempty" name:"AgentMemRequest"`
	// agent 容器最大的内存 MiB 数，对应 K8S 的 limit

	AgentMemLimit *string `json:"AgentMemLimit,omitempty" name:"AgentMemLimit"`
	// istioproxy 容器分配的 CPU 核数，对应 K8S 的 request

	IstioCpuRequest *string `json:"IstioCpuRequest,omitempty" name:"IstioCpuRequest"`
	// istioproxy 容器最大的 CPU 核数，对应 K8S 的 limit

	IstioCpuLimit *string `json:"IstioCpuLimit,omitempty" name:"IstioCpuLimit"`
	// istioproxy 容器分配的内存 MiB 数，对应 K8S 的 request

	IstioMemRequest *string `json:"IstioMemRequest,omitempty" name:"IstioMemRequest"`
	// istioproxy 容器最大的内存 MiB 数，对应 K8S 的 limit

	IstioMemLimit *string `json:"IstioMemLimit,omitempty" name:"IstioMemLimit"`
}

func (r *CreateContainGroupRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *CreateContainGroupRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type EnableRatelimitResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 成功与否

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *EnableRatelimitResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *EnableRatelimitResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModulesResult struct {

	// ModuleId值

	ModuleId *string `json:"ModuleId,omitempty" name:"ModuleId"`
	// ModuleName值

	ModuleName *string `json:"ModuleName,omitempty" name:"ModuleName"`
	// ModuleType值

	ModuleType *string `json:"ModuleType,omitempty" name:"ModuleType"`
	// ExternalVip值

	ExternalVip *string `json:"ExternalVip,omitempty" name:"ExternalVip"`
	// InternalVip值

	InternalVip *string `json:"InternalVip,omitempty" name:"InternalVip"`
	// Vports值

	Vports []*VportTypeResult `json:"Vports,omitempty" name:"Vports"`
	// Instances值

	Instances []*InstancesResult `json:"Instances,omitempty" name:"Instances"`
	// AlarmType值

	AlarmType *string `json:"AlarmType,omitempty" name:"AlarmType"`
	// ModuleCommon值

	ModuleCommon *int64 `json:"ModuleCommon,omitempty" name:"ModuleCommon"`
	// DeployOrder值

	DeployOrder *int64 `json:"DeployOrder,omitempty" name:"DeployOrder"`
	// Visible值

	Visible *string `json:"Visible,omitempty" name:"Visible"`
	// ViportVisible值

	ViportVisible *bool `json:"ViportVisible,omitempty" name:"ViportVisible"`
	// HasRole值

	HasRole *bool `json:"HasRole,omitempty" name:"HasRole"`
	// Password值

	Password *string `json:"Password,omitempty" name:"Password"`
	// HasRoleStr值

	HasRoleStr *string `json:"HasRoleStr,omitempty" name:"HasRoleStr"`
}

type ModifyResourceUsageConfigRequest struct {
	*tchttp.BaseRequest

	// 集群展示的阈值

	ClusterThreshold *uint64 `json:"ClusterThreshold,omitempty" name:"ClusterThreshold"`
}

func (r *ModifyResourceUsageConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyResourceUsageConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeFlowAvailableTasksRequest struct {
	*tchttp.BaseRequest

	// 不包含的任务 ID

	ExcludeTaskIds []*string `json:"ExcludeTaskIds,omitempty" name:"ExcludeTaskIds"`
	// 搜索关键字

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 翻页查询偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 翻页查询数量

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeFlowAvailableTasksRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeFlowAvailableTasksRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeTaskExecuteLogInfoResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 执行日志

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeTaskExecuteLogInfoResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeTaskExecuteLogInfoResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyScalableRuleResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 请求结果,true/false

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *ModifyScalableRuleResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyScalableRuleResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DeleteLaneGroupResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 操作状态

		Result *bool `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DeleteLaneGroupResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteLaneGroupResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type License struct {

	// 证书派发时间

	BirthTime *uint64 `json:"BirthTime,omitempty" name:"BirthTime"`
	// 有效期信息

	Duration *LicenseDuration `json:"Duration,omitempty" name:"Duration"`
	// 状态，1待启用，2使用中，3已过期，4作废

	Status *uint64 `json:"Status,omitempty" name:"Status"`
	// 授权产品列表

	Product *LicenseProduct `json:"Product,omitempty" name:"Product"`
}

type GroupListV2 struct {

	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 部署组名

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
}

type DescribeReleasePipelineRunRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 执行ID

	RunId *string `json:"RunId,omitempty" name:"RunId"`
}

func (r *DescribeReleasePipelineRunRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeReleasePipelineRunRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeClusterInstanceCountRequest struct {
	*tchttp.BaseRequest

	// 集群ID

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
}

func (r *DescribeClusterInstanceCountRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeClusterInstanceCountRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ModifyReleasePipelineTaskRequest struct {
	*tchttp.BaseRequest

	// 发布单ID

	ReleaseId *string `json:"ReleaseId,omitempty" name:"ReleaseId"`
	// 任务描述

	Task *TaskSpec `json:"Task,omitempty" name:"Task"`
}

func (r *ModifyReleasePipelineTaskRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ModifyReleasePipelineTaskRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeSingleContainerGroups struct {

	// 部署组id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 分组名称

	GroupName *string `json:"GroupName,omitempty" name:"GroupName"`
	// 最大分配的 CPU 核数，对应 K8S limit

	CpuLimit *string `json:"CpuLimit,omitempty" name:"CpuLimit"`
	// 镜像server

	Server *string `json:"Server,omitempty" name:"Server"`
	// 镜像名，如/tsf/nginx

	Reponame *string `json:"Reponame,omitempty" name:"Reponame"`
	// 镜像版本名称

	TagName *string `json:"TagName,omitempty" name:"TagName"`
	// 集群id

	ClusterId *string `json:"ClusterId,omitempty" name:"ClusterId"`
	// 集群名称

	ClusterName *string `json:"ClusterName,omitempty" name:"ClusterName"`
	// 命名空间id

	NamespaceId *string `json:"NamespaceId,omitempty" name:"NamespaceId"`
	// 命名空间名称

	NamespaceName *string `json:"NamespaceName,omitempty" name:"NamespaceName"`
	// 应用名称

	ApplicationId *string `json:"ApplicationId,omitempty" name:"ApplicationId"`
	// 应用类型

	ApplicationName *string `json:"ApplicationName,omitempty" name:"ApplicationName"`
	// 分组创建时间

	ApplicationType *string `json:"ApplicationType,omitempty" name:"ApplicationType"`
	// 最大分配的内存 MiB 数，对应 K8S limit

	MemLimit *string `json:"MemLimit,omitempty" name:"MemLimit"`
	// 微服务类型

	MicroserviceType *string `json:"MicroserviceType,omitempty" name:"MicroserviceType"`
	// 端口列表

	ProtocolPorts []*ProtocolPort `json:"ProtocolPorts,omitempty" name:"ProtocolPorts"`
	// 更新类型

	UpdateType *int64 `json:"UpdateType,omitempty" name:"UpdateType"`
	// 更新时间间隔

	UpdateIvl *int64 `json:"UpdateIvl,omitempty" name:"UpdateIvl"`
	// 网络访问类型

	AccessType *int64 `json:"AccessType,omitempty" name:"AccessType"`
	// 创建时间

	CreateTime *string `json:"CreateTime,omitempty" name:"CreateTime"`
	// 初始分配的 CPU 核数，对应 K8S request

	CpuRequest *string `json:"CpuRequest,omitempty" name:"CpuRequest"`
	// 初始分配的内存 MiB 数，对应 K8S request

	MemRequest *string `json:"MemRequest,omitempty" name:"MemRequest"`
	// 子网id

	SubnetId *string `json:"SubnetId,omitempty" name:"SubnetId"`
	// 实例个数

	InstanceCount *int64 `json:"InstanceCount,omitempty" name:"InstanceCount"`
	// 部署组资源类型

	GroupResourceType *string `json:"GroupResourceType,omitempty" name:"GroupResourceType"`
	// 环境变量

	Envs *string `json:"Envs,omitempty" name:"Envs"`
	// 部署组更新时间戳

	UpdatedTime *int64 `json:"UpdatedTime,omitempty" name:"UpdatedTime"`
	// 备注

	Alias *string `json:"Alias,omitempty" name:"Alias"`
	// KubeInjectEnable值

	KubeInjectEnable *bool `json:"KubeInjectEnable,omitempty" name:"KubeInjectEnable"`
}

type DescribeMicroServiceSummaryListResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result值

		Result *TsfPageMicroserviceSummary `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeMicroServiceSummaryListResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeMicroServiceSummaryListResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TagRouteItemSourceV2 struct {

	// 标签路由规则项源标签ID

	TagRouteSourceId *string `json:"TagRouteSourceId,omitempty" name:"TagRouteSourceId"`
	// 标签路由，标签类型，表示系统标签或自定义标签, 系统标签： S, 自定义标签： U

	SourceType *string `json:"SourceType,omitempty" name:"SourceType"`
	// 标签路由匹配源字段

	SourceField *string `json:"SourceField,omitempty" name:"SourceField"`
	// 标签路由匹配源规则, 等于: EQUAL， 不等于： NOT_EQUAL， 包含： IN， 不包含： NOT_IN， 正则表达式： REGEX

	SourceMatchRule *string `json:"SourceMatchRule,omitempty" name:"SourceMatchRule"`
	// 标签路由匹配源取值

	SourceValue *string `json:"SourceValue,omitempty" name:"SourceValue"`
	// 标签路由规则项ID

	TagRouteItemId *string `json:"TagRouteItemId,omitempty" name:"TagRouteItemId"`
}

type FindDeployModuleParamsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result []*ModuleParamResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *FindDeployModuleParamsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *FindDeployModuleParamsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetEnvResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// Result

		Result *string `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetEnvResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetEnvResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type ReleaseFileConfigRequest struct {
	*tchttp.BaseRequest

	// 配置ID

	ConfigId *string `json:"ConfigId,omitempty" name:"ConfigId"`
	// 部署组ID

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
	// 发布描述

	ReleaseDesc *string `json:"ReleaseDesc,omitempty" name:"ReleaseDesc"`
}

func (r *ReleaseFileConfigRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *ReleaseFileConfigRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DumpResult struct {

	// Name

	Name *string `json:"Name,omitempty" name:"Name"`
	// State

	State *string `json:"State,omitempty" name:"State"`
	// Detail

	Detail *string `json:"Detail,omitempty" name:"Detail"`
}

type DescribeSidecarFilterNamesRequest struct {
	*tchttp.BaseRequest

	// 部署组Id

	GroupId *string `json:"GroupId,omitempty" name:"GroupId"`
}

func (r *DescribeSidecarFilterNamesRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeSidecarFilterNamesRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type GetContainGroupOtherResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 获取部署组其他字段-前端并发调用场景

		Result *GetContainGroupOtherResult `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *GetContainGroupOtherResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *GetContainGroupOtherResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type PkgInfo struct {

	// 程序包ID

	PkgId *string `json:"PkgId,omitempty" name:"PkgId"`
	// 程序包名

	PkgName *string `json:"PkgName,omitempty" name:"PkgName"`
	// 程序包类型

	PkgType *string `json:"PkgType,omitempty" name:"PkgType"`
	// 程序包版本

	PkgVersion *string `json:"PkgVersion,omitempty" name:"PkgVersion"`
	// 程序包描述

	PkgDesc *string `json:"PkgDesc,omitempty" name:"PkgDesc"`
	// 上传时间

	UploadTime *string `json:"UploadTime,omitempty" name:"UploadTime"`
	// 程序包MD5

	Md5 *string `json:"Md5,omitempty" name:"Md5"`
	// 程序包状态

	PkgPubStatus *int64 `json:"PkgPubStatus,omitempty" name:"PkgPubStatus"`
	// 程序包关联关系

	PkgBindInfo []*PkgBind `json:"PkgBindInfo,omitempty" name:"PkgBindInfo"`
}

type UpdateGatewayTagPluginRequest struct {
	*tchttp.BaseRequest

	// 网关插件id

	Id *string `json:"Id,omitempty" name:"Id"`
	// 插件类型 "tag"

	Type *string `json:"Type,omitempty" name:"Type"`
	// 插件名称

	Name *string `json:"Name,omitempty" name:"Name"`
	// 插件描述

	Description *string `json:"Description,omitempty" name:"Description"`
	// 参数配置Jason串

	TagPluginInfoList *string `json:"TagPluginInfoList,omitempty" name:"TagPluginInfoList"`
}

func (r *UpdateGatewayTagPluginRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *UpdateGatewayTagPluginRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type TaskInstanceV2 struct {

	// id

	Id *string `json:"Id,omitempty" name:"Id"`
	// status

	Status *int64 `json:"Status,omitempty" name:"Status"`
	// mtime

	Mtime *string `json:"Mtime,omitempty" name:"Mtime"`
}

type DeleteProductNewsRequest struct {
	*tchttp.BaseRequest

	// id

	NewsId *string `json:"NewsId,omitempty" name:"NewsId"`
	// 产品标识(默认为tsf)

	ServiceTag *string `json:"ServiceTag,omitempty" name:"ServiceTag"`
}

func (r *DeleteProductNewsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DeleteProductNewsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeBillingDealRecordsRequest struct {
	*tchttp.BaseRequest

	// 搜索词

	SearchWord *string `json:"SearchWord,omitempty" name:"SearchWord"`
	// 排序字段

	OrderBy *string `json:"OrderBy,omitempty" name:"OrderBy"`
	// 排序方式

	OrderType *int64 `json:"OrderType,omitempty" name:"OrderType"`
	// 偏移量

	Offset *int64 `json:"Offset,omitempty" name:"Offset"`
	// 分页个数

	Limit *int64 `json:"Limit,omitempty" name:"Limit"`
}

func (r *DescribeBillingDealRecordsRequest) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeBillingDealRecordsRequest) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}

type DescribeGatewayDailyUseStatisticsResponse struct {
	*tchttp.BaseResponse

	Response *struct {
		// 日使用统计对象

		Result *DailyUseStatistics `json:"Result,omitempty" name:"Result"`
		// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
		RequestId *string `json:"RequestId,omitempty" name:"RequestId"`
	} `json:"Response"`
}

func (r *DescribeGatewayDailyUseStatisticsResponse) ToJsonString() string {
	b, _ := json.Marshal(r)
	return string(b)
}

func (r *DescribeGatewayDailyUseStatisticsResponse) FromJsonString(s string) error {
	return json.Unmarshal([]byte(s), &r)
}
